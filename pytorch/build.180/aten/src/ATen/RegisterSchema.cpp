#include <ATen/TypeDefault.h>

// @generated by tools/codegen/gen.py from RegisterSchema.cpp

#include <ATen/DeviceGuard.h>
#include <ATen/ExpandUtils.h>
#include <ATen/Functions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/NativeFunctions.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <ATen/Operators.h>
#include <ATen/Tensor.h>
#include <c10/core/TensorOptions.h>
#include <ATen/DeviceGuard.h>
#include <ATen/SparseTensorUtils.h>
#include <torch/library.h>

namespace at {
TORCH_LIBRARY(aten, m) {
  m.def("_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor");
  m.def("_cast_Char(Tensor self, bool non_blocking=False) -> Tensor");
  m.def("_cast_Double(Tensor self, bool non_blocking=False) -> Tensor");
  m.def("_cast_Float(Tensor self, bool non_blocking=False) -> Tensor");
  m.def("_cast_Int(Tensor self, bool non_blocking=False) -> Tensor");
  m.def("_cast_Long(Tensor self, bool non_blocking=False) -> Tensor");
  m.def("_cast_Short(Tensor self, bool non_blocking=False) -> Tensor");
  m.def("_cast_Half(Tensor self, bool non_blocking=False) -> Tensor");
  m.def("_backward(Tensor self, Tensor[] inputs, Tensor? gradient=None, bool? retain_graph=None, bool create_graph=False) -> ()");
  m.def("set_data(Tensor(a!) self, Tensor new_data) -> ()");
  m.def("data(Tensor self) -> Tensor");
  m.def("is_leaf(Tensor self) -> bool");
  m.def("output_nr(Tensor self) -> int");
  m.def("_version(Tensor self) -> int");
  m.def("requires_grad_(Tensor(a!) self, bool requires_grad=True) -> Tensor(a!)");
  m.def("retain_grad(Tensor(a!) self) -> ()");
  m.def("retains_grad(Tensor self) -> bool");
  m.def("_fw_primal(Tensor(a) self, int level) -> Tensor(a)");
  m.def("_make_dual(Tensor(a) primal, Tensor tangent, int level) -> Tensor(a)");
  m.def("_unpack_dual(Tensor(a) dual, int level) -> (Tensor(a) primal, Tensor tangent)");
  m.def("rename_(Tensor(a!) self, Dimname[]? names) -> Tensor(a!)");
  m.def("rename(Tensor(a) self, Dimname[]? names) -> Tensor(a)");
  m.def("align_to(Tensor(a) self, Dimname[] names) -> Tensor(a)");
  m.def("align_to.ellipsis_idx(Tensor(a) self, Dimname[] order, int ellipsis_idx) -> Tensor(a)");
  m.def("align_as(Tensor self, Tensor other) -> Tensor");
  m.def("align_tensors(Tensor[] tensors) -> Tensor[]");
  m.def("_assert_async(Tensor self) -> ()");
  m.def("refine_names(Tensor(a) self, Dimname[] names) -> Tensor(a)");
  m.def("_use_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank) -> bool");
  m.def("_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)");
  m.def("_use_cudnn_rnn_flatten_weight() -> bool");
  m.def("_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, bool bidirectional) -> Tensor");
  m.def("_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])");
  m.def("_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor");
  m.def("_debug_has_internal_overlap(Tensor self) -> int");
  m.def("_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)");
  m.def("_masked_scale(Tensor self, Tensor mask, float scale) -> Tensor");
  m.def("_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)");
  m.def("_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)");
  m.def("_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)");
  m.def("_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)");
  m.def("_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor");
  m.def("_shape_as_tensor(Tensor self) -> Tensor");
  m.def("dropout(Tensor input, float p, bool train) -> Tensor");
  m.def("dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)");
  m.def("feature_dropout(Tensor input, float p, bool train) -> Tensor");
  m.def("feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)");
  m.def("alpha_dropout(Tensor input, float p, bool train) -> Tensor");
  m.def("alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)");
  m.def("feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor");
  m.def("feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)");
  m.def("abs(Tensor self) -> Tensor");
  m.def("abs_(Tensor(a!) self) -> Tensor(a!)");
  m.def("abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("absolute(Tensor self) -> Tensor");
  m.def("absolute_(Tensor(a!) self) -> Tensor(a!)");
  m.def("absolute.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("angle(Tensor self) -> Tensor");
  m.def("angle.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("view_as_real(Tensor(a) self) -> Tensor(a)");
  m.def("view_as_complex(Tensor(a) self) -> Tensor(a)");
  m.def("sgn(Tensor self) -> Tensor");
  m.def("sgn_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sgn.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("real(Tensor(a) self) -> Tensor(a)");
  m.def("imag(Tensor(a) self) -> Tensor(a)");
  m.def("_conj(Tensor(a) self) -> Tensor(a)");
  m.def("conj(Tensor(a) self) -> Tensor(a)");
  m.def("_conj_physical(Tensor self) -> Tensor");
  m.def("conj_physical(Tensor self) -> Tensor");
  m.def("conj_physical.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("conj_physical_(Tensor(a!) self) -> Tensor(a!)");
  m.def("resolve_conj(Tensor(a) self) -> Tensor(a)");
  m.def("resolve_neg(Tensor(a) self) -> Tensor(a)");
  m.def("_neg_view(Tensor(a) self) -> Tensor(a)");
  m.def("acos(Tensor self) -> Tensor");
  m.def("acos_(Tensor(a!) self) -> Tensor(a!)");
  m.def("acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("arccos(Tensor self) -> Tensor");
  m.def("arccos_(Tensor(a!) self) -> Tensor(a!)");
  m.def("arccos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor");
  m.def("adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor");
  m.def("adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)");
  m.def("add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor");
  m.def("add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)");
  m.def("add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("_add_relu.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor");
  m.def("_add_relu_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)");
  m.def("_add_relu.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("_add_relu.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor");
  m.def("_add_relu_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)");
  m.def("add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor");
  m.def("add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)");
  m.def("addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor");
  m.def("affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor");
  m.def("all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor");
  m.def("all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor");
  m.def("all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool");
  m.def("any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor");
  m.def("any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor");
  m.def("any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_dim_arange(Tensor like, int dim) -> Tensor");
  m.def("argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor");
  m.def("argmax.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor");
  m.def("argmin.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("acosh(Tensor self) -> Tensor");
  m.def("acosh_(Tensor(a!) self) -> Tensor(a!)");
  m.def("acosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("arccosh(Tensor self) -> Tensor");
  m.def("arccosh_(Tensor(a!) self) -> Tensor(a!)");
  m.def("arccosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("asinh(Tensor self) -> Tensor");
  m.def("asinh_(Tensor(a!) self) -> Tensor(a!)");
  m.def("asinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("arcsinh(Tensor self) -> Tensor");
  m.def("arcsinh_(Tensor(a!) self) -> Tensor(a!)");
  m.def("arcsinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("atanh(Tensor self) -> Tensor");
  m.def("atanh_(Tensor(a!) self) -> Tensor(a!)");
  m.def("atanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("arctanh(Tensor self) -> Tensor");
  m.def("arctanh_(Tensor(a!) self) -> Tensor(a!)");
  m.def("arctanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)");
  m.def("as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)");
  m.def("asin(Tensor self) -> Tensor");
  m.def("asin_(Tensor(a!) self) -> Tensor(a!)");
  m.def("asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("arcsin(Tensor self) -> Tensor");
  m.def("arcsin_(Tensor(a!) self) -> Tensor(a!)");
  m.def("arcsin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("atan(Tensor self) -> Tensor");
  m.def("atan_(Tensor(a!) self) -> Tensor(a!)");
  m.def("atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("arctan(Tensor self) -> Tensor");
  m.def("arctan_(Tensor(a!) self) -> Tensor(a!)");
  m.def("arctan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("atleast_1d(Tensor self) -> Tensor");
  m.def("atleast_1d.Sequence(Tensor[] tensors) -> Tensor[]");
  m.def("atleast_2d(Tensor self) -> Tensor");
  m.def("atleast_2d.Sequence(Tensor[] tensors) -> Tensor[]");
  m.def("atleast_3d(Tensor self) -> Tensor");
  m.def("atleast_3d.Sequence(Tensor[] tensors) -> Tensor[]");
  m.def("baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor");
  m.def("quantized_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> Tensor");
  m.def("_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)");
  m.def("_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)");
  m.def("bernoulli(Tensor self, *, Generator? generator=None) -> Tensor");
  m.def("bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)");
  m.def("bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)");
  m.def("bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor");
  m.def("bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor");
  m.def("binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor");
  m.def("binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor");
  m.def("binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor");
  m.def("binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor");
  m.def("bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor");
  m.def("bitwise_not(Tensor self) -> Tensor");
  m.def("bitwise_not_(Tensor(a!) self) -> Tensor(a!)");
  m.def("bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("copysign.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("copysign.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("copysign_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("copysign.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("copysign_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("copysign.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logical_not(Tensor self) -> Tensor");
  m.def("logical_not_(Tensor(a!) self) -> Tensor(a!)");
  m.def("logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logical_xor(Tensor self, Tensor other) -> Tensor");
  m.def("logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logical_and(Tensor self, Tensor other) -> Tensor");
  m.def("logical_and_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logical_or(Tensor self, Tensor other) -> Tensor");
  m.def("logical_or_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("bmm(Tensor self, Tensor mat2) -> Tensor");
  m.def("bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("broadcast_tensors(Tensor[] tensors) -> Tensor[]");
  m.def("broadcast_to(Tensor(a) self, int[] size) -> Tensor(a)");
  m.def("cat(Tensor[] tensors, int dim=0) -> Tensor");
  m.def("cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("cat.names(Tensor[] tensors, Dimname dim) -> Tensor");
  m.def("cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("concat(Tensor[] tensors, int dim=0) -> Tensor");
  m.def("concat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("concat.names(Tensor[] tensors, Dimname dim) -> Tensor");
  m.def("concat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("block_diag(Tensor[] tensors) -> Tensor");
  m.def("ceil(Tensor self) -> Tensor");
  m.def("ceil_(Tensor(a!) self) -> Tensor(a!)");
  m.def("ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("chain_matmul(Tensor[] matrices) -> Tensor");
  m.def("chain_matmul.out(Tensor[] matrices, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("unsafe_chunk(Tensor self, int chunks, int dim=0) -> Tensor[]");
  m.def("chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]");
  m.def("tensor_split.sections(Tensor(a) self, int sections, int dim=0) -> Tensor(a)[]");
  m.def("tensor_split.indices(Tensor(a) self, int[] indices, int dim=0) -> Tensor(a)[]");
  m.def("tensor_split.tensor_indices_or_sections(Tensor(a) self, Tensor tensor_indices_or_sections, int dim=0) -> Tensor(a)[]");
  m.def("clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor");
  m.def("clamp.Tensor(Tensor self, Tensor? min=None, Tensor? max=None) -> Tensor");
  m.def("clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)");
  m.def("clamp_.Tensor(Tensor(a!) self, Tensor? min=None, Tensor? max=None) -> Tensor(a!)");
  m.def("clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("clamp.Tensor_out(Tensor self, Tensor? min=None, Tensor? max=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("clamp_max(Tensor self, Scalar max) -> Tensor");
  m.def("clamp_max.Tensor(Tensor self, Tensor max) -> Tensor");
  m.def("clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)");
  m.def("clamp_max_.Tensor(Tensor(a!) self, Tensor max) -> Tensor(a!)");
  m.def("clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("clamp_max.Tensor_out(Tensor self, Tensor max, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("clamp_min(Tensor self, Scalar min) -> Tensor");
  m.def("clamp_min.Tensor(Tensor self, Tensor min) -> Tensor");
  m.def("clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)");
  m.def("clamp_min_.Tensor(Tensor(a!) self, Tensor min) -> Tensor(a!)");
  m.def("clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("clamp_min.Tensor_out(Tensor self, Tensor min, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("clip(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor");
  m.def("clip.Tensor(Tensor self, Tensor? min=None, Tensor? max=None) -> Tensor");
  m.def("clip_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)");
  m.def("clip_.Tensor(Tensor(a!) self, Tensor? min=None, Tensor? max=None) -> Tensor(a!)");
  m.def("clip.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("clip.Tensor_out(Tensor self, Tensor? min=None, Tensor? max=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("cudnn_is_acceptable(Tensor self) -> bool");
  m.def("complex(Tensor real, Tensor imag) -> Tensor");
  m.def("complex.out(Tensor real, Tensor imag, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("polar(Tensor abs, Tensor angle) -> Tensor");
  m.def("polar.out(Tensor abs, Tensor angle, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor");
  m.def("contiguous(Tensor(a) self, *, MemoryFormat memory_format=contiguous_format) -> Tensor(a)");
  m.def("convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor");
  m.def("convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor");
  m.def("convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) -> Tensor");
  m.def("_convolution.deprecated(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor");
  m.def("_convolution_mode(Tensor input, Tensor weight, Tensor? bias, int[] stride, str padding, int[] dilation, int groups) -> Tensor");
  m.def("_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor");
  m.def("_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor");
  m.def("conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor");
  m.def("conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor");
  m.def("conv1d.padding(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, str padding=\"valid\", int[1] dilation=1, int groups=1) -> Tensor");
  m.def("conv2d.padding(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, str padding=\"valid\", int[2] dilation=1, int groups=1) -> Tensor");
  m.def("conv3d.padding(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, str padding=\"valid\", int[3] dilation=1, int groups=1) -> Tensor");
  m.def("conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor");
  m.def("conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)");
  m.def("conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor");
  m.def("conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor");
  m.def("conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor");
  m.def("copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)");
  m.def("_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> Tensor");
  m.def("_copy_from_and_resize(Tensor self, Tensor dst) -> Tensor");
  m.def("cos(Tensor self) -> Tensor");
  m.def("cos_(Tensor(a!) self) -> Tensor(a!)");
  m.def("cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("cosh(Tensor self) -> Tensor");
  m.def("cosh_(Tensor(a!) self) -> Tensor(a!)");
  m.def("cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor");
  m.def("count_nonzero.dim_IntList(Tensor self, int[] dim) -> Tensor");
  m.def("count_nonzero(Tensor self, int? dim=None) -> Tensor");
  m.def("cov(Tensor self, *, int correction=1, Tensor? fweights=None, Tensor? aweights=None) -> Tensor");
  m.def("corrcoef(Tensor self) -> Tensor");
  m.def("cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> Tensor grid");
  m.def("cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> Tensor grad_theta");
  m.def("cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon, Tensor reserveSpace) -> (Tensor, Tensor, Tensor)");
  m.def("cudnn_convolution.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution.deprecated2(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor");
  m.def("cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor");
  m.def("cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32, bool[2] output_mask) -> (Tensor, Tensor)");
  m.def("cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor");
  m.def("cudnn_convolution_transpose.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution_transpose.deprecated2(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("cudnn_convolution_transpose(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor");
  m.def("cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32, bool[2] output_mask) -> (Tensor, Tensor)");
  m.def("cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor");
  m.def("cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> Tensor");
  m.def("cudnn_convolution_relu(Tensor self, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor");
  m.def("cudnn_convolution_add_relu(Tensor self, Tensor weight, Tensor z, Scalar? alpha, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> Tensor");
  m.def("cudnn_grid_sampler(Tensor self, Tensor grid) -> Tensor output");
  m.def("cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)");
  m.def("cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)");
  m.def("cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("cummax.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)");
  m.def("cummax.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("_cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()");
  m.def("cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)");
  m.def("cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("cummin.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)");
  m.def("cummin.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("_cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()");
  m.def("cummaxmin_backward(Tensor grad, Tensor input, Tensor indices, int dim) -> Tensor");
  m.def("cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor");
  m.def("cumprod_(Tensor(a!) self, int dim, *, ScalarType? dtype=None) -> Tensor(a!)");
  m.def("cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.def("cumprod_.dimname(Tensor(a!) self, Dimname dim, *, ScalarType? dtype=None) -> Tensor(a!)");
  m.def("cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("cumprod_backward(Tensor grad, Tensor input, int dim, Tensor output) -> Tensor");
  m.def("cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor");
  m.def("cumsum_(Tensor(a!) self, int dim, *, ScalarType? dtype=None) -> Tensor(a!)");
  m.def("cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.def("cumsum_.dimname(Tensor(a!) self, Dimname dim, *, ScalarType? dtype=None) -> Tensor(a!)");
  m.def("cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("cumulative_trapezoid.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor");
  m.def("cumulative_trapezoid.dx(Tensor y, *, Scalar dx=1, int dim=-1) -> Tensor");
  m.def("ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor");
  m.def("ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor");
  m.def("_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)");
  m.def("_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor");
  m.def("diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor");
  m.def("diagflat(Tensor self, int offset=0) -> Tensor");
  m.def("diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)");
  m.def("diagonal.Dimname(Tensor(a) self, *, Dimname outdim, Dimname dim1, Dimname dim2, int offset=0) -> Tensor(a)");
  m.def("diagonal_backward(Tensor grad_output, int[] input_sizes, int offset, int dim1, int dim2) -> Tensor");
  m.def("fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)");
  m.def("diff(Tensor self, int n=1, int dim=-1, Tensor? prepend=None, Tensor? append=None) -> Tensor");
  m.def("diff.out(Tensor self, int n=1, int dim=-1, Tensor? prepend=None, Tensor? append=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("gradient.scalarint(Tensor self, *, Scalar? spacing=None, int? dim=None, int edge_order=1) -> Tensor[]");
  m.def("gradient.scalararray(Tensor self, *, Scalar spacing, int[] dim, int edge_order=1) -> Tensor[]");
  m.def("gradient.array(Tensor self, *, int[] dim, int edge_order=1) -> Tensor[]");
  m.def("gradient.scalarrayint(Tensor self, *, Scalar[] spacing, int? dim=None, int edge_order=1) -> Tensor[]");
  m.def("gradient.scalarrayarray(Tensor self, *, Scalar[] spacing, int[] dim, int edge_order=1) -> Tensor[]");
  m.def("gradient.tensorarrayint(Tensor self, *, Tensor[] spacing, int? dim=None, int edge_order=1) -> Tensor[]");
  m.def("gradient.tensorarray(Tensor self, *, Tensor[] spacing, int[] dim, int edge_order=1) -> Tensor[]");
  m.def("div.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("div.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> Tensor");
  m.def("div_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> Tensor(a!)");
  m.def("div.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> Tensor(a!)");
  m.def("div.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("div.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> Tensor");
  m.def("div_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> Tensor(a!)");
  m.def("divide.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("divide.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("divide.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> Tensor");
  m.def("divide_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> Tensor(a!)");
  m.def("divide.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> Tensor(a!)");
  m.def("divide.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> Tensor");
  m.def("divide_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> Tensor(a!)");
  m.def("true_divide.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("true_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("true_divide.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("true_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("dot(Tensor self, Tensor tensor) -> Tensor");
  m.def("dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("vdot(Tensor self, Tensor other) -> Tensor");
  m.def("vdot.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("einsum(str equation, Tensor[] tensors) -> Tensor");
  m.def("embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor");
  m.def("embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor");
  m.def("embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor");
  m.def("embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)");
  m.def("embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor");
  m.def("_embedding_bag_forward_only(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("_rowwise_prune(Tensor weight, Tensor mask, ScalarType compressed_indices_dtype) -> (Tensor, Tensor)");
  m.def("row_stack(Tensor[] tensors) -> Tensor");
  m.def("row_stack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("embedding_bag.padding_idx(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, bool include_last_offset, int? padding_idx) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor");
  m.def("_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor");
  m.def("_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> Tensor");
  m.def("_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode, int padding_idx=-1) -> Tensor");
  m.def("empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("new_empty(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("new_empty_strided(Tensor self, int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("new_full(Tensor self, int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("new_zeros(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("new_ones(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("_empty_affine_quantized(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor");
  m.def("_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=contiguous_format) -> Tensor");
  m.def("resize_(Tensor(a!) self, int[] size, *, MemoryFormat? memory_format=None) -> Tensor(a!)");
  m.def("empty_quantized(int[] size, Tensor qtensor, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("empty_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("erf(Tensor self) -> Tensor");
  m.def("erf_(Tensor(a!) self) -> Tensor(a!)");
  m.def("erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("erfc(Tensor self) -> Tensor");
  m.def("erfc_(Tensor(a!) self) -> Tensor(a!)");
  m.def("erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("exp(Tensor self) -> Tensor");
  m.def("exp_(Tensor(a!) self) -> Tensor(a!)");
  m.def("exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("exp2(Tensor self) -> Tensor");
  m.def("exp2_(Tensor(a!) self) -> Tensor(a!)");
  m.def("exp2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("expm1(Tensor self) -> Tensor");
  m.def("expm1_(Tensor(a!) self) -> Tensor(a!)");
  m.def("expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)");
  m.def("expand_as(Tensor(a) self, Tensor other) -> Tensor(a)");
  m.def("eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("flatten.using_ints(Tensor(a) self, int start_dim=0, int end_dim=-1) -> Tensor(a)");
  m.def("flatten.named_out_dim(Tensor(a) self, int start_dim, int end_dim, Dimname out_dim) -> Tensor(a)");
  m.def("flatten.using_names(Tensor(a) self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor(a)");
  m.def("flatten.DimnameList(Tensor(a) self, Dimname[] dims, Dimname out_dim) -> Tensor(a)");
  m.def("unflatten.int(Tensor(a) self, int dim, int[] sizes, Dimname[]? names=None) -> Tensor(a)");
  m.def("unflatten.Dimname(Tensor(a) self, Dimname dim, int[] sizes, Dimname[] names) -> Tensor(a)");
  m.def("fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)");
  m.def("fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)");
  m.def("floor(Tensor self) -> Tensor");
  m.def("floor_(Tensor(a!) self) -> Tensor(a!)");
  m.def("floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("floor_divide(Tensor self, Tensor other) -> Tensor");
  m.def("floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("floor_divide.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("frac(Tensor self) -> Tensor");
  m.def("frac_(Tensor(a!) self) -> Tensor(a!)");
  m.def("frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("full_like(Tensor self, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("from_file(str filename, bool? shared=None, int? size=0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("gcd.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("gcd(Tensor self, Tensor other) -> Tensor");
  m.def("gcd_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("lcm.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lcm(Tensor self, Tensor other) -> Tensor");
  m.def("lcm_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor");
  m.def("grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor");
  m.def("grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)");
  m.def("_grid_sampler_2d_cpu_fallback(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor");
  m.def("_grid_sampler_2d_cpu_fallback_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)");
  m.def("grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor");
  m.def("grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)");
  m.def("hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("kaiser_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("kaiser_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("kaiser_window.beta(int window_length, bool periodic, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor");
  m.def("group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor");
  m.def("native_group_norm(Tensor input, Tensor? weight, Tensor? bias, int N, int C, int HxW, int group, float eps) -> (Tensor, Tensor, Tensor)");
  m.def("native_group_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int N, int C, int HxW, int group, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("_fft_r2c(Tensor self, int[] dim, int normalization, bool onesided) -> Tensor");
  m.def("_fft_r2c.out(Tensor self, int[] dim, int normalization, bool onesided, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_fft_c2r(Tensor self, int[] dim, int normalization, int last_dim_size) -> Tensor");
  m.def("_fft_c2r.out(Tensor self, int[] dim, int normalization, int last_dim_size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_fft_c2c(Tensor self, int[] dim, int normalization, bool forward) -> Tensor");
  m.def("_fft_c2c.out(Tensor self, int[] dim, int normalization, bool forward, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_cufft_get_plan_cache_size(int device_index) -> int");
  m.def("_cufft_get_plan_cache_max_size(int device_index) -> int");
  m.def("_cufft_set_plan_cache_max_size(int device_index, int max_size) -> ()");
  m.def("_cufft_clear_plan_cache(int device_index) -> ()");
  m.def("index.Tensor(Tensor self, Tensor?[] indices) -> Tensor");
  m.def("index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)");
  m.def("index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor");
  m.def("index_copy_.dimname(Tensor(a!) self, Dimname dim, Tensor index, Tensor source) -> Tensor(a!)");
  m.def("index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor");
  m.def("index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)");
  m.def("index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor");
  m.def("_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)");
  m.def("instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor");
  m.def("inverse(Tensor self) -> Tensor");
  m.def("inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_inverse_helper(Tensor self) -> Tensor");
  m.def("isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor");
  m.def("isin.Tensor_Tensor_out(Tensor elements, Tensor test_elements, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("isin.Tensor_Tensor(Tensor elements, Tensor test_elements, *, bool assume_unique=False, bool invert=False) -> Tensor");
  m.def("isin.Tensor_Scalar_out(Tensor elements, Scalar test_element, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("isin.Tensor_Scalar(Tensor elements, Scalar test_element, *, bool assume_unique=False, bool invert=False) -> Tensor");
  m.def("isin.Scalar_Tensor_out(Scalar element, Tensor test_elements, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("isin.Scalar_Tensor(Scalar element, Tensor test_elements, *, bool assume_unique=False, bool invert=False) -> Tensor");
  m.def("isnan(Tensor self) -> Tensor");
  m.def("is_distributed(Tensor self) -> bool");
  m.def("is_floating_point(Tensor self) -> bool");
  m.def("is_complex(Tensor self) -> bool");
  m.def("is_conj(Tensor self) -> bool");
  m.def("is_neg(Tensor self) -> bool");
  m.def("isreal(Tensor self) -> Tensor");
  m.def("is_nonzero(Tensor self) -> bool");
  m.def("is_same_size(Tensor self, Tensor other) -> bool");
  m.def("is_signed(Tensor self) -> bool");
  m.def("is_inference(Tensor self) -> bool");
  m.def("kl_div(Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor");
  m.def("kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor");
  m.def("kron(Tensor self, Tensor other) -> Tensor");
  m.def("kron.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor");
  m.def("native_layer_norm(Tensor input, int[] normalized_shape, Tensor? weight, Tensor? bias, float eps) -> (Tensor, Tensor, Tensor)");
  m.def("native_layer_norm_backward(Tensor grad_out, Tensor input, int[] normalized_shape, Tensor mean, Tensor rstd, Tensor? weight, Tensor? bias, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("nan_to_num(Tensor self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor");
  m.def("nan_to_num_(Tensor(a!) self, float? nan=None, float? posinf=None, float? neginf=None) -> Tensor(a!)");
  m.def("nan_to_num.out(Tensor self, float? nan=None, float? posinf=None, float? neginf=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor");
  m.def("linear.out(Tensor input, Tensor weight, Tensor? bias=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("mkldnn_linear(Tensor self, Tensor weight, Tensor? bias=None) -> Tensor");
  m.def("mkldnn_linear_backward_input(int[] input_size, Tensor grad_output, Tensor weight) -> Tensor");
  m.def("mkldnn_linear_backward_weights(Tensor grad_output, Tensor input, Tensor weight, bool bias_defined) -> (Tensor, Tensor)");
  m.def("mkldnn_linear_backward(Tensor self, Tensor grad_output, Tensor weight, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor");
  m.def("fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor");
  m.def("fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)");
  m.def("fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor");
  m.def("fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor");
  m.def("fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor");
  m.def("fbgemm_pack_quantized_matrix(Tensor input) -> Tensor");
  m.def("fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> Tensor");
  m.def("ldexp.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("ldexp_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("ldexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linspace(Scalar start, Scalar end, int? steps=None, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("linspace.out(Scalar start, Scalar end, int? steps=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log(Tensor self) -> Tensor");
  m.def("log_(Tensor(a!) self) -> Tensor(a!)");
  m.def("log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log10(Tensor self) -> Tensor");
  m.def("log10_(Tensor(a!) self) -> Tensor(a!)");
  m.def("log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log1p(Tensor self) -> Tensor");
  m.def("log1p_(Tensor(a!) self) -> Tensor(a!)");
  m.def("log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log2(Tensor self) -> Tensor");
  m.def("log2_(Tensor(a!) self) -> Tensor(a!)");
  m.def("log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logaddexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logaddexp(Tensor self, Tensor other) -> Tensor");
  m.def("logaddexp2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logaddexp2(Tensor self, Tensor other) -> Tensor");
  m.def("xlogy.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("xlogy.Scalar_Self(Scalar self, Tensor other) -> Tensor");
  m.def("xlogy.Scalar_Other(Tensor self, Scalar other) -> Tensor");
  m.def("xlogy_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("xlogy_.Scalar_Other(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("xlogy.OutTensor(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("xlogy.OutScalar_Self(Scalar self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("xlogy.OutScalar_Other(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logdet(Tensor self) -> Tensor");
  m.def("logspace(Scalar start, Scalar end, int? steps=None, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("logspace.out(Scalar start, Scalar end, int? steps=None, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor");
  m.def("log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.def("_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor");
  m.def("_log_softmax.out(Tensor self, int dim, bool half_to_float, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor");
  m.def("_log_softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_logcumsumexp(Tensor self, int dim) -> Tensor");
  m.def("_logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logcumsumexp(Tensor self, int dim) -> Tensor");
  m.def("logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logcumsumexp.dimname(Tensor self, Dimname dim) -> Tensor");
  m.def("logcumsumexp.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor");
  m.def("logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor");
  m.def("logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor");
  m.def("matmul(Tensor self, Tensor other) -> Tensor");
  m.def("matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor");
  m.def("matrix_rank(Tensor self, bool symmetric=False) -> Tensor");
  m.def("matrix_power(Tensor self, int n) -> Tensor");
  m.def("matrix_power.out(Tensor self, int n, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("matrix_exp(Tensor self) -> Tensor");
  m.def("matrix_exp_backward(Tensor self, Tensor grad) -> Tensor");
  m.def("_aminmax(Tensor self) -> (Tensor, Tensor)");
  m.def("_aminmax.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("aminmax(Tensor self, *, int? dim=None, bool keepdim=False) -> (Tensor min, Tensor max)");
  m.def("aminmax.out(Tensor self, *, int? dim=None, bool keepdim=False, Tensor(a!) min, Tensor(b!) max) -> (Tensor(a!) min, Tensor(b!) max)");
  m.def("_compute_linear_combination(Tensor input, Tensor coefficients) -> Tensor");
  m.def("_compute_linear_combination.out(Tensor input, Tensor coefficients, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("value_selecting_reduction_backward(Tensor grad, int dim, Tensor indices, int[] sizes, bool keepdim) -> Tensor");
  m.def("amax(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor");
  m.def("amax.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)");
  m.def("max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("mkldnn_max_pool2d_backward(Tensor grad_output, Tensor output, Tensor input, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("mkldnn_max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("mkldnn_max_pool3d_backward(Tensor grad_output, Tensor output, Tensor input, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("quantized_max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor");
  m.def("mean(Tensor self, *, ScalarType? dtype=None) -> Tensor");
  m.def("mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("nanmean(Tensor self, int[1] dim=[], bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("nanmean.out(Tensor self, int[1] dim=[], bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("median(Tensor self) -> Tensor");
  m.def("median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("nanmedian(Tensor self) -> Tensor");
  m.def("nanmedian.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("nanmedian.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("nanmedian.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("nanmedian.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("amin(Tensor self, int[1] dim=[], bool keepdim=False) -> Tensor");
  m.def("amin.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor");
  m.def("mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor");
  m.def("mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)");
  m.def("mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_convolution_backward_bias(Tensor grad_output) -> Tensor");
  m.def("miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor");
  m.def("miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])");
  m.def("mm(Tensor self, Tensor mat2) -> Tensor");
  m.def("mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_sparse_mm(Tensor sparse, Tensor dense) -> Tensor");
  m.def("_sparse_sparse_matmul(Tensor self, Tensor other) -> Tensor");
  m.def("_sparse_mask_helper(Tensor t, Tensor mask_indices) -> Tensor");
  m.def("mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)");
  m.def("mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("mul.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("mul.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("multiply.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("multiply_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("multiply.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("multiply.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("multiply_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("mv(Tensor self, Tensor vec) -> Tensor");
  m.def("mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("mvlgamma.out(Tensor self, int p, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("mvlgamma(Tensor self, int p) -> Tensor");
  m.def("mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)");
  m.def("narrow_copy(Tensor self, int dim, int start, int length) -> Tensor");
  m.def("narrow_copy.out(Tensor self, int dim, int start, int length, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)");
  m.def("narrow.Tensor(Tensor(a) self, int dim, Tensor start, int length) -> Tensor(a)");
  m.def("native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)");
  m.def("native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)");
  m.def("batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor");
  m.def("batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)");
  m.def("batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)");
  m.def("native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)");
  m.def("batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu, Tensor count) -> Tensor");
  m.def("batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)");
  m.def("is_vulkan_available() -> bool");
  m.def("_nnpack_available() -> bool");
  m.def("_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1) -> Tensor");
  m.def("_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)");
  m.def("_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor");
  m.def("_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor");
  m.def("ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ones_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor");
  m.def("cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor");
  m.def("_euclidean_dist(Tensor x1, Tensor x2) -> Tensor");
  m.def("_cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> Tensor");
  m.def("_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor");
  m.def("pdist(Tensor self, float p=2) -> Tensor");
  m.def("_pdist_forward(Tensor self, float p=2) -> Tensor");
  m.def("_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor");
  m.def("cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor");
  m.def("permute(Tensor(a) self, int[] dims) -> Tensor(a)");
  m.def("movedim.intlist(Tensor(a) self, int[] source, int[] destination) -> Tensor(a)");
  m.def("movedim.int(Tensor(a) self, int source, int destination) -> Tensor(a)");
  m.def("moveaxis.intlist(Tensor(a) self, int[] source, int[] destination) -> Tensor(a)");
  m.def("moveaxis.int(Tensor(a) self, int source, int destination) -> Tensor(a)");
  m.def("numpy_T(Tensor(a) self) -> Tensor(a)");
  m.def("pixel_shuffle(Tensor self, int upscale_factor) -> Tensor");
  m.def("pixel_unshuffle(Tensor self, int downscale_factor) -> Tensor");
  m.def("channel_shuffle(Tensor self, int groups) -> Tensor");
  m.def("is_pinned(Tensor self, Device? device=None) -> bool");
  m.def("pin_memory(Tensor(a) self, Device? device=None) -> Tensor(a)");
  m.def("_pin_memory(Tensor self, Device? device=None) -> Tensor");
  m.def("pinverse(Tensor self, float rcond=1e-15) -> Tensor");
  m.def("poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor");
  m.def("rad2deg(Tensor self) -> Tensor");
  m.def("rad2deg_(Tensor(a!) self) -> Tensor(a!)");
  m.def("rad2deg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("deg2rad(Tensor self) -> Tensor");
  m.def("deg2rad_(Tensor(a!) self) -> Tensor(a!)");
  m.def("deg2rad.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.def("rand_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.def("randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.def("randint_like(Tensor self, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.def("randn_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("randperm(int n, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randperm.generator(int n, *, Generator? generator, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)");
  m.def("range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ravel(Tensor(a) self) -> Tensor(a)");
  m.def("reciprocal(Tensor self) -> Tensor");
  m.def("reciprocal_(Tensor(a!) self) -> Tensor(a!)");
  m.def("reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("neg(Tensor self) -> Tensor");
  m.def("neg_(Tensor(a!) self) -> Tensor(a!)");
  m.def("neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("negative(Tensor self) -> Tensor");
  m.def("negative_(Tensor(a!) self) -> Tensor(a!)");
  m.def("negative.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("repeat(Tensor self, int[] repeats) -> Tensor");
  m.def("repeat_interleave.Tensor(Tensor repeats, *, int? output_size=None) -> Tensor");
  m.def("repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None, *, int? output_size=None) -> Tensor");
  m.def("repeat_interleave.self_int(Tensor self, int repeats, int? dim=None, *, int? output_size=None) -> Tensor");
  m.def("reshape(Tensor(a) self, int[] shape) -> Tensor(a)");
  m.def("_reshape_alias(Tensor(a) self, int[] size, int[] stride) -> Tensor(a)");
  m.def("_mkldnn_reshape(Tensor self, int[] shape) -> Tensor");
  m.def("reshape_as(Tensor(a) self, Tensor other) -> Tensor(a)");
  m.def("round(Tensor self) -> Tensor");
  m.def("round_(Tensor(a!) self) -> Tensor(a!)");
  m.def("round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor");
  m.def("rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)");
  m.def("relu(Tensor self) -> Tensor");
  m.def("relu_(Tensor(a!) self) -> Tensor(a!)");
  m.def("relu6(Tensor self) -> Tensor");
  m.def("relu6_(Tensor(a!) self) -> Tensor(a!)");
  m.def("prelu(Tensor self, Tensor weight) -> Tensor");
  m.def("prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)");
  m.def("gelu.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("gelu(Tensor self) -> Tensor");
  m.def("gelu_backward.grad_input(Tensor grad, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("gelu_backward(Tensor grad, Tensor self) -> Tensor");
  m.def("infinitely_differentiable_gelu_backward(Tensor grad, Tensor self) -> Tensor");
  m.def("hardshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor");
  m.def("hardshrink_backward.grad_input(Tensor grad_out, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor");
  m.def("rsqrt(Tensor self) -> Tensor");
  m.def("rsqrt_(Tensor(a!) self) -> Tensor(a!)");
  m.def("rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)");
  m.def("select.int(Tensor(a) self, int dim, int index) -> Tensor(a)");
  m.def("select_backward(Tensor grad_output, int[] input_sizes, int dim, int index) -> Tensor");
  m.def("selu(Tensor self) -> Tensor");
  m.def("selu_(Tensor(a!) self) -> Tensor(a!)");
  m.def("celu(Tensor self, Scalar alpha=1.0) -> Tensor");
  m.def("celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)");
  m.def("silu(Tensor self) -> Tensor");
  m.def("silu_(Tensor(a!) self) -> Tensor(a!)");
  m.def("silu.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("silu_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("silu_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("mish(Tensor self) -> Tensor");
  m.def("mish_(Tensor(a!) self) -> Tensor(a!)");
  m.def("mish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("mish_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("sigmoid(Tensor self) -> Tensor");
  m.def("sigmoid_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("logit(Tensor self, float? eps=None) -> Tensor");
  m.def("logit_(Tensor(a!) self, float? eps=None) -> Tensor(a!)");
  m.def("logit.out(Tensor self, float? eps=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("sin(Tensor self) -> Tensor");
  m.def("sin_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("sinc(Tensor self) -> Tensor");
  m.def("sinc_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sinc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("sinh(Tensor self) -> Tensor");
  m.def("sinh_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("detach(Tensor(a) self) -> Tensor(a)");
  m.def("detach_(Tensor(a!) self) -> Tensor(a!)");
  m.def("size.int(Tensor self, int dim) -> int");
  m.def("size.Dimname(Tensor self, Dimname dim) -> int");
  m.def("slice.Tensor(Tensor(a) self, int dim=0, int? start=None, int? end=None, int step=1) -> Tensor(a)");
  m.def("slice_backward(Tensor grad_output, int[] input_sizes, int dim, int start, int end, int step) -> Tensor");
  m.def("slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)");
  m.def("smm(Tensor self, Tensor mat2) -> Tensor");
  m.def("softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor");
  m.def("softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.def("_softmax(Tensor self, int dim, bool half_to_float) -> Tensor");
  m.def("_softmax.out(Tensor self, int dim, bool half_to_float, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor");
  m.def("_softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("unsafe_split.Tensor(Tensor self, int split_size, int dim=0) -> Tensor[]");
  m.def("split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]");
  m.def("unsafe_split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]");
  m.def("split_with_sizes(Tensor(a) self, int[] split_sizes, int dim=0) -> Tensor(a)[]");
  m.def("hsplit.int(Tensor(a) self, int sections) -> Tensor(a)[]");
  m.def("hsplit.array(Tensor(a) self, int[] indices) -> Tensor(a)[]");
  m.def("vsplit.int(Tensor(a) self, int sections) -> Tensor(a)[]");
  m.def("vsplit.array(Tensor(a) self, int[] indices) -> Tensor(a)[]");
  m.def("dsplit.int(Tensor(a) self, int sections) -> Tensor(a)[]");
  m.def("dsplit.array(Tensor(a) self, int[] indices) -> Tensor(a)[]");
  m.def("squeeze(Tensor(a) self) -> Tensor(a)");
  m.def("squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)");
  m.def("squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)");
  m.def("squeeze_(Tensor(a!) self) -> Tensor(a!)");
  m.def("squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)");
  m.def("squeeze_.dimname(Tensor(a!) self, Dimname dim) -> Tensor(a!)");
  m.def("sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("stack(Tensor[] tensors, int dim=0) -> Tensor");
  m.def("stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_stack(Tensor[] tensors, int dim=0) -> Tensor");
  m.def("_stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("hstack(Tensor[] tensors) -> Tensor");
  m.def("hstack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("vstack(Tensor[] tensors) -> Tensor");
  m.def("vstack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("dstack(Tensor[] tensors) -> Tensor");
  m.def("dstack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool? onesided=None, bool? return_complex=None) -> Tensor");
  m.def("istft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool center=True, bool normalized=False, bool? onesided=None, int? length=None, bool return_complex=False) -> Tensor");
  m.def("stride.int(Tensor self, int dim) -> int");
  m.def("stride.Dimname(Tensor self, Dimname dim) -> int");
  m.def("sum(Tensor self, *, ScalarType? dtype=None) -> Tensor");
  m.def("sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("nansum(Tensor self, *, ScalarType? dtype=None) -> Tensor");
  m.def("nansum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("nansum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("sum_to_size(Tensor self, int[] size) -> Tensor");
  m.def("sqrt(Tensor self) -> Tensor");
  m.def("sqrt_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("square(Tensor self) -> Tensor");
  m.def("square_(Tensor(a!) self) -> Tensor(a!)");
  m.def("square.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("std(Tensor self, bool unbiased=True) -> Tensor");
  m.def("std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor");
  m.def("std.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> Tensor");
  m.def("std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)");
  m.def("std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("std_mean.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("std_mean.correction_names(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("std.correction_out(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor");
  m.def("std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("std.correction_names(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False) -> Tensor");
  m.def("std.correction_names_out(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("prod(Tensor self, *, ScalarType? dtype=None) -> Tensor");
  m.def("prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("t(Tensor(a) self) -> Tensor(a)");
  m.def("t_(Tensor(a!) self) -> Tensor(a!)");
  m.def("tan(Tensor self) -> Tensor");
  m.def("tan_(Tensor(a!) self) -> Tensor(a!)");
  m.def("tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("tanh(Tensor self) -> Tensor");
  m.def("tanh_(Tensor(a!) self) -> Tensor(a!)");
  m.def("tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor");
  m.def("tensordot.out(Tensor self, Tensor other, int[] dims_self, int[] dims_other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor");
  m.def("threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)");
  m.def("threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("threshold_backward.grad_input(Tensor grad_output, Tensor self, Scalar threshold, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor");
  m.def("tile(Tensor self, int[] dims) -> Tensor");
  m.def("transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)");
  m.def("transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)");
  m.def("_mkldnn_transpose(Tensor self, int dim0, int dim1) -> Tensor");
  m.def("transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)");
  m.def("_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)");
  m.def("one_hot(Tensor self, int num_classes=-1) -> Tensor");
  m.def("flip(Tensor self, int[] dims) -> Tensor");
  m.def("fliplr(Tensor self) -> Tensor");
  m.def("flipud(Tensor self) -> Tensor");
  m.def("roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor");
  m.def("rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor");
  m.def("trapezoid.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor");
  m.def("trapezoid.dx(Tensor y, *, Scalar dx=1, int dim=-1) -> Tensor");
  m.def("trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor");
  m.def("trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor");
  m.def("_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor");
  m.def("triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor");
  m.def("trunc(Tensor self) -> Tensor");
  m.def("trunc_(Tensor(a!) self) -> Tensor(a!)");
  m.def("trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fix(Tensor self) -> Tensor");
  m.def("fix_(Tensor(a!) self) -> Tensor(a!)");
  m.def("fix.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("type_as(Tensor self, Tensor other) -> Tensor");
  m.def("_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool");
  m.def("_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)");
  m.def("unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)");
  m.def("unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)");
  m.def("unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)");
  m.def("_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)");
  m.def("_unsafe_view(Tensor self, int[] size) -> Tensor");
  m.def("unsqueeze(Tensor(a) self, int dim) -> Tensor(a)");
  m.def("unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)");
  m.def("vander(Tensor x, int? N=None, bool increasing=False) -> Tensor");
  m.def("var(Tensor self, bool unbiased=True) -> Tensor");
  m.def("var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor");
  m.def("var.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> Tensor");
  m.def("var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("var.correction_out(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor");
  m.def("var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("var.correction_names(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False) -> Tensor");
  m.def("var.correction_names_out(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)");
  m.def("var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("var_mean.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("var_mean.correction_names(Tensor self, Dimname[1] dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)");
  m.def("view_as(Tensor(a) self, Tensor other) -> Tensor(a)");
  m.def("where.self(Tensor condition, Tensor self, Tensor other) -> Tensor");
  m.def("where.ScalarSelf(Tensor condition, Scalar self, Tensor other) -> Tensor");
  m.def("where.ScalarOther(Tensor condition, Tensor self, Scalar other) -> Tensor");
  m.def("where.Scalar(Tensor condition, Scalar self, Scalar other) -> Tensor");
  m.def("where(Tensor condition) -> Tensor[]");
  m.def("_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor");
  m.def("norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor");
  m.def("_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor");
  m.def("_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)");
  m.def("_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)");
  m.def("_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)");
  m.def("zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("zeros_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor");
  m.def("_standard_gamma_grad(Tensor self, Tensor output) -> Tensor");
  m.def("_standard_gamma(Tensor self, Generator? generator=None) -> Tensor");
  m.def("_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor");
  m.def("_sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor");
  m.def("poisson(Tensor self, Generator? generator=None) -> Tensor");
  m.def("binomial(Tensor count, Tensor prob, Generator? generator=None) -> Tensor");
  m.def("native_norm(Tensor self, Scalar p=2) -> Tensor");
  m.def("native_norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, ScalarType? dtype) -> Tensor");
  m.def("_sparse_sum(Tensor self) -> Tensor");
  m.def("_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor");
  m.def("_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor");
  m.def("_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor");
  m.def("_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor");
  m.def("_sparse_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor");
  m.def("_sparse_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.def("_sparse_softmax(Tensor self, int dim, bool half_to_float) -> Tensor");
  m.def("_sparse_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor");
  m.def("_sparse_log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor");
  m.def("_sparse_log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor");
  m.def("_sparse_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor");
  m.def("_sparse_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor");
  m.def("norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor");
  m.def("norm.Scalar(Tensor self, Scalar p=2) -> Tensor");
  m.def("norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor");
  m.def("norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor");
  m.def("norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)");
  m.def("norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor");
  m.def("norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor");
  m.def("norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)");
  m.def("norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("frexp.Tensor(Tensor self) -> (Tensor mantissa, Tensor exponent)");
  m.def("frexp.Tensor_out(Tensor self, *, Tensor(a!) mantissa, Tensor(b!) exponent) -> (Tensor(a!) mantissa, Tensor(b!) exponent)");
  m.def("frobenius_norm(Tensor self) -> Tensor");
  m.def("frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor");
  m.def("frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("nuclear_norm(Tensor self, bool keepdim=False) -> Tensor");
  m.def("nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor");
  m.def("nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("clone(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor");
  m.def("positive(Tensor(a) self) -> Tensor(a)");
  m.def("resize_as_(Tensor(a!) self, Tensor the_template, *, MemoryFormat? memory_format=None) -> Tensor(a!)");
  m.def("resize_as_sparse_(Tensor(a!) self, Tensor the_template) -> Tensor(a!)");
  m.def("zero_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor");
  m.def("sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)");
  m.def("sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor");
  m.def("sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)");
  m.def("subtract.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("subtract.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor");
  m.def("subtract_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)");
  m.def("subtract.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor");
  m.def("subtract_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)");
  m.def("rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor");
  m.def("heaviside.out(Tensor self, Tensor values, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("heaviside(Tensor self, Tensor values) -> Tensor");
  m.def("heaviside_(Tensor(a!) self, Tensor values) -> Tensor(a!)");
  m.def("rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor");
  m.def("_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("sparse_csr_tensor.crow_col_value_size(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor");
  m.def("sparse_csr_tensor.crow_col_value(Tensor crow_indices, Tensor col_indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor");
  m.def("_sparse_csr_tensor_unsafe(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("sparse_coo_tensor.size(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor");
  m.def("sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("_validate_sparse_coo_tensor_args(Tensor indices, Tensor values, int[] size) -> ()");
  m.def("_validate_sparse_csr_tensor_args(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size) -> ()");
  m.def("_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor");
  m.def("_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=False) -> Tensor");
  m.def("sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)");
  m.def("sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)");
  m.def("sparse_mask(Tensor self, Tensor mask) -> Tensor");
  m.def("_to_cpu(Tensor[] tensors) -> Tensor[]");
  m.def("to_dense(Tensor self, ScalarType? dtype=None) -> Tensor");
  m.def("to_dense_backward(Tensor grad, Tensor input) -> Tensor");
  m.def("sparse_dim(Tensor self) -> int");
  m.def("_dimI(Tensor self) -> int");
  m.def("dense_dim(Tensor self) -> int");
  m.def("_dimV(Tensor self) -> int");
  m.def("_nnz(Tensor self) -> int");
  m.def("coalesce(Tensor(a) self) -> Tensor(a)");
  m.def("_coalesce(Tensor self) -> Tensor");
  m.def("is_coalesced(Tensor self) -> bool");
  m.def("_indices(Tensor(a) self) -> Tensor(a)");
  m.def("_values(Tensor(a) self) -> Tensor(a)");
  m.def("_coalesced_(Tensor(a!) self, bool coalesced) -> Tensor(a!)");
  m.def("indices(Tensor(a) self) -> Tensor(a)");
  m.def("values(Tensor(a) self) -> Tensor(a)");
  m.def("crow_indices(Tensor(a) self) -> Tensor(a)");
  m.def("col_indices(Tensor(a) self) -> Tensor(a)");
  m.def("hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("hspmm(Tensor mat1, Tensor mat2) -> Tensor");
  m.def("copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)");
  m.def("unbind.int(Tensor(a) self, int dim=0) -> Tensor(a)[]");
  m.def("unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]");
  m.def("to_sparse.sparse_dim(Tensor self, int sparse_dim) -> Tensor");
  m.def("to_sparse(Tensor self) -> Tensor");
  m.def("to_mkldnn(Tensor self, ScalarType? dtype=None) -> Tensor");
  m.def("mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=0, int[2] stride=1, int[2] dilation=1, int groups=1) -> Tensor");
  m.def("mkldnn_reorder_conv3d_weight(Tensor self, int[3] padding=0, int[3] stride=1, int[3] dilation=1, int groups=1) -> Tensor");
  m.def("to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor");
  m.def("quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor");
  m.def("quantize_per_tensor.tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, ScalarType dtype) -> Tensor");
  m.def("quantize_per_tensor.tensors(Tensor[] tensors, Tensor scales, Tensor zero_points, ScalarType dtype) -> Tensor[]");
  m.def("quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor");
  m.def("dequantize.self(Tensor self) -> Tensor");
  m.def("dequantize.tensors(Tensor[] tensors) -> Tensor[]");
  m.def("q_scale(Tensor self) -> float");
  m.def("q_zero_point(Tensor self) -> int");
  m.def("q_per_channel_scales(Tensor self) -> Tensor");
  m.def("q_per_channel_zero_points(Tensor self) -> Tensor");
  m.def("q_per_channel_axis(Tensor self) -> int");
  m.def("int_repr(Tensor self) -> Tensor");
  m.def("_make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> Tensor");
  m.def("_make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> Tensor");
  m.def("qscheme(Tensor self) -> QScheme");
  m.def("fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor");
  m.def("fake_quantize_per_tensor_affine.tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max) -> Tensor");
  m.def("fake_quantize_per_tensor_affine_cachemask(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor output, Tensor mask)");
  m.def("_fake_quantize_per_tensor_affine_cachemask_tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, Tensor fake_quant_enabled, int quant_min, int quant_max) -> (Tensor output, Tensor mask)");
  m.def("fake_quantize_per_tensor_affine_cachemask_backward(Tensor grad, Tensor mask) -> Tensor");
  m.def("_fake_quantize_learnable_per_tensor_affine(Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max, float grad_factor=1.0) -> Tensor");
  m.def("_fake_quantize_learnable_per_tensor_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max, float grad_factor=1.0) -> (Tensor, Tensor, Tensor)");
  m.def("fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor");
  m.def("fake_quantize_per_channel_affine_cachemask(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor output, Tensor mask)");
  m.def("fake_quantize_per_channel_affine_cachemask_backward(Tensor grad, Tensor mask) -> Tensor");
  m.def("_fake_quantize_learnable_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max, float grad_factor=1.0) -> Tensor");
  m.def("_fake_quantize_learnable_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max, float grad_factor=1.0) -> (Tensor, Tensor, Tensor)");
  m.def("fused_moving_avg_obs_fake_quant(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> Tensor");
  m.def("_fused_moving_avg_obs_fq_helper(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor output, Tensor mask)");
  m.def("_choose_qparams_per_tensor(Tensor self, bool reduce_range=False) -> (float, int)");
  m.def("_saturate_weight_to_fp16(Tensor weight) -> Tensor");
  m.def("choose_qparams_optimized(Tensor input, int numel, int n_bins, float ratio, int bit_width) -> (Tensor, Tensor)");
  m.def("_to_copy(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, bool non_blocking=False, MemoryFormat? memory_format=None) -> Tensor");
  m.def("to.dtype_layout(Tensor(a) self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor(a)");
  m.def("to.device(Tensor(a) self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor(a)");
  m.def("to.dtype(Tensor(a) self, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor(a)");
  m.def("to.other(Tensor(a) self, Tensor other, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor(a)");
  m.def("meshgrid(Tensor[] tensors) -> Tensor[]");
  m.def("meshgrid.indexing(Tensor[] tensors, *, str indexing) -> Tensor[]");
  m.def("cartesian_prod(Tensor[] tensors) -> Tensor");
  m.def("combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor");
  m.def("item(Tensor self) -> Scalar");
  m.def("result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType");
  m.def("result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType");
  m.def("result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType");
  m.def("result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType");
  m.def("can_cast(ScalarType from, ScalarType to) -> bool");
  m.def("promote_types(ScalarType type1, ScalarType type2) -> ScalarType");
  m.def("_local_scalar_dense(Tensor self) -> Scalar");
  m.def("_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)");
  m.def("_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)");
  m.def("_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)");
  m.def("lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)");
  m.def("lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)");
  m.def("gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)");
  m.def("gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)");
  m.def("rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)");
  m.def("rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)");
  m.def("rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)");
  m.def("rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)");
  m.def("lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)");
  m.def("gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor");
  m.def("rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor");
  m.def("rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor");
  m.def("quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)");
  m.def("quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor");
  m.def("quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor");
  m.def("quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor");
  m.def("_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)");
  m.def("_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor");
  m.def("_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)");
  m.def("set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)");
  m.def("set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)");
  m.def("set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)");
  m.def("set_(Tensor(a!) self) -> Tensor(a!)");
  m.def("is_set_to(Tensor self, Tensor tensor) -> bool");
  m.def("masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)");
  m.def("masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor");
  m.def("masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)");
  m.def("masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor");
  m.def("masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)");
  m.def("masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor");
  m.def("view(Tensor(a) self, int[] size) -> Tensor(a)");
  m.def("view.dtype(Tensor(a) self, ScalarType dtype) -> Tensor(a)");
  m.def("put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)");
  m.def("put(Tensor self, Tensor index, Tensor source, bool accumulate=False) -> Tensor");
  m.def("index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)");
  m.def("index_add_.alpha(Tensor(a!) self, int dim, Tensor index, Tensor source, *, Scalar alpha) -> Tensor(a!)");
  m.def("index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor");
  m.def("index_add.alpha(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha) -> Tensor");
  m.def("index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source, *, Scalar alpha=1) -> Tensor");
  m.def("index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)");
  m.def("index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor");
  m.def("index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)");
  m.def("index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor");
  m.def("index_fill_.Dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Scalar value) -> Tensor(a!)");
  m.def("index_fill_.Dimname_Tensor(Tensor(a!) self, Dimname dim, Tensor index, Tensor value) -> Tensor(a!)");
  m.def("index_fill.Dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor");
  m.def("index_fill.Dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor");
  m.def("scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor");
  m.def("scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)");
  m.def("scatter.src_out(Tensor self, int dim, Tensor index, Tensor src, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor");
  m.def("scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)");
  m.def("scatter.value_out(Tensor self, int dim, Tensor index, Scalar value, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("scatter.reduce(Tensor self, int dim, Tensor index, Tensor src, *, str reduce) -> Tensor");
  m.def("scatter_.reduce(Tensor(a!) self, int dim, Tensor index, Tensor src, *, str reduce) -> Tensor(a!)");
  m.def("scatter.reduce_out(Tensor self, int dim, Tensor index, Tensor src, *, str reduce, Tensor(a!) out) -> Tensor(a!)");
  m.def("scatter.value_reduce(Tensor self, int dim, Tensor index, Scalar value, *, str reduce) -> Tensor");
  m.def("scatter_.value_reduce(Tensor(a!) self, int dim, Tensor index, Scalar value, *, str reduce) -> Tensor(a!)");
  m.def("scatter.value_reduce_out(Tensor self, int dim, Tensor index, Scalar value, *, str reduce, Tensor(a!) out) -> Tensor(a!)");
  m.def("scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor");
  m.def("scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor");
  m.def("scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor");
  m.def("scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)");
  m.def("scatter_add.out(Tensor self, int dim, Tensor index, Tensor src, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor");
  m.def("eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("__and__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("__and__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("__iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("__iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("bitwise_or_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("bitwise_or_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("__or__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("__or__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("__ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("__ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("__xor__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("__xor__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("__ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("__ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("__lshift__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("__lshift__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("bitwise_left_shift.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("bitwise_left_shift_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("bitwise_left_shift.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_left_shift.Tensor_Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("bitwise_left_shift_.Tensor_Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("bitwise_left_shift.Tensor_Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_left_shift.Scalar_Tensor(Scalar self, Tensor other) -> Tensor");
  m.def("__rshift__.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("__rshift__.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("__irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("__irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("bitwise_right_shift.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("bitwise_right_shift_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("bitwise_right_shift.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_right_shift.Tensor_Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("bitwise_right_shift_.Tensor_Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("bitwise_right_shift.Tensor_Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("bitwise_right_shift.Scalar_Tensor(Scalar self, Tensor other) -> Tensor");
  m.def("tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)");
  m.def("triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)");
  m.def("digamma_(Tensor(a!) self) -> Tensor(a!)");
  m.def("lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)");
  m.def("lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)");
  m.def("addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)");
  m.def("addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor");
  m.def("random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> Tensor(a!)");
  m.def("random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)");
  m.def("random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)");
  m.def("uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)");
  m.def("cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)");
  m.def("log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)");
  m.def("exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)");
  m.def("geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)");
  m.def("diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("diag(Tensor self, int diagonal=0) -> Tensor");
  m.def("diag_backward(Tensor grad, int[] input_sizes, int diagonal) -> Tensor");
  m.def("cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("cross(Tensor self, Tensor other, int? dim=None) -> Tensor");
  m.def("triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("triu(Tensor self, int diagonal=0) -> Tensor");
  m.def("tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("tril(Tensor self, int diagonal=0) -> Tensor");
  m.def("tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("trace(Tensor self) -> Tensor");
  m.def("trace_backward(Tensor grad, int[] sizes) -> Tensor");
  m.def("ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ne.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ne.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("not_equal.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("not_equal.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("not_equal.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("not_equal.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("not_equal_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("not_equal_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("eq.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("eq.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ge.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ge.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("greater_equal.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("greater_equal.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("greater_equal.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("greater_equal.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("greater_equal_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("greater_equal_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("le.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("le.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("less_equal.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("less_equal.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("less_equal.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("less_equal.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("less_equal_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("less_equal_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("gt.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("gt.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("greater.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("greater.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("greater.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("greater.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("greater_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("greater_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lt.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lt.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("less.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("less.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("less.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("less.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("less_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("less_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("take(Tensor self, Tensor index) -> Tensor");
  m.def("take_along_dim.out(Tensor self, Tensor indices, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("take_along_dim(Tensor self, Tensor indices, int? dim=None) -> Tensor");
  m.def("index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("index_select(Tensor self, int dim, Tensor index) -> Tensor");
  m.def("index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor");
  m.def("index_select_backward(Tensor grad, int[] self_sizes, int dim, Tensor index) -> Tensor");
  m.def("masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("masked_select(Tensor self, Tensor mask) -> Tensor");
  m.def("masked_select_backward(Tensor grad, Tensor input, Tensor mask) -> Tensor");
  m.def("nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("nonzero(Tensor self) -> Tensor");
  m.def("nonzero_numpy(Tensor self) -> Tensor[]");
  m.def("gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor");
  m.def("gather_backward(Tensor grad, Tensor self, int dim, Tensor index, bool sparse_grad) -> Tensor");
  m.def("gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor");
  m.def("_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor");
  m.def("addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor");
  m.def("addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)");
  m.def("addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)");
  m.def("addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor");
  m.def("addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)");
  m.def("cross_entropy_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, float label_smoothing=0.0) -> Tensor");
  m.def("lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)");
  m.def("lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)");
  m.def("triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)");
  m.def("triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)");
  m.def("symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)");
  m.def("symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)");
  m.def("_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)");
  m.def("eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)");
  m.def("eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)");
  m.def("svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)");
  m.def("svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)");
  m.def("_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor U, Tensor S, Tensor V)");
  m.def("swapaxes(Tensor(a) self, int axis0, int axis1) -> Tensor(a)");
  m.def("swapaxes_(Tensor(a!) self, int axis0, int axis1) -> Tensor(a!)");
  m.def("swapdims(Tensor(a) self, int dim0, int dim1) -> Tensor(a)");
  m.def("swapdims_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)");
  m.def("cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("cholesky(Tensor self, bool upper=False) -> Tensor");
  m.def("cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor");
  m.def("_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> Tensor");
  m.def("solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)");
  m.def("solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)");
  m.def("_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)");
  m.def("cholesky_inverse(Tensor self, bool upper=False) -> Tensor");
  m.def("cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)");
  m.def("qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)");
  m.def("geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)");
  m.def("geqrf(Tensor self) -> (Tensor a, Tensor tau)");
  m.def("orgqr(Tensor self, Tensor input2) -> Tensor");
  m.def("orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> Tensor");
  m.def("_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor LU, Tensor pivots, Tensor info)");
  m.def("lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor");
  m.def("lu_unpack(Tensor LU_data, Tensor LU_pivots, bool unpack_data=True, bool unpack_pivots=True) -> (Tensor P, Tensor L, Tensor U)");
  m.def("lu_unpack.out(Tensor LU_data, Tensor LU_pivots, bool unpack_data=True, bool unpack_pivots=True, *, Tensor(a!) P, Tensor(b!) L, Tensor(c!) U) -> (Tensor(a!) P, Tensor(b!) L, Tensor(c!) U)");
  m.def("multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor");
  m.def("lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lgamma_(Tensor(a!) self) -> Tensor(a!)");
  m.def("lgamma(Tensor self) -> Tensor");
  m.def("digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("digamma(Tensor self) -> Tensor");
  m.def("polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("polygamma(int n, Tensor self) -> Tensor");
  m.def("polygamma_(Tensor(a!) self, int n) -> Tensor(a!)");
  m.def("erfinv(Tensor self) -> Tensor");
  m.def("erfinv_(Tensor(a!) self) -> Tensor(a!)");
  m.def("erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("i0(Tensor self) -> Tensor");
  m.def("i0_(Tensor(a!) self) -> Tensor(a!)");
  m.def("i0.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("sign(Tensor self) -> Tensor");
  m.def("sign_(Tensor(a!) self) -> Tensor(a!)");
  m.def("sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("signbit(Tensor self) -> Tensor");
  m.def("signbit.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("dist(Tensor self, Tensor other, Scalar p=2) -> Tensor");
  m.def("atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("atan2(Tensor self, Tensor other) -> Tensor");
  m.def("lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor");
  m.def("lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor");
  m.def("histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor");
  m.def("histogram.bins_tensor_out(Tensor self, Tensor bins, *, Tensor? weight=None, bool density=False, Tensor(a!) hist, Tensor(b!) bin_edges) -> (Tensor(a!) hist, Tensor(b!) bin_edges)");
  m.def("histogram.bins_tensor(Tensor self, Tensor bins, *, Tensor? weight=None, bool density=False) -> (Tensor hist, Tensor bin_edges)");
  m.def("histogram.bin_ct_out(Tensor self, int bins=100, *, float[]? range=None, Tensor? weight=None, bool density=False, Tensor(a!) hist, Tensor(b!) bin_edges) -> (Tensor(a!) hist, Tensor(b!) bin_edges)");
  m.def("histogram.bin_ct(Tensor self, int bins=100, *, float[]? range=None, Tensor? weight=None, bool density=False) -> (Tensor hist, Tensor bin_edges)");
  m.def("fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fmod.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fmod.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("hypot.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("hypot(Tensor self, Tensor other) -> Tensor");
  m.def("hypot_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("igamma.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("igamma(Tensor self, Tensor other) -> Tensor");
  m.def("igamma_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("igammac.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("igammac(Tensor self, Tensor other) -> Tensor");
  m.def("igammac_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("nextafter.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("nextafter(Tensor self, Tensor other) -> Tensor");
  m.def("nextafter_(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("remainder.Scalar(Tensor self, Scalar other) -> Tensor");
  m.def("remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)");
  m.def("remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("remainder.Tensor(Tensor self, Tensor other) -> Tensor");
  m.def("remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)");
  m.def("remainder.Scalar_Tensor(Scalar self, Tensor other) -> Tensor");
  m.def("min(Tensor self) -> Tensor");
  m.def("fmin(Tensor self, Tensor other) -> Tensor");
  m.def("fmin.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("max(Tensor self) -> Tensor");
  m.def("fmax(Tensor self, Tensor other) -> Tensor");
  m.def("fmax.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("maximum(Tensor self, Tensor other) -> Tensor");
  m.def("maximum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("max.other(Tensor self, Tensor other) -> Tensor");
  m.def("max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("minimum(Tensor self, Tensor other) -> Tensor");
  m.def("minimum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("min.other(Tensor self, Tensor other) -> Tensor");
  m.def("quantile.scalar_out(Tensor self, float q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("quantile.scalar(Tensor self, float q, int? dim=None, bool keepdim=False) -> Tensor");
  m.def("quantile.out(Tensor self, Tensor q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("quantile(Tensor self, Tensor q, int? dim=None, bool keepdim=False) -> Tensor");
  m.def("nanquantile.scalar_out(Tensor self, float q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("nanquantile.scalar(Tensor self, float q, int? dim=None, bool keepdim=False) -> Tensor");
  m.def("nanquantile.out(Tensor self, Tensor q, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("nanquantile(Tensor self, Tensor q, int? dim=None, bool keepdim=False) -> Tensor");
  m.def("quantile.new_scalar_out(Tensor self, float q, int? dim, bool keepdim, *, str interpolation, Tensor(a!) out) -> Tensor(a!)");
  m.def("quantile.new_scalar(Tensor self, float q, int? dim, bool keepdim, *, str interpolation) -> Tensor");
  m.def("quantile.new_out(Tensor self, Tensor q, int? dim, bool keepdim, *, str interpolation, Tensor(a!) out) -> Tensor(a!)");
  m.def("quantile.new(Tensor self, Tensor q, int? dim, bool keepdim, *, str interpolation) -> Tensor");
  m.def("nanquantile.new_scalar_out(Tensor self, float q, int? dim, bool keepdim, *, str interpolation, Tensor(a!) out) -> Tensor(a!)");
  m.def("nanquantile.new_scalar(Tensor self, float q, int? dim, bool keepdim, *, str interpolation) -> Tensor");
  m.def("nanquantile.new_out(Tensor self, Tensor q, int? dim, bool keepdim, *, str interpolation, Tensor(a!) out) -> Tensor(a!)");
  m.def("nanquantile.new(Tensor self, Tensor q, int? dim, bool keepdim, *, str interpolation) -> Tensor");
  m.def("sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("sort.values_stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)");
  m.def("sort.stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)");
  m.def("sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("sort.dimname_values_stable(Tensor self, *, bool? stable, Dimname dim, bool descending=False, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)");
  m.def("sort.dimname_stable(Tensor self, *, bool? stable, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)");
  m.def("msort.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("msort(Tensor self) -> Tensor");
  m.def("argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor");
  m.def("argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor");
  m.def("topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)");
  m.def("topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)");
  m.def("all(Tensor self) -> Tensor");
  m.def("all.all_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("any(Tensor self) -> Tensor");
  m.def("any.all_out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor");
  m.def("renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)");
  m.def("unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)");
  m.def("unfold_backward(Tensor grad_in, int[] input_sizes, int dim, int size, int step) -> Tensor");
  m.def("equal(Tensor self, Tensor other) -> bool");
  m.def("pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor");
  m.def("pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("pow.Scalar(Scalar self, Tensor exponent) -> Tensor");
  m.def("pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor");
  m.def("pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)");
  m.def("pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)");
  m.def("float_power.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("float_power.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor");
  m.def("float_power.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("float_power.Scalar(Scalar self, Tensor exponent) -> Tensor");
  m.def("float_power.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("float_power.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor");
  m.def("float_power_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)");
  m.def("float_power_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)");
  m.def("normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)");
  m.def("normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor");
  m.def("normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor");
  m.def("normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor");
  m.def("normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("alias(Tensor(a) self) -> Tensor(a)");
  m.def("_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)");
  m.def("_amp_foreach_non_finite_check_and_unscale_(Tensor(a!)[] self, Tensor(b!) found_inf, Tensor inv_scale) -> ()");
  m.def("_amp_update_scale_(Tensor(a!) self, Tensor(b!) growth_tracker, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> Tensor(a!)");
  m.def("_cat(Tensor[] tensors, int dim=0) -> Tensor");
  m.def("_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_foreach_add.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]");
  m.def("_foreach_add_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()");
  m.def("_foreach_sub.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]");
  m.def("_foreach_sub_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()");
  m.def("_foreach_mul.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]");
  m.def("_foreach_mul_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()");
  m.def("_foreach_div.Scalar(Tensor[] tensors, Scalar scalar) -> Tensor[]");
  m.def("_foreach_div_.Scalar(Tensor(a!)[] self, Scalar scalar) -> ()");
  m.def("_foreach_add.List(Tensor[] tensors1, Tensor[] tensors2, *, Scalar alpha=1) -> Tensor[]");
  m.def("_foreach_add_.List(Tensor(a!)[] self, Tensor[] other, *, Scalar alpha=1) -> ()");
  m.def("_foreach_sub.List(Tensor[] tensors1, Tensor[] tensors2, *, Scalar alpha=1) -> Tensor[]");
  m.def("_foreach_sub_.List(Tensor(a!)[] self, Tensor[] other, *, Scalar alpha=1) -> ()");
  m.def("_foreach_mul.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]");
  m.def("_foreach_mul_.List(Tensor(a!)[] self, Tensor[] other) -> ()");
  m.def("_foreach_div.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]");
  m.def("_foreach_div_.List(Tensor(a!)[] self, Tensor[] other) -> ()");
  m.def("_foreach_add.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]");
  m.def("_foreach_add_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()");
  m.def("_foreach_sub.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]");
  m.def("_foreach_sub_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()");
  m.def("_foreach_div.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]");
  m.def("_foreach_div_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()");
  m.def("_foreach_mul.ScalarList(Tensor[] tensors, Scalar[] scalars) -> Tensor[]");
  m.def("_foreach_mul_.ScalarList(Tensor(a!)[] self, Scalar[] scalars) -> ()");
  m.def("_foreach_exp(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_zero_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_exp_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_sqrt(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_sqrt_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_abs(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_abs_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_acos(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_acos_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_asin(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_asin_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_atan(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_atan_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_ceil(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_ceil_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_cos(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_cos_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_cosh(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_cosh_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_erf(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_erf_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_erfc(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_erfc_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_expm1(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_expm1_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_floor(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_floor_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_log(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_log_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_log10(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_log10_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_log1p(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_log1p_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_log2(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_log2_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_neg(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_neg_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_tan(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_tan_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_tanh(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_tanh_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_sin(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_sin_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_sinh(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_sinh_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_round(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_round_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_lgamma(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_lgamma_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_frac(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_frac_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_reciprocal(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_reciprocal_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_sigmoid(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_sigmoid_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_trunc(Tensor[] tensors) -> Tensor[]");
  m.def("_foreach_trunc_(Tensor(a!)[] self) -> ()");
  m.def("_foreach_addcdiv_.Scalar(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()");
  m.def("_foreach_addcmul_.Scalar(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()");
  m.def("_foreach_addcdiv_.ScalarList(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()");
  m.def("_foreach_addcmul_.ScalarList(Tensor(a!)[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()");
  m.def("_foreach_addcdiv.Scalar(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> Tensor[]");
  m.def("_foreach_addcmul.Scalar(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> Tensor[]");
  m.def("_foreach_addcdiv.ScalarList(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> Tensor[]");
  m.def("_foreach_addcmul.ScalarList(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> Tensor[]");
  m.def("_foreach_maximum.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]");
  m.def("_foreach_minimum.List(Tensor[] tensors1, Tensor[] tensors2) -> Tensor[]");
  m.def("bucketize.Tensor(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor");
  m.def("bucketize.Tensor_out(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("bucketize.Scalar(Scalar self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> Tensor");
  m.def("searchsorted.Tensor(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False) -> Tensor");
  m.def("searchsorted.Tensor_out(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("searchsorted.Scalar(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False) -> Tensor");
  m.def("_convert_indices_from_coo_to_csr(Tensor self, int size, *, bool out_int32=False) -> Tensor");
  m.def("_convert_indices_from_coo_to_csr.out(Tensor self, int size, *, bool out_int32=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor");
  m.def("mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor");
  m.def("l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor");
  m.def("l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor");
  m.def("multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor");
  m.def("multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor");
  m.def("multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor");
  m.def("multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))");
  m.def("multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)");
  m.def("multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor");
  m.def("nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("nll_loss_nd(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor");
  m.def("nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor");
  m.def("nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))");
  m.def("nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)");
  m.def("nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor");
  m.def("nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor");
  m.def("nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))");
  m.def("nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)");
  m.def("nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor");
  m.def("smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, float beta=1.0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean, float beta=1.0) -> Tensor");
  m.def("smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta) -> Tensor");
  m.def("huber_loss.out(Tensor self, Tensor target, int reduction=Mean, float delta=1.0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("huber_loss(Tensor self, Tensor target, int reduction=Mean, float delta=1.0) -> Tensor");
  m.def("huber_loss_backward.out(Tensor grad_output, Tensor self, Tensor target, int reduction, float delta, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("huber_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float delta) -> Tensor");
  m.def("soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor");
  m.def("soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor");
  m.def("elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor");
  m.def("elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, Tensor self_or_result, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, Tensor self_or_result) -> Tensor");
  m.def("elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)");
  m.def("glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("glu(Tensor self, int dim=-1) -> Tensor");
  m.def("glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor");
  m.def("hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("hardsigmoid(Tensor self) -> Tensor");
  m.def("hardsigmoid_(Tensor(a!) self) -> Tensor(a!)");
  m.def("hardsigmoid_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("hardsigmoid_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor");
  m.def("hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor");
  m.def("hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)");
  m.def("hardswish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("hardswish(Tensor self) -> Tensor");
  m.def("hardswish_(Tensor(a!) self) -> Tensor(a!)");
  m.def("hardswish_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor");
  m.def("leaky_relu_backward.grad_input(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> Tensor");
  m.def("leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)");
  m.def("log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("log_sigmoid(Tensor self) -> Tensor");
  m.def("log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))");
  m.def("log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)");
  m.def("log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor");
  m.def("rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor");
  m.def("rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> Tensor");
  m.def("rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)");
  m.def("softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor");
  m.def("softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor");
  m.def("softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("softshrink(Tensor self, Scalar lambd=0.5) -> Tensor");
  m.def("softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor");
  m.def("adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor");
  m.def("mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor");
  m.def("mkldnn_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor");
  m.def("_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor");
  m.def("_adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor");
  m.def("adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("_adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor");
  m.def("adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)");
  m.def("adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor");
  m.def("adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)");
  m.def("adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor");
  m.def("avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor");
  m.def("avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor");
  m.def("avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor");
  m.def("avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor");
  m.def("fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)");
  m.def("fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor");
  m.def("fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)");
  m.def("fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor");
  m.def("max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)");
  m.def("max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor");
  m.def("max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))");
  m.def("max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)");
  m.def("max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor");
  m.def("max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor");
  m.def("max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor");
  m.def("max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor");
  m.def("max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor");
  m.def("reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("reflection_pad1d(Tensor self, int[2] padding) -> Tensor");
  m.def("reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor");
  m.def("reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("reflection_pad2d(Tensor self, int[4] padding) -> Tensor");
  m.def("reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor");
  m.def("reflection_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("reflection_pad3d(Tensor self, int[6] padding) -> Tensor");
  m.def("reflection_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("reflection_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor");
  m.def("replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("replication_pad1d(Tensor self, int[2] padding) -> Tensor");
  m.def("replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor");
  m.def("replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("replication_pad2d(Tensor self, int[4] padding) -> Tensor");
  m.def("replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor");
  m.def("replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("replication_pad3d(Tensor self, int[6] padding) -> Tensor");
  m.def("replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor");
  m.def("upsample_linear1d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor");
  m.def("upsample_linear1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor");
  m.def("upsample_bilinear2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor");
  m.def("upsample_bilinear2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor");
  m.def("upsample_trilinear3d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor");
  m.def("upsample_trilinear3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor");
  m.def("upsample_bicubic2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> Tensor");
  m.def("upsample_bicubic2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> Tensor");
  m.def("upsample_nearest1d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> Tensor");
  m.def("upsample_nearest1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> Tensor");
  m.def("upsample_nearest2d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> Tensor");
  m.def("upsample_nearest2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> Tensor");
  m.def("upsample_nearest3d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> Tensor");
  m.def("upsample_nearest3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> Tensor");
  m.def("upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_linear1d(Tensor self, int[1] output_size, bool align_corners, float? scales=None) -> Tensor");
  m.def("upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None) -> Tensor");
  m.def("upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_nearest1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_nearest1d(Tensor self, int[1] output_size, float? scales=None) -> Tensor");
  m.def("upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> Tensor");
  m.def("upsample_nearest2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_nearest2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_nearest3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("upsample_nearest3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor");
  m.def("sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor");
  m.def("logit_backward.grad_input(Tensor grad_output, Tensor self, float? eps=None, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("logit_backward(Tensor grad_output, Tensor self, float? eps=None) -> Tensor");
  m.def("tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("tanh_backward(Tensor grad_output, Tensor output) -> Tensor");
  m.def("slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor");
  m.def("slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor");
  m.def("slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor");
  m.def("thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)");
  m.def("thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor");
  m.def("_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) grad_input, Tensor(b!) grad_weight) -> (Tensor(a!), Tensor(b!))");
  m.def("_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)");
  m.def("conv_depthwise3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, int[3] dilation) -> Tensor");
  m.def("conv_depthwise3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("conv_depthwise3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor");
  m.def("slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)");
  m.def("slow_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))");
  m.def("slow_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor");
  m.def("slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor");
  m.def("slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)");
  m.def("col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor");
  m.def("col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor");
  m.def("column_stack(Tensor[] tensors) -> Tensor");
  m.def("column_stack.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor");
  m.def("im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)");
  m.def("im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor");
  m.def("isfinite(Tensor self) -> Tensor");
  m.def("isinf(Tensor self) -> Tensor");
  m.def("record_stream(Tensor(a!) self, Stream s) -> ()");
  m.def("isposinf(Tensor self) -> Tensor");
  m.def("isposinf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("isneginf(Tensor self) -> Tensor");
  m.def("isneginf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_add_batch_dim(Tensor self, int batch_dim, int level) -> Tensor");
  m.def("_remove_batch_dim(Tensor self, int level, int batch_size, int out_dim) -> Tensor");
  m.def("special_entr(Tensor self) -> Tensor");
  m.def("special_entr.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_ndtri(Tensor self) -> Tensor");
  m.def("special_ndtri.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_expm1(Tensor self) -> Tensor");
  m.def("special_expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_exp2(Tensor self) -> Tensor");
  m.def("special_exp2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_psi(Tensor self) -> Tensor");
  m.def("special_psi.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_digamma(Tensor self) -> Tensor");
  m.def("special_digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_gammaln(Tensor self) -> Tensor");
  m.def("special_gammaln.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_erf(Tensor self) -> Tensor");
  m.def("special_erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_erfc(Tensor self) -> Tensor");
  m.def("special_erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_erfcx(Tensor self) -> Tensor");
  m.def("special_erfcx.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_erfinv(Tensor self) -> Tensor");
  m.def("special_erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_ndtr(Tensor self) -> Tensor");
  m.def("special_ndtr.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_xlog1py(Tensor self, Tensor other) -> Tensor");
  m.def("special_xlog1py.self_scalar(Scalar self, Tensor other) -> Tensor");
  m.def("special_xlog1py.other_scalar(Tensor self, Scalar other) -> Tensor");
  m.def("special_xlog1py.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_xlog1py.self_scalar_out(Scalar self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_xlog1py.other_scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_xlogy(Tensor self, Tensor other) -> Tensor");
  m.def("special_xlogy.self_scalar(Scalar self, Tensor other) -> Tensor");
  m.def("special_xlogy.other_scalar(Tensor self, Scalar other) -> Tensor");
  m.def("special_xlogy.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_xlogy.self_scalar_out(Scalar self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_xlogy.other_scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_zeta(Tensor self, Tensor other) -> Tensor");
  m.def("special_zeta.self_scalar(Scalar self, Tensor other) -> Tensor");
  m.def("special_zeta.other_scalar(Tensor self, Scalar other) -> Tensor");
  m.def("special_zeta.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_zeta.self_scalar_out(Scalar self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_zeta.other_scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_i0(Tensor self) -> Tensor");
  m.def("special_i0.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_i0e(Tensor self) -> Tensor");
  m.def("special_i0e.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_i1(Tensor self) -> Tensor");
  m.def("special_i1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_i1e(Tensor self) -> Tensor");
  m.def("special_i1e.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_logit(Tensor self, float? eps=None) -> Tensor");
  m.def("special_logit.out(Tensor self, float? eps=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_polygamma(int n, Tensor self) -> Tensor");
  m.def("special_polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor");
  m.def("special_logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_expit(Tensor self) -> Tensor");
  m.def("special_expit.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_sinc(Tensor self) -> Tensor");
  m.def("special_sinc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_round(Tensor self) -> Tensor");
  m.def("special_round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_log1p(Tensor self) -> Tensor");
  m.def("special_log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_log_softmax(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor");
  m.def("special_gammainc.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_gammainc(Tensor self, Tensor other) -> Tensor");
  m.def("special_gammaincc.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("special_gammaincc(Tensor self, Tensor other) -> Tensor");
  m.def("special_multigammaln(Tensor self, int p) -> Tensor");
  m.def("special_multigammaln.out(Tensor self, int p, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_fft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor");
  m.def("fft_fft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_ifft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor");
  m.def("fft_ifft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_rfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor");
  m.def("fft_rfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_irfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor");
  m.def("fft_irfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_hfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor");
  m.def("fft_hfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_ihfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> Tensor");
  m.def("fft_ihfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_fft2(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None) -> Tensor");
  m.def("fft_fft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_ifft2(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None) -> Tensor");
  m.def("fft_ifft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_rfft2(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None) -> Tensor");
  m.def("fft_rfft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_irfft2(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None) -> Tensor");
  m.def("fft_irfft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2,-1], str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_fftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> Tensor");
  m.def("fft_fftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_ifftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> Tensor");
  m.def("fft_ifftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_rfftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> Tensor");
  m.def("fft_rfftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_irfftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> Tensor");
  m.def("fft_irfftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_fftfreq(int n, float d=1.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("fft_fftfreq.out(int n, float d=1.0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_rfftfreq(int n, float d=1.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor");
  m.def("fft_rfftfreq.out(int n, float d=1.0, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("fft_fftshift(Tensor self, int[1]? dim=None) -> Tensor");
  m.def("fft_ifftshift(Tensor self, int[1]? dim=None) -> Tensor");
  m.def("linalg_cholesky_ex(Tensor self, *, bool upper=False, bool check_errors=False) -> (Tensor L, Tensor info)");
  m.def("linalg_cholesky_ex.L(Tensor self, *, bool upper=False, bool check_errors=False, Tensor(a!) L, Tensor(b!) info) -> (Tensor(a!) L, Tensor(b!) info)");
  m.def("linalg_cholesky(Tensor self, *, bool upper=False) -> Tensor");
  m.def("linalg_cholesky.out(Tensor self, *, bool upper=False, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_det(Tensor self) -> Tensor");
  m.def("linalg_det.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("det(Tensor self) -> Tensor");
  m.def("_det_lu_based_helper(Tensor self) -> (Tensor det, Tensor lu, Tensor pivs)");
  m.def("_det_lu_based_helper_backward_helper(Tensor det_grad, Tensor det, Tensor self, Tensor lu, Tensor pivs) -> Tensor");
  m.def("linalg_lstsq(Tensor self, Tensor b, float? rcond=None, *, str? driver=None) -> (Tensor solution, Tensor residuals, Tensor rank, Tensor singular_values)");
  m.def("linalg_lstsq.out(Tensor self, Tensor b, float? rcond=None, *, str? driver=None, Tensor(a!) solution, Tensor(b!) residuals, Tensor(c!) rank, Tensor(d!) singular_values) -> (Tensor(a!) solution, Tensor(b!) residuals, Tensor(c!) rank, Tensor(d!) singular_values)");
  m.def("linalg_matmul(Tensor self, Tensor other) -> Tensor");
  m.def("linalg_matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)");
  m.def("linalg_slogdet.out(Tensor self, *, Tensor(a!) sign, Tensor(b!) logabsdet) -> (Tensor(a!) sign, Tensor(b!) logabsdet)");
  m.def("linalg_eig(Tensor self) -> (Tensor eigenvalues, Tensor eigenvectors)");
  m.def("linalg_eig.out(Tensor self, *, Tensor(a!) eigenvalues, Tensor(b!) eigenvectors) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)");
  m.def("linalg_eigvals(Tensor self) -> Tensor");
  m.def("linalg_eigvals.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_eigh(Tensor self, str UPLO=\"L\") -> (Tensor eigenvalues, Tensor eigenvectors)");
  m.def("linalg_eigh.eigvals(Tensor self, str UPLO=\"L\", *, Tensor(a!) eigvals, Tensor(b!) eigvecs) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)");
  m.def("linalg_eigvalsh(Tensor self, str UPLO=\"L\") -> Tensor");
  m.def("linalg_eigvalsh.out(Tensor self, str UPLO='L', *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_householder_product(Tensor input, Tensor tau) -> Tensor");
  m.def("linalg_householder_product.out(Tensor input, Tensor tau, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_linalg_inv_out_helper_(Tensor(a!) self, Tensor(b!) infos_lu, Tensor(c!) infos_getri) -> Tensor(a!)");
  m.def("linalg_inv_ex(Tensor self, *, bool check_errors=False) -> (Tensor inverse, Tensor info)");
  m.def("linalg_inv_ex.inverse(Tensor self, *, bool check_errors=False, Tensor(a!) inverse, Tensor(b!) info) -> (Tensor(a!) inverse, Tensor(b!) info)");
  m.def("linalg_inv(Tensor self) -> Tensor");
  m.def("linalg_inv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("inner(Tensor self, Tensor other) -> Tensor");
  m.def("inner.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("outer(Tensor self, Tensor vec2) -> Tensor");
  m.def("outer.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("ger(Tensor self, Tensor vec2) -> Tensor");
  m.def("ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_norm(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("linalg_norm.ord_str(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("linalg_norm.out(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_norm.ord_str_out(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_vector_norm(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("linalg_vector_norm.out(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_matrix_norm(Tensor self, Scalar ord, int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("linalg_matrix_norm.out(Tensor self, Scalar ord, int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_matrix_norm.str_ord(Tensor self, str ord='fro', int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None) -> Tensor");
  m.def("linalg_matrix_norm.str_ord_out(Tensor self, str ord='fro', int[] dim=[-2,-1], bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_svd.U(Tensor self, bool full_matrices=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh)");
  m.def("linalg_svd(Tensor self, bool full_matrices=True) -> (Tensor U, Tensor S, Tensor Vh)");
  m.def("linalg_svdvals(Tensor input) -> Tensor");
  m.def("linalg_svdvals.out(Tensor input, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_cond(Tensor self, Scalar? p=None) -> Tensor");
  m.def("linalg_cond.out(Tensor self, Scalar? p=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_cond.p_str(Tensor self, str p) -> Tensor");
  m.def("linalg_cond.p_str_out(Tensor self, str p, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_pinv(Tensor self, float rcond=1e-15, bool hermitian=False) -> Tensor");
  m.def("linalg_pinv.rcond_tensor(Tensor self, Tensor rcond, bool hermitian=False) -> Tensor");
  m.def("linalg_pinv.out(Tensor self, float rcond=1e-15, bool hermitian=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_pinv.out_rcond_tensor(Tensor self, Tensor rcond, bool hermitian=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_solve(Tensor input, Tensor other) -> Tensor");
  m.def("linalg_solve.out(Tensor input, Tensor other, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_tensorinv(Tensor self, int ind=2) -> Tensor");
  m.def("linalg_tensorinv.out(Tensor self, int ind=2, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_tensorsolve(Tensor self, Tensor other, int[]? dims=None) -> Tensor");
  m.def("linalg_tensorsolve.out(Tensor self, Tensor other, int[]? dims=None, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_qr(Tensor self, str mode='reduced') -> (Tensor Q, Tensor R)");
  m.def("linalg_qr.out(Tensor self, str mode='reduced', *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)");
  m.def("_linalg_qr_helper(Tensor self, str mode) -> (Tensor, Tensor)");
  m.def("linalg_matrix_power(Tensor self, int n) -> Tensor");
  m.def("linalg_matrix_power.out(Tensor self, int n, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_matrix_rank(Tensor self, float? tol=None, bool hermitian=False) -> Tensor");
  m.def("linalg_matrix_rank.out(Tensor self, float? tol=None, bool hermitian=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_matrix_rank.tol_tensor(Tensor input, Tensor tol, bool hermitian=False) -> Tensor");
  m.def("linalg_matrix_rank.out_tol_tensor(Tensor input, Tensor tol, bool hermitian=False, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("linalg_multi_dot(Tensor[] tensors) -> Tensor");
  m.def("linalg_multi_dot.out(Tensor[] tensors, *, Tensor(a!) out) -> Tensor(a!)");
  m.def("_test_serialization_subcmul(Tensor self, Tensor other, Scalar alpha=1) -> Tensor");
  m.def("_test_optional_intlist(Tensor values, int[]? addends) -> Tensor");
  m.def("_test_optional_filled_intlist(Tensor values, int[2]? addends) -> Tensor");
  m.def("_test_optional_floatlist(Tensor values, float[]? addends) -> Tensor");
  m.def("_test_string_default(Tensor dummy, str a=\"\\\"'\\\\\", str b='\"\\'\\\\') -> Tensor");
  m.def("_test_ambiguous_defaults.a(Tensor dummy, int a=1, int b=1) -> Tensor");
  m.def("_test_ambiguous_defaults.b(Tensor dummy, int a=2, str b=\"2\") -> Tensor");
  m.def("segment_reduce(Tensor data, str reduce, *, Tensor? lengths=None, Tensor? indices=None, int axis=0, bool unsafe=False, Scalar? initial=None) -> Tensor");
  m.def("_segment_reduce_backward(Tensor grad, Tensor output, Tensor data, str reduce, *, Tensor? lengths=None, int axis=0) -> Tensor");
  m.def("pad_sequence(Tensor[] sequences, bool batch_first=False, float padding_value=0.0) -> Tensor");
  m.def("flatten_dense_tensors(Tensor[] tensors) -> Tensor");
  m.def("unflatten_dense_tensors(Tensor flat, Tensor[] tensors) -> Tensor[]");;

  // String Ops
  // Implementations located in torch/csrc/jit/runtime/register_prim_ops.cpp
  m.def(TORCH_SELECTIVE_SCHEMA("aten::splitlines(str self, bool keepends=False) -> str[]"));
  m.def(TORCH_SELECTIVE_SCHEMA(
      "aten::slice.str(str string, int? start=None, int? end=None, int step=1) -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::isupper(str self) -> bool"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::islower(str self) -> bool"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::capitalize(str self) -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::title(str self) -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::center(str self, int width, str fillchar=' ') -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::count(str self, str substr, int start=0, int end=-1) -> int"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::endswith(str self, str substr, int start=0, int end=-1) -> bool"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::startswith(str self, str substr, int start=0, int end=-1) -> bool"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::expandtabs(str self, int tabsize=8) -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::find(str self, str substr, int start=0, int end=-1) -> int"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::rfind(str self, str substr, int start=0, int end=-1) -> int"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::index.str(str self, str substr, int start=0, int end=-1) -> int"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::rindex(str self, str substr, int start=0, int end=-1) -> int"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::isidentifier(str self) -> bool"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::istitle(str self) -> bool"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::isprintable(str self) -> bool"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::ljust(str self, int width, str fillchar=' ') -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::rjust(str self, int width, str fillchar=' ') -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::zfill(str self, int width) -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::lstrip(str self, str chars=' \\n\\t\\f\\v') -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::rstrip(str self, str chars=' \\n\\t\\f\\v') -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::strip(str self, str chars=' \\n\\t\\f\\v') -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::replace(str self, str old, str new, int max=-1) -> str"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::partition(str self, str separator) -> (str, str, str)"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::rpartition(str self, str separator) -> (str, str, str)"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::split.str(str self, str? separator=None, int max=-1) -> str[]"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::rsplit(str self, str separator=' ', int max=-1) -> str[]"));
  m.def(TORCH_SELECTIVE_SCHEMA("aten::join(str self, str[] values) -> str"));

  // Distributed Ops
  // Implementations located in torch/csrc/jit/runtime/register_distributed_ops.cpp
  m.def("get_gradients(int context_id) -> Dict(Tensor, Tensor)");
}
}  // namespace at
