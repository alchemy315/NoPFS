// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif

// @generated by tools/codegen/gen.py from RegisterDispatchKey.cpp

#include <c10/core/TensorImpl.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/ExclusivelyOwned.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>
#include <ATen/Tensor.h>
#include <ATen/Functions.h>
#include <ATen/native/Resize.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/core/op_registration/adaption.h>
#include <torch/library.h>


#include <ATen/CPUFunctions.h>

namespace at {

// NB: TORCH_LIBRARY_IMPL must be in an anonymous namespace to avoid
// ambiguity with conflicting identifiers that may have been defined in
// at namespace already.
namespace {


Tensor create_out(IntArrayRef sizes, IntArrayRef strides, const TensorOptions &options) {

  
  if (strides.empty()) {
      return at::native::empty_cpu(sizes, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), options.memory_format_opt());
  } else {
      // TODO: assert options.memory_format_opt() is nullopt (debug only?)
      return at::native::empty_strided_cpu(sizes, strides, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
  }

}

void resize_out(const Tensor &out, IntArrayRef sizes, IntArrayRef strides, const TensorOptions &options) {
  TORCH_CHECK(options.dtype() == out.dtype(),
      "Expected out tensor to have dtype ", options.dtype(), ", but got ", out.dtype(), " instead");
  TORCH_CHECK(options.device() == out.device(),
      "Expected out tensor to have device ", options.device(), ", but got ", out.device(), " instead");
  const bool resized = at::native::resize_output(out, sizes);
  // Only restride if a resize occurred; otherwise we ignore the (advisory)
  // strides from the meta function and directly use the output tensor's
  // preexisting strides
  if (resized) {
    if (!strides.empty()) {
      TORCH_INTERNAL_ASSERT(!options.memory_format_opt().has_value());
      at::native::as_strided_(out, sizes, strides);
    } else if (options.memory_format_opt().has_value()) {
      out.unsafeGetTensorImpl()->empty_tensor_restride(*options.memory_format_opt());
    }
  }
}

namespace {

void wrapper___assert_async(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::_assert_async_cpu(self);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_abs_out_out(const at::Tensor & self, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::abs_out(self, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__angle(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::angle(self);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_angle_out_out(const at::Tensor & self, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::angle_out(self, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__view_as_real(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::view_as_real(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__view_as_complex(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::view_as_complex(self);
}

} // anonymous namespace
struct structured_sgn_out_functional final : public at::native::structured_sgn_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sgn_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sgn(const at::Tensor & self) {
structured_sgn_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sgn_out_out final : public at::native::structured_sgn_out {
    structured_sgn_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sgn_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sgn_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sgn_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_sgn_out_inplace final : public at::native::structured_sgn_out {
    structured_sgn_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sgn_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sgn_(at::Tensor & self) {
structured_sgn_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor & wrapper_out_conj_physical_out_out(const at::Tensor & self, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::conj_physical_out(self, out);
}

} // anonymous namespace
struct structured_acos_out_functional final : public at::native::structured_acos_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_acos_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_acos(const at::Tensor & self) {
structured_acos_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_acos_out_out final : public at::native::structured_acos_out {
    structured_acos_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_acos_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_acos_out_out(const at::Tensor & self, at::Tensor & out) {
structured_acos_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_acos_out_inplace final : public at::native::structured_acos_out {
    structured_acos_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_acos_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_acos_(at::Tensor & self) {
structured_acos_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_add_out_functional final : public at::native::structured_add_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_add_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_add_Tensor(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
structured_add_out_functional op;
op.meta(self, other, alpha);
op.impl(self, other, alpha, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_add_out_out final : public at::native::structured_add_out {
    structured_add_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_add_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_add_out_out(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
structured_add_out_out op(out);
op.meta(self, other, alpha);
op.impl(self, other, alpha, op.outputs_[0]);
return out;
}
struct structured_add_out_inplace final : public at::native::structured_add_out {
    structured_add_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_add_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_add__Tensor(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
structured_add_out_inplace op(self);
op.meta(self, other, alpha);
op.impl(self, other, alpha, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_Tensor__add_relu_Tensor(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::add_relu(self, other, alpha);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out__add_relu_out_out(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::add_relu_out(self, other, alpha, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor__add_relu__Tensor(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::add_relu_(self, other, alpha);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar__add_relu_Scalar(const at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::add_relu(self, other, alpha);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar__add_relu__Scalar(at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::add_relu_(self, other, alpha);
}

} // anonymous namespace
struct structured_addmv_out_cpu_functional final : public at::native::structured_addmv_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
structured_addmv_out_cpu_functional op;
op.meta(self, mat, vec, beta, alpha);
op.impl(self, mat, vec, beta, alpha, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_addmv_out_cpu_out final : public at::native::structured_addmv_out_cpu {
    structured_addmv_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addmv_out_out(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
structured_addmv_out_cpu_out op(out);
op.meta(self, mat, vec, beta, alpha);
op.impl(self, mat, vec, beta, alpha, op.outputs_[0]);
return out;
}
struct structured_addmv_out_cpu_inplace final : public at::native::structured_addmv_out_cpu {
    structured_addmv_out_cpu_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addmv_(at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
structured_addmv_out_cpu_inplace op(self);
op.meta(self, mat, vec, beta, alpha);
op.impl(self, mat, vec, beta, alpha, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, const at::Scalar & beta, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::addr(self, vec1, vec2, beta, alpha);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_addr_out_out(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::addr_out(self, vec1, vec2, beta, alpha, out);
}

} // anonymous namespace
struct structured_all_out_functional final : public at::native::structured_all_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_all_dim(const at::Tensor & self, int64_t dim, bool keepdim) {
structured_all_out_functional op;
auto precompute = op.meta(self, dim, keepdim);
(void)precompute;
op.impl(self, precompute.dim, keepdim, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_all_out_out final : public at::native::structured_all_out {
    structured_all_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_all_out_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out) {
structured_all_out_out op(out);
auto precompute = op.meta(self, dim, keepdim);
(void)precompute;
op.impl(self, precompute.dim, keepdim, op.outputs_[0]);
return out;
}
struct structured_any_out_functional final : public at::native::structured_any_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_any_dim(const at::Tensor & self, int64_t dim, bool keepdim) {
structured_any_out_functional op;
auto precompute = op.meta(self, dim, keepdim);
(void)precompute;
op.impl(self, precompute.dim, keepdim, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_any_out_out final : public at::native::structured_any_out {
    structured_any_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_any_out_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out) {
structured_any_out_out op(out);
auto precompute = op.meta(self, dim, keepdim);
(void)precompute;
op.impl(self, precompute.dim, keepdim, op.outputs_[0]);
return out;
}
namespace {

at::Tensor & wrapper_start_out_arange_out_start_out(const at::Scalar & start, const at::Scalar & end, const at::Scalar & step, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::arange_cpu_out(start, end, step, out);
}

} // anonymous namespace
struct structured_argmax_out_functional final : public at::native::structured_argmax_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_argmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
structured_argmax_out_functional op;
op.meta(self, dim, keepdim);
op.impl(self, dim, keepdim, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_argmax_out_out final : public at::native::structured_argmax_out {
    structured_argmax_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_argmax_out_out(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & out) {
structured_argmax_out_out op(out);
op.meta(self, dim, keepdim);
op.impl(self, dim, keepdim, op.outputs_[0]);
return out;
}
struct structured_argmin_out_functional final : public at::native::structured_argmin_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_argmin(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
structured_argmin_out_functional op;
op.meta(self, dim, keepdim);
op.impl(self, dim, keepdim, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_argmin_out_out final : public at::native::structured_argmin_out {
    structured_argmin_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_argmin_out_out(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & out) {
structured_argmin_out_out op(out);
op.meta(self, dim, keepdim);
op.impl(self, dim, keepdim, op.outputs_[0]);
return out;
}
struct structured_acosh_out_functional final : public at::native::structured_acosh_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_acosh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_acosh(const at::Tensor & self) {
structured_acosh_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_acosh_out_out final : public at::native::structured_acosh_out {
    structured_acosh_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_acosh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_acosh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_acosh_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_acosh_out_inplace final : public at::native::structured_acosh_out {
    structured_acosh_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_acosh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_acosh_(at::Tensor & self) {
structured_acosh_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_asinh_out_functional final : public at::native::structured_asinh_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_asinh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_asinh(const at::Tensor & self) {
structured_asinh_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_asinh_out_out final : public at::native::structured_asinh_out {
    structured_asinh_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_asinh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_asinh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_asinh_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_asinh_out_inplace final : public at::native::structured_asinh_out {
    structured_asinh_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_asinh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_asinh_(at::Tensor & self) {
structured_asinh_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_atanh_out_functional final : public at::native::structured_atanh_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_atanh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_atanh(const at::Tensor & self) {
structured_atanh_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_atanh_out_out final : public at::native::structured_atanh_out {
    structured_atanh_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_atanh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atanh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_atanh_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_atanh_out_inplace final : public at::native::structured_atanh_out {
    structured_atanh_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_atanh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atanh_(at::Tensor & self) {
structured_atanh_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
    // No device check


  // DeviceGuard omitted
  return at::native::as_strided_tensorimpl(self, size, stride, storage_offset);
}

} // anonymous namespace
struct structured_asin_out_functional final : public at::native::structured_asin_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_asin_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_asin(const at::Tensor & self) {
structured_asin_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_asin_out_out final : public at::native::structured_asin_out {
    structured_asin_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_asin_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_asin_out_out(const at::Tensor & self, at::Tensor & out) {
structured_asin_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_asin_out_inplace final : public at::native::structured_asin_out {
    structured_asin_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_asin_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_asin_(at::Tensor & self) {
structured_asin_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_atan_out_functional final : public at::native::structured_atan_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_atan_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_atan(const at::Tensor & self) {
structured_atan_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_atan_out_out final : public at::native::structured_atan_out {
    structured_atan_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_atan_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atan_out_out(const at::Tensor & self, at::Tensor & out) {
structured_atan_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_atan_out_inplace final : public at::native::structured_atan_out {
    structured_atan_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_atan_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atan_(at::Tensor & self) {
structured_atan_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::baddbmm_cpu(self, batch1, batch2, beta, alpha);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_baddbmm_out_out(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::baddbmm_out_cpu(self, batch1, batch2, beta, alpha, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__baddbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::baddbmm__cpu(self, batch1, batch2, beta, alpha);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_bernoulli_out_out(const at::Tensor & self, c10::optional<at::Generator> generator, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::bernoulli_out(self, generator, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_bernoulli__Tensor(at::Tensor & self, const at::Tensor & p, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::bernoulli_(self, p, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_float_bernoulli__float(at::Tensor & self, double p, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::bernoulli_(self, p, generator);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__binary_cross_entropy(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction) {
    // No device check


  // DeviceGuard omitted
  return at::native::binary_cross_entropy_cpu(self, target, weight, reduction);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_binary_cross_entropy_out_out(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::binary_cross_entropy_out_cpu(self, target, weight, reduction, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__binary_cross_entropy_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction) {
    // No device check


  // DeviceGuard omitted
  return at::native::binary_cross_entropy_backward_cpu(grad_output, self, target, weight, reduction);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_binary_cross_entropy_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::binary_cross_entropy_backward_out_cpu(grad_output, self, target, weight, reduction, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__bincount(const at::Tensor & self, const c10::optional<at::Tensor> & weights, int64_t minlength) {
    // No device check


  // DeviceGuard omitted
  return at::native::_bincount_cpu(self, weights, minlength);
}

} // anonymous namespace
struct structured_bitwise_not_out_functional final : public at::native::structured_bitwise_not_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_not_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_not(const at::Tensor & self) {
structured_bitwise_not_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_not_out_out final : public at::native::structured_bitwise_not_out {
    structured_bitwise_not_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_not_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_not_out_out(const at::Tensor & self, at::Tensor & out) {
structured_bitwise_not_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_bitwise_not_out_inplace final : public at::native::structured_bitwise_not_out {
    structured_bitwise_not_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_not_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_not_(at::Tensor & self) {
structured_bitwise_not_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_copysign_out_functional final : public at::native::structured_copysign_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_copysign_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_copysign_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_copysign_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_copysign_out_out final : public at::native::structured_copysign_out {
    structured_copysign_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_copysign_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_copysign_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_copysign_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_copysign_out_inplace final : public at::native::structured_copysign_out {
    structured_copysign_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_copysign_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_copysign__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_copysign_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor & wrapper_out_logical_not_out_out(const at::Tensor & self, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::logical_not_out(self, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_logical_xor_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::logical_xor_out(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_logical_and_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::logical_and_out(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_logical_or_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::logical_or_out(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__bmm(const at::Tensor & self, const at::Tensor & mat2) {
    // No device check


  // DeviceGuard omitted
  return at::native::bmm_cpu(self, mat2);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_bmm_out_out(const at::Tensor & self, const at::Tensor & mat2, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::bmm_out_cpu(self, mat2, out);
}

} // anonymous namespace
struct structured_ceil_out_functional final : public at::native::structured_ceil_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ceil_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ceil(const at::Tensor & self) {
structured_ceil_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_ceil_out_out final : public at::native::structured_ceil_out {
    structured_ceil_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ceil_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ceil_out_out(const at::Tensor & self, at::Tensor & out) {
structured_ceil_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_ceil_out_inplace final : public at::native::structured_ceil_out {
    structured_ceil_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ceil_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ceil_(at::Tensor & self) {
structured_ceil_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_clamp_out_functional final : public at::native::structured_clamp_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_clamp_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_clamp(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
structured_clamp_out_functional op;
op.meta(self, (min.has_value() ? at::OptionalScalarRef(&(min.value())) : at::OptionalScalarRef()), (max.has_value() ? at::OptionalScalarRef(&(max.value())) : at::OptionalScalarRef()));
op.impl(self, (min.has_value() ? at::OptionalScalarRef(&(min.value())) : at::OptionalScalarRef()), (max.has_value() ? at::OptionalScalarRef(&(max.value())) : at::OptionalScalarRef()), *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_clamp_out_out final : public at::native::structured_clamp_out {
    structured_clamp_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_clamp_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_clamp_out_out(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max, at::Tensor & out) {
structured_clamp_out_out op(out);
op.meta(self, (min.has_value() ? at::OptionalScalarRef(&(min.value())) : at::OptionalScalarRef()), (max.has_value() ? at::OptionalScalarRef(&(max.value())) : at::OptionalScalarRef()));
op.impl(self, (min.has_value() ? at::OptionalScalarRef(&(min.value())) : at::OptionalScalarRef()), (max.has_value() ? at::OptionalScalarRef(&(max.value())) : at::OptionalScalarRef()), op.outputs_[0]);
return out;
}
struct structured_clamp_out_inplace final : public at::native::structured_clamp_out {
    structured_clamp_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_clamp_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_clamp_(at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
structured_clamp_out_inplace op(self);
op.meta(self, (min.has_value() ? at::OptionalScalarRef(&(min.value())) : at::OptionalScalarRef()), (max.has_value() ? at::OptionalScalarRef(&(max.value())) : at::OptionalScalarRef()));
op.impl(self, (min.has_value() ? at::OptionalScalarRef(&(min.value())) : at::OptionalScalarRef()), (max.has_value() ? at::OptionalScalarRef(&(max.value())) : at::OptionalScalarRef()), op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_Tensor_clamp_Tensor(const at::Tensor & self, const c10::optional<at::Tensor> & min, const c10::optional<at::Tensor> & max) {
    // No device check


  // DeviceGuard omitted
  return at::native::clamp(self, min, max);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_clamp_out_Tensor_out(const at::Tensor & self, const c10::optional<at::Tensor> & min, const c10::optional<at::Tensor> & max, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::clamp_out(self, min, max, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_clamp_max_out_out(const at::Tensor & self, const at::Scalar & max, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::clamp_max_out(self, max, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_clamp_max_out_Tensor_out(const at::Tensor & self, const at::Tensor & max, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::clamp_max_out(self, max, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_clamp_min_out_out(const at::Tensor & self, const at::Scalar & min, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::clamp_min_out(self, min, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_clamp_min_out_Tensor_out(const at::Tensor & self, const at::Tensor & min, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::clamp_min_out(self, min, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_complex_out_out(const at::Tensor & real, const at::Tensor & imag, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::complex_out(real, imag, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_polar_out_out(const at::Tensor & abs, const at::Tensor & angle, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::polar_out(abs, angle, out);
}

} // anonymous namespace
struct structured_cos_out_functional final : public at::native::structured_cos_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_cos_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_cos(const at::Tensor & self) {
structured_cos_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_cos_out_out final : public at::native::structured_cos_out {
    structured_cos_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_cos_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cos_out_out(const at::Tensor & self, at::Tensor & out) {
structured_cos_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_cos_out_inplace final : public at::native::structured_cos_out {
    structured_cos_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_cos_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cos_(at::Tensor & self) {
structured_cos_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_cosh_out_functional final : public at::native::structured_cosh_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_cosh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_cosh(const at::Tensor & self) {
structured_cosh_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_cosh_out_out final : public at::native::structured_cosh_out {
    structured_cosh_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_cosh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cosh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_cosh_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_cosh_out_inplace final : public at::native::structured_cosh_out {
    structured_cosh_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_cosh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cosh_(at::Tensor & self) {
structured_cosh_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_dim_IntList_count_nonzero_dim_IntList(const at::Tensor & self, at::IntArrayRef dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::count_nonzero_cpu(self, dim);
}

} // anonymous namespace
namespace {

void wrapper___cummax_helper(const at::Tensor & self, at::Tensor & values, at::Tensor & indices, int64_t dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::cummax_helper_cpu(self, values, indices, dim);
}

} // anonymous namespace
namespace {

void wrapper___cummin_helper(const at::Tensor & self, at::Tensor & values, at::Tensor & indices, int64_t dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::cummin_helper_cpu(self, values, indices, dim);
}

} // anonymous namespace
struct structured_cumprod_out_functional final : public at::native::structured_cumprod_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_cumprod(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
structured_cumprod_out_functional op;
op.meta(self, dim, dtype);
op.impl(self, dim, dtype, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_cumprod_out_out final : public at::native::structured_cumprod_out {
    structured_cumprod_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cumprod_out_out(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_cumprod_out_out op(out);
op.meta(self, dim, dtype);
op.impl(self, dim, dtype, op.outputs_[0]);
return out;
}
struct structured_cumprod_out_inplace final : public at::native::structured_cumprod_out {
    structured_cumprod_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cumprod_(at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
structured_cumprod_out_inplace op(self);
op.meta(self, dim, dtype);
op.impl(self, dim, dtype, op.outputs_[0]);
return self;
}
struct structured_cumsum_out_functional final : public at::native::structured_cumsum_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_cumsum(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
structured_cumsum_out_functional op;
op.meta(self, dim, dtype);
op.impl(self, dim, dtype, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_cumsum_out_out final : public at::native::structured_cumsum_out {
    structured_cumsum_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cumsum_out_out(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_cumsum_out_out op(out);
op.meta(self, dim, dtype);
op.impl(self, dim, dtype, op.outputs_[0]);
return out;
}
struct structured_cumsum_out_inplace final : public at::native::structured_cumsum_out {
    structured_cumsum_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cumsum_(at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
structured_cumsum_out_inplace op(self);
op.meta(self, dim, dtype);
op.impl(self, dim, dtype, op.outputs_[0]);
return self;
}
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper___ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {
    // No device check


  // DeviceGuard omitted
  return at::native::ctc_loss_cpu(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___ctc_loss_backward(const at::Tensor & grad, const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, const at::Tensor & neg_log_likelihood, const at::Tensor & log_alpha, int64_t blank, bool zero_infinity) {
    // No device check


  // DeviceGuard omitted
  return at::native::ctc_loss_backward_cpu(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
}

} // anonymous namespace
struct structured_div_out_functional final : public at::native::structured_div_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_div_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_div_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_div_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_div_out_out final : public at::native::structured_div_out {
    structured_div_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_div_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_div_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_div_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_div_out_inplace final : public at::native::structured_div_out {
    structured_div_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_div_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_div__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_div_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_div_out_mode_functional final : public at::native::structured_div_out_mode {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_div_out_mode::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_div_Tensor_mode(const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
structured_div_out_mode_functional op;
op.meta(self, other, rounding_mode);
op.impl(self, other, rounding_mode, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_div_out_mode_out final : public at::native::structured_div_out_mode {
    structured_div_out_mode_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_div_out_mode::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_div_out_out_mode(const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode, at::Tensor & out) {
structured_div_out_mode_out op(out);
op.meta(self, other, rounding_mode);
op.impl(self, other, rounding_mode, op.outputs_[0]);
return out;
}
struct structured_div_out_mode_inplace final : public at::native::structured_div_out_mode {
    structured_div_out_mode_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_div_out_mode::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_div__Tensor_mode(at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
structured_div_out_mode_inplace op(self);
op.meta(self, other, rounding_mode);
op.impl(self, other, rounding_mode, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__dot(const at::Tensor & self, const at::Tensor & tensor) {
    // No device check


  // DeviceGuard omitted
  return at::native::dot(self, tensor);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__vdot(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::vdot(self, other);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__embedding_dense_backward(const at::Tensor & grad_output, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
    // No device check


  // DeviceGuard omitted
  return at::native::embedding_dense_backward_cpu(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__embedding_renorm_(at::Tensor & self, const at::Tensor & indices, double max_norm, double norm_type) {
    // No device check


  // DeviceGuard omitted
  return at::native::embedding_renorm_cpu_(self, indices, max_norm, norm_type);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> wrapper___embedding_bag_forward_only(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<at::Tensor> & per_sample_weights, bool include_last_offset, int64_t padding_idx) {
    // No device check


  // DeviceGuard omitted
  return at::native::_embedding_bag_forward_only_cpu(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> wrapper___embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<at::Tensor> & per_sample_weights, bool include_last_offset, int64_t padding_idx) {
    // No device check


  // DeviceGuard omitted
  return at::native::_embedding_bag_cpu(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___embedding_bag_dense_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<at::Tensor> & per_sample_weights, int64_t padding_idx) {
    // No device check


  // DeviceGuard omitted
  return at::native::_embedding_bag_dense_backward_cpu(grad, indices, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights, padding_idx);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___embedding_bag_per_sample_weights_backward(const at::Tensor & grad, const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, int64_t mode, int64_t padding_idx) {
    // No device check


  // DeviceGuard omitted
  return at::native::_embedding_bag_per_sample_weights_backward_cpu(grad, weight, indices, offsets, offset2bag, mode, padding_idx);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_memory_format_empty_memory_format(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::empty_cpu(size, dtype, layout, device, pin_memory, memory_format);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___empty_affine_quantized(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, double scale, int64_t zero_point, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::empty_affine_quantized_other_backends_stub(size, dtype, layout, device, pin_memory, scale, zero_point, memory_format);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___empty_per_channel_affine_quantized(at::IntArrayRef size, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::empty_per_channel_affine_quantized_other_backends_stub(size, scales, zero_points, axis, dtype, layout, device, pin_memory, memory_format);
}

} // anonymous namespace
namespace {

const at::Tensor & wrapper__resize_(const at::Tensor & self, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::resize_(self, size, memory_format);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__empty_strided(at::IntArrayRef size, at::IntArrayRef stride, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
    // No device check


  // DeviceGuard omitted
  return at::native::empty_strided_cpu(size, stride, dtype, layout, device, pin_memory);
}

} // anonymous namespace
struct structured_erf_out_functional final : public at::native::structured_erf_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_erf_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_erf(const at::Tensor & self) {
structured_erf_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_erf_out_out final : public at::native::structured_erf_out {
    structured_erf_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_erf_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erf_out_out(const at::Tensor & self, at::Tensor & out) {
structured_erf_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_erf_out_inplace final : public at::native::structured_erf_out {
    structured_erf_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_erf_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erf_(at::Tensor & self) {
structured_erf_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_erfc_out_functional final : public at::native::structured_erfc_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_erfc_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_erfc(const at::Tensor & self) {
structured_erfc_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_erfc_out_out final : public at::native::structured_erfc_out {
    structured_erfc_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_erfc_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erfc_out_out(const at::Tensor & self, at::Tensor & out) {
structured_erfc_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_erfc_out_inplace final : public at::native::structured_erfc_out {
    structured_erfc_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_erfc_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erfc_(at::Tensor & self) {
structured_erfc_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_exp_out_functional final : public at::native::structured_exp_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_exp_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_exp(const at::Tensor & self) {
structured_exp_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_exp_out_out final : public at::native::structured_exp_out {
    structured_exp_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_exp_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_exp_out_out(const at::Tensor & self, at::Tensor & out) {
structured_exp_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_exp_out_inplace final : public at::native::structured_exp_out {
    structured_exp_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_exp_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_exp_(at::Tensor & self) {
structured_exp_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_exp2_out_functional final : public at::native::structured_exp2_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_exp2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_exp2(const at::Tensor & self) {
structured_exp2_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_exp2_out_out final : public at::native::structured_exp2_out {
    structured_exp2_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_exp2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_exp2_out_out(const at::Tensor & self, at::Tensor & out) {
structured_exp2_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_exp2_out_inplace final : public at::native::structured_exp2_out {
    structured_exp2_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_exp2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_exp2_(at::Tensor & self) {
structured_exp2_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_expm1_out_functional final : public at::native::structured_expm1_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_expm1_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_expm1(const at::Tensor & self) {
structured_expm1_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_expm1_out_out final : public at::native::structured_expm1_out {
    structured_expm1_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_expm1_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_expm1_out_out(const at::Tensor & self, at::Tensor & out) {
structured_expm1_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_expm1_out_inplace final : public at::native::structured_expm1_out {
    structured_expm1_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_expm1_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_expm1_(at::Tensor & self) {
structured_expm1_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor & wrapper_out_eye_out_out(int64_t n, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::eye_out_cpu(n, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_m_out_eye_out_m_out(int64_t n, int64_t m, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::eye_out_cpu(n, m, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_fill__Scalar(at::Tensor & self, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::fill_(self, value);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_fill__Tensor(at::Tensor & self, const at::Tensor & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::fill_(self, value);
}

} // anonymous namespace
struct structured_floor_out_functional final : public at::native::structured_floor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_floor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_floor(const at::Tensor & self) {
structured_floor_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_floor_out_out final : public at::native::structured_floor_out {
    structured_floor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_floor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_floor_out_out(const at::Tensor & self, at::Tensor & out) {
structured_floor_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_floor_out_inplace final : public at::native::structured_floor_out {
    structured_floor_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_floor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_floor_(at::Tensor & self) {
structured_floor_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__floor_divide(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::floor_divide(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_floor_divide_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::floor_divide_out(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_floor_divide__Tensor(at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::floor_divide_(self, other);
}

} // anonymous namespace
struct structured_frac_out_functional final : public at::native::structured_frac_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_frac_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_frac(const at::Tensor & self) {
structured_frac_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_frac_out_out final : public at::native::structured_frac_out {
    structured_frac_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_frac_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_frac_out_out(const at::Tensor & self, at::Tensor & out) {
structured_frac_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_frac_out_inplace final : public at::native::structured_frac_out {
    structured_frac_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_frac_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_frac_(at::Tensor & self) {
structured_frac_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__from_file(c10::string_view filename, c10::optional<bool> shared, c10::optional<int64_t> size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
    // No device check


  // DeviceGuard omitted
  return at::native::from_file(filename, shared, size, dtype, layout, device, pin_memory);
}

} // anonymous namespace
struct structured_gcd_out_functional final : public at::native::structured_gcd_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gcd_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gcd(const at::Tensor & self, const at::Tensor & other) {
structured_gcd_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_gcd_out_out final : public at::native::structured_gcd_out {
    structured_gcd_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gcd_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gcd_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_gcd_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_gcd_out_inplace final : public at::native::structured_gcd_out {
    structured_gcd_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gcd_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gcd_(at::Tensor & self, const at::Tensor & other) {
structured_gcd_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_lcm_out_functional final : public at::native::structured_lcm_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lcm_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_lcm(const at::Tensor & self, const at::Tensor & other) {
structured_lcm_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_lcm_out_out final : public at::native::structured_lcm_out {
    structured_lcm_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lcm_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lcm_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_lcm_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_lcm_out_inplace final : public at::native::structured_lcm_out {
    structured_lcm_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lcm_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lcm_(at::Tensor & self, const at::Tensor & other) {
structured_lcm_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__grid_sampler_2d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    // No device check


  // DeviceGuard omitted
  return at::native::grid_sampler_2d_cpu(input, grid, interpolation_mode, padding_mode, align_corners);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__grid_sampler_2d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    // No device check


  // DeviceGuard omitted
  return at::native::grid_sampler_2d_backward_cpu(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__grid_sampler_3d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    // No device check


  // DeviceGuard omitted
  return at::native::grid_sampler_3d_cpu(input, grid, interpolation_mode, padding_mode, align_corners);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__grid_sampler_3d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    // No device check


  // DeviceGuard omitted
  return at::native::grid_sampler_3d_backward_cpu(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__native_group_norm(const at::Tensor & input, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps) {
    // No device check


  // DeviceGuard omitted
  return at::native::native_group_norm(input, weight, bias, N, C, HxW, group, eps);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__native_group_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & rstd, const c10::optional<at::Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, ::std::array<bool,3> output_mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::native_group_norm_backward(grad_out, input, mean, rstd, weight, N, C, HxW, group, output_mask);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___fft_r2c(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool onesided) {
    // No device check


  // DeviceGuard omitted
  return at::native::_fft_r2c_mkl(self, dim, normalization, onesided);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out__fft_r2c_out_out(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool onesided, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::_fft_r2c_mkl_out(self, dim, normalization, onesided, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___fft_c2r(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, int64_t last_dim_size) {
    // No device check


  // DeviceGuard omitted
  return at::native::_fft_c2r_mkl(self, dim, normalization, last_dim_size);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out__fft_c2r_out_out(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, int64_t last_dim_size, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::_fft_c2r_mkl_out(self, dim, normalization, last_dim_size, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___fft_c2c(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool forward) {
    // No device check


  // DeviceGuard omitted
  return at::native::_fft_c2c_mkl(self, dim, normalization, forward);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out__fft_c2c_out_out(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool forward, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::_fft_c2c_mkl_out(self, dim, normalization, forward, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_index_Tensor(const at::Tensor & self, const c10::List<c10::optional<at::Tensor>> & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::index(self, indices);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper___index_put_impl_(at::Tensor & self, const c10::List<c10::optional<at::Tensor>> & indices, const at::Tensor & values, bool accumulate, bool unsafe) {
    // No device check


  // DeviceGuard omitted
  return at::native::_index_put_impl_(self, indices, values, accumulate, unsafe);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___inverse_helper(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::_inverse_helper_cpu(self);
}

} // anonymous namespace
struct structured_isin_Tensor_Tensor_out_functional final : public at::native::structured_isin_Tensor_Tensor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isin_Tensor_Tensor(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert) {
structured_isin_Tensor_Tensor_out_functional op;
op.meta(elements, test_elements, assume_unique, invert);
op.impl(elements, test_elements, assume_unique, invert, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_isin_Tensor_Tensor_out_out final : public at::native::structured_isin_Tensor_Tensor_out {
    structured_isin_Tensor_Tensor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isin_out_Tensor_Tensor_out(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out) {
structured_isin_Tensor_Tensor_out_out op(out);
op.meta(elements, test_elements, assume_unique, invert);
op.impl(elements, test_elements, assume_unique, invert, op.outputs_[0]);
return out;
}
struct structured_isin_Tensor_Scalar_out_functional final : public at::native::structured_isin_Tensor_Scalar_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isin_Tensor_Scalar(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert) {
structured_isin_Tensor_Scalar_out_functional op;
op.meta(elements, test_element, assume_unique, invert);
op.impl(elements, test_element, assume_unique, invert, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_isin_Tensor_Scalar_out_out final : public at::native::structured_isin_Tensor_Scalar_out {
    structured_isin_Tensor_Scalar_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isin_out_Tensor_Scalar_out(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert, at::Tensor & out) {
structured_isin_Tensor_Scalar_out_out op(out);
op.meta(elements, test_element, assume_unique, invert);
op.impl(elements, test_element, assume_unique, invert, op.outputs_[0]);
return out;
}
struct structured_isin_Scalar_Tensor_out_functional final : public at::native::structured_isin_Scalar_Tensor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isin_Scalar_Tensor(const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert) {
structured_isin_Scalar_Tensor_out_functional op;
op.meta(element, test_elements, assume_unique, invert);
op.impl(element, test_elements, assume_unique, invert, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_isin_Scalar_Tensor_out_out final : public at::native::structured_isin_Scalar_Tensor_out {
    structured_isin_Scalar_Tensor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isin_out_Scalar_Tensor_out(const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out) {
structured_isin_Scalar_Tensor_out_out op(out);
op.meta(element, test_elements, assume_unique, invert);
op.impl(element, test_elements, assume_unique, invert, op.outputs_[0]);
return out;
}
namespace {

at::Tensor wrapper__isnan(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::isnan(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__kl_div_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, bool log_target) {
    // No device check


  // DeviceGuard omitted
  return at::native::kl_div_backward_cpu(grad_output, self, target, reduction, log_target);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_values_kthvalue_out_values(const at::Tensor & self, int64_t k, int64_t dim, bool keepdim, at::Tensor & values, at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::kthvalue_out_cpu(self, k, dim, keepdim, values, indices);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__native_layer_norm(const at::Tensor & input, at::IntArrayRef normalized_shape, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, double eps) {
    // No device check


  // DeviceGuard omitted
  return at::native::layer_norm_cpu(input, normalized_shape, weight, bias, eps);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__native_layer_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, at::IntArrayRef normalized_shape, const at::Tensor & mean, const at::Tensor & rstd, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, ::std::array<bool,3> output_mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::layer_norm_backward_cpu(grad_out, input, normalized_shape, mean, rstd, weight, bias, output_mask);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_nan_to_num_out_out(const at::Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::nan_to_num_out(self, nan, posinf, neginf, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_linspace_out_out(const at::Scalar & start, const at::Scalar & end, c10::optional<int64_t> steps, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::linspace_cpu_out(start, end, steps, out);
}

} // anonymous namespace
struct structured_log_out_functional final : public at::native::structured_log_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_log(const at::Tensor & self) {
structured_log_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_log_out_out final : public at::native::structured_log_out {
    structured_log_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log_out_out(const at::Tensor & self, at::Tensor & out) {
structured_log_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_log_out_inplace final : public at::native::structured_log_out {
    structured_log_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log_(at::Tensor & self) {
structured_log_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_log10_out_functional final : public at::native::structured_log10_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log10_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_log10(const at::Tensor & self) {
structured_log10_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_log10_out_out final : public at::native::structured_log10_out {
    structured_log10_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log10_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log10_out_out(const at::Tensor & self, at::Tensor & out) {
structured_log10_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_log10_out_inplace final : public at::native::structured_log10_out {
    structured_log10_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log10_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log10_(at::Tensor & self) {
structured_log10_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_log1p_out_functional final : public at::native::structured_log1p_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log1p_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_log1p(const at::Tensor & self) {
structured_log1p_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_log1p_out_out final : public at::native::structured_log1p_out {
    structured_log1p_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log1p_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log1p_out_out(const at::Tensor & self, at::Tensor & out) {
structured_log1p_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_log1p_out_inplace final : public at::native::structured_log1p_out {
    structured_log1p_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log1p_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log1p_(at::Tensor & self) {
structured_log1p_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_log2_out_functional final : public at::native::structured_log2_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_log2(const at::Tensor & self) {
structured_log2_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_log2_out_out final : public at::native::structured_log2_out {
    structured_log2_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log2_out_out(const at::Tensor & self, at::Tensor & out) {
structured_log2_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_log2_out_inplace final : public at::native::structured_log2_out {
    structured_log2_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_log2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log2_(at::Tensor & self) {
structured_log2_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_logaddexp_out_functional final : public at::native::structured_logaddexp_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_logaddexp_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_logaddexp(const at::Tensor & self, const at::Tensor & other) {
structured_logaddexp_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_logaddexp_out_out final : public at::native::structured_logaddexp_out {
    structured_logaddexp_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_logaddexp_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_logaddexp_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_logaddexp_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_logaddexp2_out_functional final : public at::native::structured_logaddexp2_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_logaddexp2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_logaddexp2(const at::Tensor & self, const at::Tensor & other) {
structured_logaddexp2_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_logaddexp2_out_out final : public at::native::structured_logaddexp2_out {
    structured_logaddexp2_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_logaddexp2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_logaddexp2_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_logaddexp2_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_xlogy_out_functional final : public at::native::structured_xlogy_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_xlogy_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_xlogy_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_xlogy_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_xlogy_out_out final : public at::native::structured_xlogy_out {
    structured_xlogy_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_xlogy_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_xlogy_out_OutTensor(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_xlogy_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_xlogy_out_inplace final : public at::native::structured_xlogy_out {
    structured_xlogy_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_xlogy_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_xlogy__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_xlogy_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor & wrapper_out_logspace_out_out(const at::Scalar & start, const at::Scalar & end, c10::optional<int64_t> steps, double base, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::logspace_cpu_out(start, end, steps, base, out);
}

} // anonymous namespace
struct structured_log_softmax_cpu_out_functional final : public at::native::structured_log_softmax_cpu_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
structured_log_softmax_cpu_out_functional op;
op.meta(self, dim, half_to_float);
op.impl(self, dim, half_to_float, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_log_softmax_cpu_out_out final : public at::native::structured_log_softmax_cpu_out {
    structured_log_softmax_cpu_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__log_softmax_out_out(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out) {
structured_log_softmax_cpu_out_out op(out);
op.meta(self, dim, half_to_float);
op.impl(self, dim, half_to_float, op.outputs_[0]);
return out;
}
struct structured_log_softmax_backward_cpu_out_functional final : public at::native::structured_log_softmax_backward_cpu_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
structured_log_softmax_backward_cpu_out_functional op;
op.meta(grad_output, output, dim, self);
op.impl(grad_output, output, dim, self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_log_softmax_backward_cpu_out_out final : public at::native::structured_log_softmax_backward_cpu_out {
    structured_log_softmax_backward_cpu_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__log_softmax_backward_data_out_out(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self, at::Tensor & out) {
structured_log_softmax_backward_cpu_out_out op(out);
op.meta(grad_output, output, dim, self);
op.impl(grad_output, output, dim, self, op.outputs_[0]);
return out;
}
namespace {

at::Tensor wrapper___logcumsumexp(const at::Tensor & self, int64_t dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::_logcumsumexp_cpu(self, dim);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out__logcumsumexp_out_out(const at::Tensor & self, int64_t dim, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::_logcumsumexp_out_cpu(self, dim, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__matrix_exp(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::matrix_exp(self);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper___aminmax(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::_aminmax_all(self);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_dim__aminmax_dim(const at::Tensor & self, int64_t dim, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::_aminmax(self, dim, keepdim);
}

} // anonymous namespace
struct structured_aminmax_out_functional final : public at::native::structured_aminmax_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_aminmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
structured_aminmax_out_functional op;
op.meta(self, dim, keepdim);
op.impl(self, dim, keepdim, *op.outputs_[0], *op.outputs_[1]);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_aminmax_out_out final : public at::native::structured_aminmax_out {
    structured_aminmax_out_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_aminmax_out_out(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & min, at::Tensor & max) {
structured_aminmax_out_out op(min, max);
op.meta(self, dim, keepdim);
op.impl(self, dim, keepdim, op.outputs_[0], op.outputs_[1]);
return std::forward_as_tuple(min, max);
}
namespace {

at::Tensor wrapper___compute_linear_combination(const at::Tensor & input, const at::Tensor & coefficients) {
    // No device check


  // DeviceGuard omitted
  return at::native::_compute_linear_combination(input, coefficients);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out__compute_linear_combination_out_out(const at::Tensor & input, const at::Tensor & coefficients, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::_compute_linear_combination_out(input, coefficients, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_dim_max_dim(const at::Tensor & self, int64_t dim, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::max(self, dim, keepdim);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_dim_max_max_out_dim_max(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & max, at::Tensor & max_values) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_out(self, dim, keepdim, max, max_values);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_amax_out_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::amax_out(self, dim, keepdim, out);
}

} // anonymous namespace
struct structured_mean_out_functional final : public at::native::structured_mean_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_mean_dim(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
structured_mean_out_functional op;
op.meta(self, dim, keepdim, dtype);
op.impl(self, dim, keepdim, dtype, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_mean_out_out final : public at::native::structured_mean_out {
    structured_mean_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mean_out_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_mean_out_out op(out);
op.meta(self, dim, keepdim, dtype);
op.impl(self, dim, keepdim, dtype, op.outputs_[0]);
return out;
}
namespace {

at::Tensor wrapper__median(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::median_cpu(self);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_dim_values_median_out_dim_values(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & values, at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::median_out_cpu(self, dim, keepdim, values, indices);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__nanmedian(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::nanmedian_cpu(self);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_dim_values_nanmedian_out_dim_values(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & values, at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::nanmedian_out_cpu(self, dim, keepdim, values, indices);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_dim_min_dim(const at::Tensor & self, int64_t dim, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::min(self, dim, keepdim);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_dim_min_min_out_dim_min(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & min, at::Tensor & min_indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::min_out(self, dim, keepdim, min, min_indices);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_amin_out_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::amin_out(self, dim, keepdim, out);
}

} // anonymous namespace
struct structured_mm_out_cpu_functional final : public at::native::structured_mm_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_mm(const at::Tensor & self, const at::Tensor & mat2) {
structured_mm_out_cpu_functional op;
op.meta(self, mat2);
op.impl(self, mat2, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_mm_out_cpu_out final : public at::native::structured_mm_out_cpu {
    structured_mm_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mm_out_out(const at::Tensor & self, const at::Tensor & mat2, at::Tensor & out) {
structured_mm_out_cpu_out op(out);
op.meta(self, mat2);
op.impl(self, mat2, op.outputs_[0]);
return out;
}
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__mode(const at::Tensor & self, int64_t dim, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::mode(self, dim, keepdim);
}

} // anonymous namespace
struct structured_mul_out_functional final : public at::native::structured_mul_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_mul_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_mul_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_mul_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_mul_out_out final : public at::native::structured_mul_out {
    structured_mul_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_mul_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mul_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_mul_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_mul_out_inplace final : public at::native::structured_mul_out {
    structured_mul_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_mul_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mul__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_mul_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__mv(const at::Tensor & self, const at::Tensor & vec) {
    // No device check


  // DeviceGuard omitted
  return at::native::mv(self, vec);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_mvlgamma_out_out(const at::Tensor & self, int64_t p, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::mvlgamma_out(self, p, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__narrow_copy(const at::Tensor & self, int64_t dim, int64_t start, int64_t length) {
    // No device check


  // DeviceGuard omitted
  return at::native::narrow_copy_dense_cpu(self, dim, start, length);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_narrow_copy_out_out(const at::Tensor & self, int64_t dim, int64_t start, int64_t length, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::narrow_copy_dense_cpu_out(self, dim, start, length, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__native_batch_norm(const at::Tensor & input, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, const c10::optional<at::Tensor> & running_mean, const c10::optional<at::Tensor> & running_var, bool training, double momentum, double eps) {
    // No device check


  // DeviceGuard omitted
  return at::native::batch_norm_cpu(input, weight, bias, running_mean, running_var, training, momentum, eps);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__native_batch_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & running_mean, const c10::optional<at::Tensor> & running_var, const c10::optional<at::Tensor> & save_mean, const c10::optional<at::Tensor> & save_invstd, bool train, double eps, ::std::array<bool,3> output_mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::batch_norm_backward_cpu(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__batch_norm_update_stats(const at::Tensor & input, const c10::optional<at::Tensor> & running_mean, const c10::optional<at::Tensor> & running_var, double momentum) {
    // No device check


  // DeviceGuard omitted
  return at::native::batch_norm_update_stats_cpu(input, running_mean, running_var, momentum);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___cdist_forward(const at::Tensor & x1, const at::Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
    // No device check


  // DeviceGuard omitted
  return at::native::_cdist_forward(x1, x2, p, compute_mode);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___cdist_backward(const at::Tensor & grad, const at::Tensor & x1, const at::Tensor & x2, double p, const at::Tensor & cdist) {
    // No device check


  // DeviceGuard omitted
  return at::native::_cdist_backward(grad, x1, x2, p, cdist);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___pdist_forward(const at::Tensor & self, double p) {
    // No device check


  // DeviceGuard omitted
  return at::native::_pdist_forward(self, p);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___pdist_backward(const at::Tensor & grad, const at::Tensor & self, double p, const at::Tensor & pdist) {
    // No device check


  // DeviceGuard omitted
  return at::native::_pdist_backward(grad, self, p, pdist);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__channel_shuffle(const at::Tensor & self, int64_t groups) {
    // No device check


  // DeviceGuard omitted
  return at::native::channel_shuffle(self, groups);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_generator_out_randperm_out_generator_out(int64_t n, c10::optional<at::Generator> generator, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::randperm_out_cpu(n, generator, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_range_out_out(const at::Scalar & start, const at::Scalar & end, const at::Scalar & step, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::range_cpu_out(start, end, step, out);
}

} // anonymous namespace
struct structured_reciprocal_out_functional final : public at::native::structured_reciprocal_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_reciprocal_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reciprocal(const at::Tensor & self) {
structured_reciprocal_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_reciprocal_out_out final : public at::native::structured_reciprocal_out {
    structured_reciprocal_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_reciprocal_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reciprocal_out_out(const at::Tensor & self, at::Tensor & out) {
structured_reciprocal_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_reciprocal_out_inplace final : public at::native::structured_reciprocal_out {
    structured_reciprocal_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_reciprocal_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reciprocal_(at::Tensor & self) {
structured_reciprocal_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_neg_out_functional final : public at::native::structured_neg_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_neg_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_neg(const at::Tensor & self) {
structured_neg_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_neg_out_out final : public at::native::structured_neg_out {
    structured_neg_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_neg_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_neg_out_out(const at::Tensor & self, at::Tensor & out) {
structured_neg_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_neg_out_inplace final : public at::native::structured_neg_out {
    structured_neg_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_neg_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_neg_(at::Tensor & self) {
structured_neg_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_Tensor_repeat_interleave_Tensor(const at::Tensor & repeats, c10::optional<int64_t> output_size) {
    // No device check


  // DeviceGuard omitted
  return at::native::repeat_interleave_cpu(repeats, output_size);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___reshape_alias(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride) {
    // No device check


  // DeviceGuard omitted
  return at::native::_reshape_alias(self, size, stride);
}

} // anonymous namespace
struct structured_round_out_functional final : public at::native::structured_round_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_round_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_round(const at::Tensor & self) {
structured_round_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_round_out_out final : public at::native::structured_round_out {
    structured_round_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_round_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_round_out_out(const at::Tensor & self, at::Tensor & out) {
structured_round_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_round_out_inplace final : public at::native::structured_round_out {
    structured_round_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_round_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_round_(at::Tensor & self) {
structured_round_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__relu(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::relu(self);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__relu_(at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::relu_(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__prelu(const at::Tensor & self, const at::Tensor & weight) {
    // No device check


  // DeviceGuard omitted
  return at::native::prelu_cpu(self, weight);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__prelu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight) {
    // No device check


  // DeviceGuard omitted
  return at::native::prelu_backward_cpu(grad_output, self, weight);
}

} // anonymous namespace
struct structured_gelu_out_cpu_functional final : public at::native::structured_gelu_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gelu_out_cpu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gelu(const at::Tensor & self) {
structured_gelu_out_cpu_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_gelu_out_cpu_out final : public at::native::structured_gelu_out_cpu {
    structured_gelu_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gelu_out_cpu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gelu_out_out(const at::Tensor & self, at::Tensor & out) {
structured_gelu_out_cpu_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_gelu_backward_out_cpu_functional final : public at::native::structured_gelu_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gelu_backward_out_cpu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gelu_backward(const at::Tensor & grad, const at::Tensor & self) {
structured_gelu_backward_out_cpu_functional op;
op.meta(grad, self);
op.impl(grad, self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_gelu_backward_out_cpu_out final : public at::native::structured_gelu_backward_out_cpu {
    structured_gelu_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gelu_backward_out_cpu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gelu_backward_out_grad_input(const at::Tensor & grad, const at::Tensor & self, at::Tensor & grad_input) {
structured_gelu_backward_out_cpu_out op(grad_input);
op.meta(grad, self);
op.impl(grad, self, op.outputs_[0]);
return grad_input;
}
struct structured_hardshrink_out_functional final : public at::native::structured_hardshrink_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hardshrink_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hardshrink(const at::Tensor & self, const at::Scalar & lambd) {
structured_hardshrink_out_functional op;
op.meta(self, lambd);
op.impl(self, lambd, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_hardshrink_out_out final : public at::native::structured_hardshrink_out {
    structured_hardshrink_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hardshrink_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardshrink_out_out(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out) {
structured_hardshrink_out_out op(out);
op.meta(self, lambd);
op.impl(self, lambd, op.outputs_[0]);
return out;
}
struct structured_hardshrink_backward_out_functional final : public at::native::structured_hardshrink_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hardshrink_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd) {
structured_hardshrink_backward_out_functional op;
op.meta(grad_out, self, lambd);
op.impl(grad_out, self, lambd, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_hardshrink_backward_out_out final : public at::native::structured_hardshrink_backward_out {
    structured_hardshrink_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hardshrink_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardshrink_backward_out_grad_input(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input) {
structured_hardshrink_backward_out_out op(grad_input);
op.meta(grad_out, self, lambd);
op.impl(grad_out, self, lambd, op.outputs_[0]);
return grad_input;
}
struct structured_rsqrt_out_functional final : public at::native::structured_rsqrt_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_rsqrt_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_rsqrt(const at::Tensor & self) {
structured_rsqrt_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_rsqrt_out_out final : public at::native::structured_rsqrt_out {
    structured_rsqrt_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_rsqrt_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_rsqrt_out_out(const at::Tensor & self, at::Tensor & out) {
structured_rsqrt_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_rsqrt_out_inplace final : public at::native::structured_rsqrt_out {
    structured_rsqrt_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_rsqrt_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_rsqrt_(at::Tensor & self) {
structured_rsqrt_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_silu_out_functional final : public at::native::structured_silu_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_silu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_silu(const at::Tensor & self) {
structured_silu_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_silu_out_out final : public at::native::structured_silu_out {
    structured_silu_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_silu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_silu_out_out(const at::Tensor & self, at::Tensor & out) {
structured_silu_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_silu_out_inplace final : public at::native::structured_silu_out {
    structured_silu_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_silu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_silu_(at::Tensor & self) {
structured_silu_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_silu_backward_out_functional final : public at::native::structured_silu_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_silu_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_silu_backward(const at::Tensor & grad_output, const at::Tensor & self) {
structured_silu_backward_out_functional op;
op.meta(grad_output, self);
op.impl(grad_output, self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_silu_backward_out_out final : public at::native::structured_silu_backward_out {
    structured_silu_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_silu_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_silu_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
structured_silu_backward_out_out op(grad_input);
op.meta(grad_output, self);
op.impl(grad_output, self, op.outputs_[0]);
return grad_input;
}
struct structured_mish_out_functional final : public at::native::structured_mish_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_mish_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_mish(const at::Tensor & self) {
structured_mish_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_mish_out_out final : public at::native::structured_mish_out {
    structured_mish_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_mish_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mish_out_out(const at::Tensor & self, at::Tensor & out) {
structured_mish_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_mish_out_inplace final : public at::native::structured_mish_out {
    structured_mish_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_mish_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mish_(at::Tensor & self) {
structured_mish_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__mish_backward(const at::Tensor & grad_output, const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::mish_backward(grad_output, self);
}

} // anonymous namespace
struct structured_sigmoid_out_functional final : public at::native::structured_sigmoid_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sigmoid_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sigmoid(const at::Tensor & self) {
structured_sigmoid_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sigmoid_out_out final : public at::native::structured_sigmoid_out {
    structured_sigmoid_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sigmoid_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sigmoid_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sigmoid_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_sigmoid_out_inplace final : public at::native::structured_sigmoid_out {
    structured_sigmoid_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sigmoid_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sigmoid_(at::Tensor & self) {
structured_sigmoid_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__logit(const at::Tensor & self, c10::optional<double> eps) {
    // No device check


  // DeviceGuard omitted
  return at::native::logit(self, eps);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_logit_out_out(const at::Tensor & self, c10::optional<double> eps, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::logit_out(self, eps, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__logit_(at::Tensor & self, c10::optional<double> eps) {
    // No device check


  // DeviceGuard omitted
  return at::native::logit_(self, eps);
}

} // anonymous namespace
struct structured_sin_out_functional final : public at::native::structured_sin_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sin_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sin(const at::Tensor & self) {
structured_sin_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sin_out_out final : public at::native::structured_sin_out {
    structured_sin_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sin_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sin_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sin_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_sin_out_inplace final : public at::native::structured_sin_out {
    structured_sin_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sin_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sin_(at::Tensor & self) {
structured_sin_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_sinc_out_functional final : public at::native::structured_sinc_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sinc_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sinc(const at::Tensor & self) {
structured_sinc_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sinc_out_out final : public at::native::structured_sinc_out {
    structured_sinc_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sinc_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sinc_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sinc_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_sinc_out_inplace final : public at::native::structured_sinc_out {
    structured_sinc_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sinc_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sinc_(at::Tensor & self) {
structured_sinc_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_sinh_out_functional final : public at::native::structured_sinh_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sinh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sinh(const at::Tensor & self) {
structured_sinh_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sinh_out_out final : public at::native::structured_sinh_out {
    structured_sinh_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sinh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sinh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sinh_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_sinh_out_inplace final : public at::native::structured_sinh_out {
    structured_sinh_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sinh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sinh_(at::Tensor & self) {
structured_sinh_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_softmax_cpu_out_functional final : public at::native::structured_softmax_cpu_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
structured_softmax_cpu_out_functional op;
op.meta(self, dim, half_to_float);
op.impl(self, dim, half_to_float, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_softmax_cpu_out_out final : public at::native::structured_softmax_cpu_out {
    structured_softmax_cpu_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__softmax_out_out(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out) {
structured_softmax_cpu_out_out op(out);
op.meta(self, dim, half_to_float);
op.impl(self, dim, half_to_float, op.outputs_[0]);
return out;
}
struct structured_softmax_backward_cpu_out_functional final : public at::native::structured_softmax_backward_cpu_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
structured_softmax_backward_cpu_out_functional op;
op.meta(grad_output, output, dim, self);
op.impl(grad_output, output, dim, self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_softmax_backward_cpu_out_out final : public at::native::structured_softmax_backward_cpu_out {
    structured_softmax_backward_cpu_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__softmax_backward_data_out_out(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self, at::Tensor & grad_input) {
structured_softmax_backward_cpu_out_out op(grad_input);
op.meta(grad_output, output, dim, self);
op.impl(grad_output, output, dim, self, op.outputs_[0]);
return grad_input;
}
namespace {

at::Tensor & wrapper_out_sspaddmm_out_out(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::_sspaddmm_out_only_sparse(self, mat1, mat2, beta, alpha, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___stack(at::TensorList tensors, int64_t dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::_stack_cpu(tensors, dim);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out__stack_out_out(at::TensorList tensors, int64_t dim, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::_stack_out_cpu(tensors, dim, out);
}

} // anonymous namespace
struct structured_sum_out_functional final : public at::native::structured_sum_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sum_dim_IntList(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
structured_sum_out_functional op;
op.meta(self, dim, keepdim, dtype);
op.impl(self, dim, keepdim, dtype, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sum_out_out final : public at::native::structured_sum_out {
    structured_sum_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sum_out_IntList_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_sum_out_out op(out);
op.meta(self, dim, keepdim, dtype);
op.impl(self, dim, keepdim, dtype, op.outputs_[0]);
return out;
}
namespace {

at::Tensor wrapper__nansum(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::nansum(self, dtype);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_dim_IntList_nansum_dim_IntList(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::nansum(self, dim, keepdim, dtype);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_IntList_out_nansum_out_IntList_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::nansum_out(self, dim, keepdim, dtype, out);
}

} // anonymous namespace
struct structured_sqrt_out_functional final : public at::native::structured_sqrt_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sqrt_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sqrt(const at::Tensor & self) {
structured_sqrt_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sqrt_out_out final : public at::native::structured_sqrt_out {
    structured_sqrt_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sqrt_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sqrt_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sqrt_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_sqrt_out_inplace final : public at::native::structured_sqrt_out {
    structured_sqrt_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sqrt_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sqrt_(at::Tensor & self) {
structured_sqrt_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor & wrapper_out_square_out_out(const at::Tensor & self, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::square_out(self, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_correction_std_correction(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::std(self, dim, correction, keepdim);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_correction_out_std_out_correction_out(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::std_out(self, dim, correction, keepdim, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_correction_std_mean_correction(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::std_mean(self, dim, correction, keepdim);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__prod(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::prod(self, dtype);
}

} // anonymous namespace
struct structured_prod_out_functional final : public at::native::structured_prod_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_prod_dim_int(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
structured_prod_out_functional op;
op.meta(self, dim, keepdim, dtype);
op.impl(self, dim, keepdim, dtype, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_prod_out_out final : public at::native::structured_prod_out {
    structured_prod_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_prod_out_int_out(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_prod_out_out op(out);
op.meta(self, dim, keepdim, dtype);
op.impl(self, dim, keepdim, dtype, op.outputs_[0]);
return out;
}
struct structured_tan_out_functional final : public at::native::structured_tan_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_tan_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_tan(const at::Tensor & self) {
structured_tan_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_tan_out_out final : public at::native::structured_tan_out {
    structured_tan_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_tan_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tan_out_out(const at::Tensor & self, at::Tensor & out) {
structured_tan_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_tan_out_inplace final : public at::native::structured_tan_out {
    structured_tan_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_tan_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tan_(at::Tensor & self) {
structured_tan_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_tanh_out_functional final : public at::native::structured_tanh_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_tanh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_tanh(const at::Tensor & self) {
structured_tanh_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_tanh_out_out final : public at::native::structured_tanh_out {
    structured_tanh_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_tanh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tanh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_tanh_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_tanh_out_inplace final : public at::native::structured_tanh_out {
    structured_tanh_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_tanh_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tanh_(at::Tensor & self) {
structured_tanh_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor & wrapper_out_tensordot_out_out(const at::Tensor & self, const at::Tensor & other, at::IntArrayRef dims_self, at::IntArrayRef dims_other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::tensordot_out(self, other, dims_self, dims_other, out);
}

} // anonymous namespace
struct structured_threshold_out_functional final : public at::native::structured_threshold_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_threshold_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_threshold(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
structured_threshold_out_functional op;
op.meta(self, threshold, value);
op.impl(self, threshold, value, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_threshold_out_out final : public at::native::structured_threshold_out {
    structured_threshold_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_threshold_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_threshold_out_out(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value, at::Tensor & out) {
structured_threshold_out_out op(out);
op.meta(self, threshold, value);
op.impl(self, threshold, value, op.outputs_[0]);
return out;
}
struct structured_threshold_out_inplace final : public at::native::structured_threshold_out {
    structured_threshold_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_threshold_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_threshold_(at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
structured_threshold_out_inplace op(self);
op.meta(self, threshold, value);
op.impl(self, threshold, value, op.outputs_[0]);
return self;
}
struct structured_threshold_backward_out_functional final : public at::native::structured_threshold_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_threshold_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold) {
structured_threshold_backward_out_functional op;
op.meta(grad_output, self, threshold);
op.impl(grad_output, self, threshold, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_threshold_backward_out_out final : public at::native::structured_threshold_backward_out {
    structured_threshold_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_threshold_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_threshold_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold, at::Tensor & grad_input) {
structured_threshold_backward_out_out op(grad_input);
op.meta(grad_output, self, threshold);
op.impl(grad_output, self, threshold, op.outputs_[0]);
return grad_input;
}
namespace {

at::Tensor wrapper__flip(const at::Tensor & self, at::IntArrayRef dims) {
    // No device check


  // DeviceGuard omitted
  return at::native::flip(self, dims);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__roll(const at::Tensor & self, at::IntArrayRef shifts, at::IntArrayRef dims) {
    // No device check


  // DeviceGuard omitted
  return at::native::roll_cpu(self, shifts, dims);
}

} // anonymous namespace
struct structured_trunc_out_functional final : public at::native::structured_trunc_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_trunc_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_trunc(const at::Tensor & self) {
structured_trunc_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_trunc_out_out final : public at::native::structured_trunc_out {
    structured_trunc_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_trunc_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_trunc_out_out(const at::Tensor & self, at::Tensor & out) {
structured_trunc_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_trunc_out_inplace final : public at::native::structured_trunc_out {
    structured_trunc_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_trunc_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_trunc_(at::Tensor & self) {
structured_trunc_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper___unique(const at::Tensor & self, bool sorted, bool return_inverse) {
    // No device check


  // DeviceGuard omitted
  return at::native::_unique_cpu(self, sorted, return_inverse);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__unique_dim(const at::Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {
    // No device check


  // DeviceGuard omitted
  return at::native::unique_dim_cpu(self, dim, sorted, return_inverse, return_counts);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__unique_consecutive(const at::Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::unique_consecutive_cpu(self, return_inverse, return_counts, dim);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__unique_dim_consecutive(const at::Tensor & self, int64_t dim, bool return_inverse, bool return_counts) {
    // No device check


  // DeviceGuard omitted
  return at::native::unique_dim_consecutive_cpu(self, dim, return_inverse, return_counts);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper___unique2(const at::Tensor & self, bool sorted, bool return_inverse, bool return_counts) {
    // No device check


  // DeviceGuard omitted
  return at::native::_unique2_cpu(self, sorted, return_inverse, return_counts);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_correction_var_correction(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::var(self, dim, correction, keepdim);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_correction_out_var_out_correction_out(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::var_out(self, dim, correction, keepdim, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_correction_var_mean_correction(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::var_mean(self, dim, correction, keepdim);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___s_where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::_s_where(condition, self, other);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___standard_gamma_grad(const at::Tensor & self, const at::Tensor & output) {
    // No device check


  // DeviceGuard omitted
  return at::native::_standard_gamma_grad_cpu(self, output);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___standard_gamma(const at::Tensor & self, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::_s_gamma_cpu(self, generator);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___dirichlet_grad(const at::Tensor & x, const at::Tensor & alpha, const at::Tensor & total) {
    // No device check


  // DeviceGuard omitted
  return at::native::_dirichlet_grad_cpu(x, alpha, total);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___sample_dirichlet(const at::Tensor & self, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::_s_dirichlet_cpu(self, generator);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__poisson(const at::Tensor & self, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::_s_poisson_cpu(self, generator);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__binomial(const at::Tensor & count, const at::Tensor & prob, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::_s_binomial_cpu(count, prob, generator);
}

} // anonymous namespace
struct structured_norm_dtype_out_functional final : public at::native::structured_norm_dtype_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_norm_ScalarOpt_dim_dtype(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
structured_norm_dtype_out_functional op;
op.meta(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim, dtype);
op.impl(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim, dtype, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_norm_dtype_out_out final : public at::native::structured_norm_dtype_out {
    structured_norm_dtype_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_norm_out_dtype_out(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype, at::Tensor & out) {
structured_norm_dtype_out_out op(out);
op.meta(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim, dtype);
op.impl(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim, dtype, op.outputs_[0]);
return out;
}
struct structured_norm_out_functional final : public at::native::structured_norm_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_norm_ScalarOpt_dim(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim) {
structured_norm_out_functional op;
op.meta(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim);
op.impl(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_norm_out_out final : public at::native::structured_norm_out {
    structured_norm_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_norm_out_out(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::Tensor & out) {
structured_norm_out_out op(out);
op.meta(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim);
op.impl(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim, op.outputs_[0]);
return out;
}
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_Tensor_out_frexp_out_Tensor_out(const at::Tensor & self, at::Tensor & mantissa, at::Tensor & exponent) {
    // No device check


  // DeviceGuard omitted
  return at::native::frexp_out(self, mantissa, exponent);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__zero_(at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::zero_(self);
}

} // anonymous namespace
struct structured_sub_out_functional final : public at::native::structured_sub_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sub_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sub_Tensor(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
structured_sub_out_functional op;
op.meta(self, other, alpha);
op.impl(self, other, alpha, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sub_out_out final : public at::native::structured_sub_out {
    structured_sub_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sub_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sub_out_out(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
structured_sub_out_out op(out);
op.meta(self, other, alpha);
op.impl(self, other, alpha, op.outputs_[0]);
return out;
}
struct structured_sub_out_inplace final : public at::native::structured_sub_out {
    structured_sub_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sub_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sub__Tensor(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
structured_sub_out_inplace op(self);
op.meta(self, other, alpha);
op.impl(self, other, alpha, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_Tensor_rsub_Tensor(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::rsub(self, other, alpha);
}

} // anonymous namespace
struct structured_heaviside_out_functional final : public at::native::structured_heaviside_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_heaviside_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_heaviside(const at::Tensor & self, const at::Tensor & values) {
structured_heaviside_out_functional op;
op.meta(self, values);
op.impl(self, values, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_heaviside_out_out final : public at::native::structured_heaviside_out {
    structured_heaviside_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_heaviside_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_heaviside_out_out(const at::Tensor & self, const at::Tensor & values, at::Tensor & out) {
structured_heaviside_out_out op(out);
op.meta(self, values);
op.impl(self, values, op.outputs_[0]);
return out;
}
struct structured_heaviside_out_inplace final : public at::native::structured_heaviside_out {
    structured_heaviside_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_heaviside_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_heaviside_(at::Tensor & self, const at::Tensor & values) {
structured_heaviside_out_inplace op(self);
op.meta(self, values);
op.impl(self, values, op.outputs_[0]);
return self;
}
struct structured_addmm_out_cpu_functional final : public at::native::structured_addmm_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
structured_addmm_out_cpu_functional op;
op.meta(self, mat1, mat2, beta, alpha);
op.impl(self, mat1, mat2, beta, alpha, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_addmm_out_cpu_out final : public at::native::structured_addmm_out_cpu {
    structured_addmm_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addmm_out_out(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
structured_addmm_out_cpu_out op(out);
op.meta(self, mat1, mat2, beta, alpha);
op.impl(self, mat1, mat2, beta, alpha, op.outputs_[0]);
return out;
}
struct structured_addmm_out_cpu_inplace final : public at::native::structured_addmm_out_cpu {
    structured_addmm_out_cpu_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
structured_addmm_out_cpu_inplace op(self);
op.meta(self, mat1, mat2, beta, alpha);
op.impl(self, mat1, mat2, beta, alpha, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_sparse_dim_to_sparse_sparse_dim(const at::Tensor & self, int64_t sparse_dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::dense_to_sparse(self, sparse_dim);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__to_sparse(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::dense_to_sparse(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__to_mkldnn(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::dense_to_mkldnn(self, dtype);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__quantize_per_tensor(const at::Tensor & self, double scale, int64_t zero_point, at::ScalarType dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantize_per_tensor(self, scale, zero_point, dtype);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_tensor_qparams_quantize_per_tensor_tensor_qparams(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, at::ScalarType dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantize_per_tensor_tensor_qparams(self, scale, zero_point, dtype);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_tensors_quantize_per_tensor_tensors(at::TensorList tensors, const at::Tensor & scales, const at::Tensor & zero_points, at::ScalarType dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantize_per_tensor_list_cpu(tensors, scales, zero_points, dtype);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__quantize_per_channel(const at::Tensor & self, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, at::ScalarType dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantize_per_channel(self, scales, zero_points, axis, dtype);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_self_dequantize_self(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::dequantize_cpu(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___make_per_tensor_quantized_tensor(const at::Tensor & self, double scale, int64_t zero_point) {
    // No device check


  // DeviceGuard omitted
  return at::native::make_per_tensor_quantized_tensor_cpu(self, scale, zero_point);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___make_per_channel_quantized_tensor(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t axis) {
    // No device check


  // DeviceGuard omitted
  return at::native::make_per_channel_quantized_tensor_cpu(self, scale, zero_point, axis);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__fake_quantize_per_tensor_affine_cachemask(const at::Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
    // No device check


  // DeviceGuard omitted
  return at::native::fake_quantize_per_tensor_affine_cachemask(self, scale, zero_point, quant_min, quant_max);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper___fake_quantize_per_tensor_affine_cachemask_tensor_qparams(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, const at::Tensor & fake_quant_enabled, int64_t quant_min, int64_t quant_max) {
    // No device check


  // DeviceGuard omitted
  return at::native::_fake_quantize_per_tensor_affine_cachemask_tensor_qparams(self, scale, zero_point, fake_quant_enabled, quant_min, quant_max);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___fake_quantize_learnable_per_tensor_affine(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t quant_min, int64_t quant_max, double grad_factor) {
    // No device check


  // DeviceGuard omitted
  return at::native::_fake_quantize_learnable_per_tensor_affine(self, scale, zero_point, quant_min, quant_max, grad_factor);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__fake_quantize_per_channel_affine_cachemask(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
    // No device check


  // DeviceGuard omitted
  return at::native::fake_quantize_per_channel_affine_cachemask(self, scale, zero_point, axis, quant_min, quant_max);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___fake_quantize_learnable_per_channel_affine(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor) {
    // No device check


  // DeviceGuard omitted
  return at::native::_fake_quantize_learnable_per_channel_affine(self, scale, zero_point, axis, quant_min, quant_max, grad_factor);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper___fused_moving_avg_obs_fq_helper(const at::Tensor & self, const at::Tensor & observer_on, const at::Tensor & fake_quant_on, at::Tensor & running_min, at::Tensor & running_max, at::Tensor & scale, at::Tensor & zero_point, double averaging_const, int64_t quant_min, int64_t quant_max, int64_t ch_axis, bool per_row_fake_quant, bool symmetric_quant) {
    // No device check


  // DeviceGuard omitted
  return at::native::fused_moving_avg_obs_fake_quant_cpu(self, observer_on, fake_quant_on, running_min, running_max, scale, zero_point, averaging_const, quant_min, quant_max, ch_axis, per_row_fake_quant, symmetric_quant);
}

} // anonymous namespace
namespace {

at::Scalar wrapper___local_scalar_dense(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::_local_scalar_dense_cpu(self);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_source_Storage_set__source_Storage(at::Tensor & self, at::Storage source) {
    // No device check


  // DeviceGuard omitted
  return at::native::set_(self, source);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_source_Storage_storage_offset_set__source_Storage_storage_offset(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride) {
    // No device check


  // DeviceGuard omitted
  return at::native::set_storage_cpu_(self, source, storage_offset, size, stride);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_source_Tensor_set__source_Tensor(at::Tensor & self, const at::Tensor & source) {
    // No device check


  // DeviceGuard omitted
  return at::native::set_tensor_(self, source);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__set_(at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::set_cpu_(self);
}

} // anonymous namespace
namespace {

bool wrapper__is_set_to(const at::Tensor & self, const at::Tensor & tensor) {
    // No device check


  // DeviceGuard omitted
  return at::native::is_set_to(self, tensor);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_masked_fill__Scalar(at::Tensor & self, const at::Tensor & mask, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::masked_fill__cpu(self, mask, value);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_masked_fill__Tensor(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::masked_fill__cpu(self, mask, value);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) {
    // No device check


  // DeviceGuard omitted
  return at::native::masked_scatter__cpu(self, mask, source);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__view(const at::Tensor & self, at::IntArrayRef size) {
    // No device check


  // DeviceGuard omitted
  return at::native::view(self, size);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate) {
    // No device check


  // DeviceGuard omitted
  return at::native::put_(self, index, source, accumulate);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_alpha_index_add__alpha(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::index_add_cpu_(self, dim, index, source, alpha);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_int_Scalar_index_fill__int_Scalar(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::index_fill_(self, dim, index, value);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_int_Tensor_index_fill__int_Tensor(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::index_fill_(self, dim, index, value);
}

} // anonymous namespace
struct structured_scatter_src_out_functional final : public at::native::structured_scatter_src_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_src(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
structured_scatter_src_out_functional op;
op.meta(self, dim, index, src);
op.impl(self, dim, index, src, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_src_out_out final : public at::native::structured_scatter_src_out {
    structured_scatter_src_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_out_src_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, at::Tensor & out) {
structured_scatter_src_out_out op(out);
op.meta(self, dim, index, src);
op.impl(self, dim, index, src, op.outputs_[0]);
return out;
}
struct structured_scatter_src_out_inplace final : public at::native::structured_scatter_src_out {
    structured_scatter_src_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter__src(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
structured_scatter_src_out_inplace op(self);
op.meta(self, dim, index, src);
op.impl(self, dim, index, src, op.outputs_[0]);
return self;
}
struct structured_scatter_value_out_functional final : public at::native::structured_scatter_value_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_value(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
structured_scatter_value_out_functional op;
op.meta(self, dim, index, value);
op.impl(self, dim, index, value, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_value_out_out final : public at::native::structured_scatter_value_out {
    structured_scatter_value_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_out_value_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, at::Tensor & out) {
structured_scatter_value_out_out op(out);
op.meta(self, dim, index, value);
op.impl(self, dim, index, value, op.outputs_[0]);
return out;
}
struct structured_scatter_value_out_inplace final : public at::native::structured_scatter_value_out {
    structured_scatter_value_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter__value(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
structured_scatter_value_out_inplace op(self);
op.meta(self, dim, index, value);
op.impl(self, dim, index, value, op.outputs_[0]);
return self;
}
struct structured_scatter_reduce_out_functional final : public at::native::structured_scatter_reduce_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_reduce(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
structured_scatter_reduce_out_functional op;
op.meta(self, dim, index, src, reduce);
op.impl(self, dim, index, src, reduce, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_reduce_out_out final : public at::native::structured_scatter_reduce_out {
    structured_scatter_reduce_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_out_reduce_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce, at::Tensor & out) {
structured_scatter_reduce_out_out op(out);
op.meta(self, dim, index, src, reduce);
op.impl(self, dim, index, src, reduce, op.outputs_[0]);
return out;
}
struct structured_scatter_reduce_out_inplace final : public at::native::structured_scatter_reduce_out {
    structured_scatter_reduce_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter__reduce(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
structured_scatter_reduce_out_inplace op(self);
op.meta(self, dim, index, src, reduce);
op.impl(self, dim, index, src, reduce, op.outputs_[0]);
return self;
}
struct structured_scatter_value_reduce_out_functional final : public at::native::structured_scatter_value_reduce_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_value_reduce(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
structured_scatter_value_reduce_out_functional op;
op.meta(self, dim, index, value, reduce);
op.impl(self, dim, index, value, reduce, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_value_reduce_out_out final : public at::native::structured_scatter_value_reduce_out {
    structured_scatter_value_reduce_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_out_value_reduce_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce, at::Tensor & out) {
structured_scatter_value_reduce_out_out op(out);
op.meta(self, dim, index, value, reduce);
op.impl(self, dim, index, value, reduce, op.outputs_[0]);
return out;
}
struct structured_scatter_value_reduce_out_inplace final : public at::native::structured_scatter_value_reduce_out {
    structured_scatter_value_reduce_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter__value_reduce(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
structured_scatter_value_reduce_out_inplace op(self);
op.meta(self, dim, index, value, reduce);
op.impl(self, dim, index, value, reduce, op.outputs_[0]);
return self;
}
struct structured_scatter_add_functional final : public at::native::structured_scatter_add {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
structured_scatter_add_functional op;
op.meta(self, dim, index, src);
op.impl(self, dim, index, src, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_add_out final : public at::native::structured_scatter_add {
    structured_scatter_add_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_add_out_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, at::Tensor & out) {
structured_scatter_add_out op(out);
op.meta(self, dim, index, src);
op.impl(self, dim, index, src, op.outputs_[0]);
return out;
}
struct structured_scatter_add_inplace final : public at::native::structured_scatter_add {
    structured_scatter_add_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
structured_scatter_add_inplace op(self);
op.meta(self, dim, index, src);
op.impl(self, dim, index, src, op.outputs_[0]);
return self;
}
struct structured_eq_Scalar_out_functional final : public at::native::structured_eq_Scalar_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_eq_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_eq_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_eq_Scalar_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_eq_Scalar_out_out final : public at::native::structured_eq_Scalar_out {
    structured_eq_Scalar_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_eq_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_eq_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_eq_Scalar_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_eq_Scalar_out_inplace final : public at::native::structured_eq_Scalar_out {
    structured_eq_Scalar_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_eq_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_eq__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_eq_Scalar_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_eq_Tensor_out_functional final : public at::native::structured_eq_Tensor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_eq_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_eq_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_eq_Tensor_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_eq_Tensor_out_out final : public at::native::structured_eq_Tensor_out {
    structured_eq_Tensor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_eq_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_eq_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_eq_Tensor_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_eq_Tensor_out_inplace final : public at::native::structured_eq_Tensor_out {
    structured_eq_Tensor_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_eq_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_eq__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_eq_Tensor_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_bitwise_and_out_functional final : public at::native::structured_bitwise_and_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_and_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_and_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_and_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_and_out_out final : public at::native::structured_bitwise_and_out {
    structured_bitwise_and_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_and_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_and_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_and_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_bitwise_and_out_inplace final : public at::native::structured_bitwise_and_out {
    structured_bitwise_and_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_and_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_and__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_and_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_bitwise_or_out_functional final : public at::native::structured_bitwise_or_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_or_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_or_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_or_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_or_out_out final : public at::native::structured_bitwise_or_out {
    structured_bitwise_or_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_or_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_or_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_or_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_bitwise_or_out_inplace final : public at::native::structured_bitwise_or_out {
    structured_bitwise_or_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_or_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_or__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_or_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_bitwise_xor_out_functional final : public at::native::structured_bitwise_xor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_xor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_xor_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_xor_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_xor_out_out final : public at::native::structured_bitwise_xor_out {
    structured_bitwise_xor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_xor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_xor_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_xor_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_bitwise_xor_out_inplace final : public at::native::structured_bitwise_xor_out {
    structured_bitwise_xor_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_xor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_xor__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_xor_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_Scalar___lshift___Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::__lshift__(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar___ilshift___Scalar(at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::__ilshift__(self, other);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor___lshift___Tensor(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::__lshift__(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor___ilshift___Tensor(at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::__ilshift__(self, other);
}

} // anonymous namespace
struct structured_bitwise_left_shift_out_functional final : public at::native::structured_bitwise_left_shift_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_left_shift_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_left_shift_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_left_shift_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_left_shift_out_out final : public at::native::structured_bitwise_left_shift_out {
    structured_bitwise_left_shift_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_left_shift_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_left_shift_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_left_shift_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_bitwise_left_shift_out_inplace final : public at::native::structured_bitwise_left_shift_out {
    structured_bitwise_left_shift_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_left_shift_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_left_shift__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_left_shift_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_Tensor_Scalar_bitwise_left_shift_Tensor_Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::bitwise_left_shift(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_Scalar_out_bitwise_left_shift_out_Tensor_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::bitwise_left_shift_out(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_Scalar_bitwise_left_shift__Tensor_Scalar(at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::bitwise_left_shift_(self, other);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_Tensor_bitwise_left_shift_Scalar_Tensor(const at::Scalar & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::bitwise_left_shift(self, other);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar___rshift___Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::__rshift__(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar___irshift___Scalar(at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::__irshift__(self, other);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor___rshift___Tensor(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::__rshift__(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor___irshift___Tensor(at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::__irshift__(self, other);
}

} // anonymous namespace
struct structured_bitwise_right_shift_out_functional final : public at::native::structured_bitwise_right_shift_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_right_shift_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_right_shift_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_right_shift_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_right_shift_out_out final : public at::native::structured_bitwise_right_shift_out {
    structured_bitwise_right_shift_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_right_shift_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_right_shift_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_right_shift_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_bitwise_right_shift_out_inplace final : public at::native::structured_bitwise_right_shift_out {
    structured_bitwise_right_shift_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_bitwise_right_shift_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_right_shift__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_right_shift_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_Tensor_Scalar_bitwise_right_shift_Tensor_Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::bitwise_right_shift(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_Scalar_out_bitwise_right_shift_out_Tensor_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::bitwise_right_shift_out(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_Scalar_bitwise_right_shift__Tensor_Scalar(at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::bitwise_right_shift_(self, other);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_Tensor_bitwise_right_shift_Scalar_Tensor(const at::Scalar & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::bitwise_right_shift(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_tril_out_out(const at::Tensor & self, int64_t diagonal, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::tril_cpu_out(self, diagonal, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__tril_(at::Tensor & self, int64_t diagonal) {
    // No device check


  // DeviceGuard omitted
  return at::native::tril_cpu_(self, diagonal);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_triu_out_out(const at::Tensor & self, int64_t diagonal, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::triu_cpu_out(self, diagonal, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__triu_(at::Tensor & self, int64_t diagonal) {
    // No device check


  // DeviceGuard omitted
  return at::native::triu_cpu_(self, diagonal);
}

} // anonymous namespace
struct structured_digamma_out_functional final : public at::native::structured_digamma_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_digamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_digamma(const at::Tensor & self) {
structured_digamma_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_digamma_out_out final : public at::native::structured_digamma_out {
    structured_digamma_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_digamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_digamma_out_out(const at::Tensor & self, at::Tensor & out) {
structured_digamma_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_digamma_out_inplace final : public at::native::structured_digamma_out {
    structured_digamma_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_digamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_digamma_(at::Tensor & self) {
structured_digamma_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_Scalar_lerp_Scalar(const at::Tensor & self, const at::Tensor & end, const at::Scalar & weight) {
    // No device check


  // DeviceGuard omitted
  return at::native::lerp_cpu_scalar(self, end, weight);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_out_lerp_out_Scalar_out(const at::Tensor & self, const at::Tensor & end, const at::Scalar & weight, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::lerp_cpu_scalar_out(self, end, weight, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_lerp__Scalar(at::Tensor & self, const at::Tensor & end, const at::Scalar & weight) {
    // No device check


  // DeviceGuard omitted
  return at::native::lerp_cpu_scalar_(self, end, weight);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_lerp_Tensor(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
    // No device check


  // DeviceGuard omitted
  return at::native::lerp_cpu_tensor(self, end, weight);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_lerp_out_Tensor_out(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::lerp_cpu_tensor_out(self, end, weight, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_lerp__Tensor(at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
    // No device check


  // DeviceGuard omitted
  return at::native::lerp_cpu_tensor_(self, end, weight);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__addbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::addbmm(self, batch1, batch2, beta, alpha);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_addbmm_out_out(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::addbmm_out(self, batch1, batch2, beta, alpha, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__addbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::addbmm_(self, batch1, batch2, beta, alpha);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_from_random__from(at::Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::random_(self, from, to, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_to_random__to(at::Tensor & self, int64_t to, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::random_(self, to, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__random_(at::Tensor & self, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::random_(self, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__uniform_(at::Tensor & self, double from, double to, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::uniform_(self, from, to, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__cauchy_(at::Tensor & self, double median, double sigma, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::cauchy_(self, median, sigma, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__log_normal_(at::Tensor & self, double mean, double std, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::log_normal_(self, mean, std, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__exponential_(at::Tensor & self, double lambd, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::exponential_(self, lambd, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__geometric_(at::Tensor & self, double p, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::geometric_(self, p, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_diag_out_out(const at::Tensor & self, int64_t diagonal, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::diag_cpu_out(self, diagonal, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__cross(const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::cross(self, other, dim);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_cross_out_out(const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::cross_out(self, other, dim, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__tril_indices(int64_t row, int64_t col, int64_t offset, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
    // No device check


  // DeviceGuard omitted
  return at::native::tril_indices_cpu(row, col, offset, dtype, layout, device, pin_memory);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__triu_indices(int64_t row, int64_t col, int64_t offset, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
    // No device check


  // DeviceGuard omitted
  return at::native::triu_indices_cpu(row, col, offset, dtype, layout, device, pin_memory);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__trace(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::trace_cpu(self);
}

} // anonymous namespace
struct structured_ne_Scalar_out_functional final : public at::native::structured_ne_Scalar_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ne_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ne_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_ne_Scalar_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_ne_Scalar_out_out final : public at::native::structured_ne_Scalar_out {
    structured_ne_Scalar_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ne_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ne_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_ne_Scalar_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_ne_Scalar_out_inplace final : public at::native::structured_ne_Scalar_out {
    structured_ne_Scalar_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ne_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ne__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_ne_Scalar_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_ne_Tensor_out_functional final : public at::native::structured_ne_Tensor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ne_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ne_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_ne_Tensor_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_ne_Tensor_out_out final : public at::native::structured_ne_Tensor_out {
    structured_ne_Tensor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ne_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ne_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_ne_Tensor_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_ne_Tensor_out_inplace final : public at::native::structured_ne_Tensor_out {
    structured_ne_Tensor_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ne_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ne__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_ne_Tensor_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_ge_Scalar_out_functional final : public at::native::structured_ge_Scalar_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ge_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ge_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_ge_Scalar_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_ge_Scalar_out_out final : public at::native::structured_ge_Scalar_out {
    structured_ge_Scalar_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ge_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ge_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_ge_Scalar_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_ge_Scalar_out_inplace final : public at::native::structured_ge_Scalar_out {
    structured_ge_Scalar_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ge_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ge__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_ge_Scalar_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_ge_Tensor_out_functional final : public at::native::structured_ge_Tensor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ge_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ge_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_ge_Tensor_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_ge_Tensor_out_out final : public at::native::structured_ge_Tensor_out {
    structured_ge_Tensor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ge_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ge_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_ge_Tensor_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_ge_Tensor_out_inplace final : public at::native::structured_ge_Tensor_out {
    structured_ge_Tensor_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_ge_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ge__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_ge_Tensor_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_le_Scalar_out_functional final : public at::native::structured_le_Scalar_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_le_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_le_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_le_Scalar_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_le_Scalar_out_out final : public at::native::structured_le_Scalar_out {
    structured_le_Scalar_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_le_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_le_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_le_Scalar_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_le_Scalar_out_inplace final : public at::native::structured_le_Scalar_out {
    structured_le_Scalar_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_le_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_le__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_le_Scalar_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_le_Tensor_out_functional final : public at::native::structured_le_Tensor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_le_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_le_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_le_Tensor_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_le_Tensor_out_out final : public at::native::structured_le_Tensor_out {
    structured_le_Tensor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_le_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_le_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_le_Tensor_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_le_Tensor_out_inplace final : public at::native::structured_le_Tensor_out {
    structured_le_Tensor_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_le_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_le__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_le_Tensor_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_gt_Scalar_out_functional final : public at::native::structured_gt_Scalar_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gt_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gt_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_gt_Scalar_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_gt_Scalar_out_out final : public at::native::structured_gt_Scalar_out {
    structured_gt_Scalar_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gt_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gt_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_gt_Scalar_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_gt_Scalar_out_inplace final : public at::native::structured_gt_Scalar_out {
    structured_gt_Scalar_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gt_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gt__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_gt_Scalar_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_gt_Tensor_out_functional final : public at::native::structured_gt_Tensor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gt_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gt_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_gt_Tensor_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_gt_Tensor_out_out final : public at::native::structured_gt_Tensor_out {
    structured_gt_Tensor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gt_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gt_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_gt_Tensor_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_gt_Tensor_out_inplace final : public at::native::structured_gt_Tensor_out {
    structured_gt_Tensor_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_gt_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gt__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_gt_Tensor_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_lt_Scalar_out_functional final : public at::native::structured_lt_Scalar_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lt_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_lt_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_lt_Scalar_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_lt_Scalar_out_out final : public at::native::structured_lt_Scalar_out {
    structured_lt_Scalar_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lt_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lt_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_lt_Scalar_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_lt_Scalar_out_inplace final : public at::native::structured_lt_Scalar_out {
    structured_lt_Scalar_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lt_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lt__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_lt_Scalar_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_lt_Tensor_out_functional final : public at::native::structured_lt_Tensor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lt_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_lt_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_lt_Tensor_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_lt_Tensor_out_out final : public at::native::structured_lt_Tensor_out {
    structured_lt_Tensor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lt_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lt_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_lt_Tensor_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_lt_Tensor_out_inplace final : public at::native::structured_lt_Tensor_out {
    structured_lt_Tensor_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lt_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lt__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_lt_Tensor_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__take(const at::Tensor & self, const at::Tensor & index) {
    // No device check


  // DeviceGuard omitted
  return at::native::take(self, index);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_take_out_out(const at::Tensor & self, const at::Tensor & index, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::take_out(self, index, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index) {
    // No device check


  // DeviceGuard omitted
  return at::native::index_select_cpu_(self, dim, index);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_index_select_out_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::index_select_out_cpu_(self, dim, index, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__masked_select(const at::Tensor & self, const at::Tensor & mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::masked_select_cpu(self, mask);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_masked_select_out_out(const at::Tensor & self, const at::Tensor & mask, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::masked_select_out_cpu(self, mask, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__nonzero(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::nonzero_cpu(self);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_nonzero_out_out(const at::Tensor & self, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::nonzero_out_cpu(self, out);
}

} // anonymous namespace
struct structured_gather_out_functional final : public at::native::structured_gather_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gather(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
structured_gather_out_functional op;
op.meta(self, dim, index, sparse_grad);
op.impl(self, dim, index, sparse_grad, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_gather_out_out final : public at::native::structured_gather_out {
    structured_gather_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gather_out_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad, at::Tensor & out) {
structured_gather_out_out op(out);
op.meta(self, dim, index, sparse_grad);
op.impl(self, dim, index, sparse_grad, op.outputs_[0]);
return out;
}
struct structured_addcmul_out_functional final : public at::native::structured_addcmul_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_addcmul_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
structured_addcmul_out_functional op;
op.meta(self, tensor1, tensor2, value);
op.impl(self, tensor1, tensor2, value, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_addcmul_out_out final : public at::native::structured_addcmul_out {
    structured_addcmul_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_addcmul_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addcmul_out_out(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out) {
structured_addcmul_out_out op(out);
op.meta(self, tensor1, tensor2, value);
op.impl(self, tensor1, tensor2, value, op.outputs_[0]);
return out;
}
struct structured_addcmul_out_inplace final : public at::native::structured_addcmul_out {
    structured_addcmul_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_addcmul_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
structured_addcmul_out_inplace op(self);
op.meta(self, tensor1, tensor2, value);
op.impl(self, tensor1, tensor2, value, op.outputs_[0]);
return self;
}
struct structured_addcdiv_out_functional final : public at::native::structured_addcdiv_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_addcdiv_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
structured_addcdiv_out_functional op;
op.meta(self, tensor1, tensor2, value);
op.impl(self, tensor1, tensor2, value, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_addcdiv_out_out final : public at::native::structured_addcdiv_out {
    structured_addcdiv_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_addcdiv_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addcdiv_out_out(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out) {
structured_addcdiv_out_out op(out);
op.meta(self, tensor1, tensor2, value);
op.impl(self, tensor1, tensor2, value, op.outputs_[0]);
return out;
}
struct structured_addcdiv_out_inplace final : public at::native::structured_addcdiv_out {
    structured_addcdiv_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_addcdiv_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
structured_addcdiv_out_inplace op(self);
op.meta(self, tensor1, tensor2, value);
op.impl(self, tensor1, tensor2, value, op.outputs_[0]);
return self;
}
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__lstsq(const at::Tensor & self, const at::Tensor & A) {
    // No device check


  // DeviceGuard omitted
  return at::native::legacy_lstsq(self, A);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_X_lstsq_out_X(const at::Tensor & self, const at::Tensor & A, at::Tensor & X, at::Tensor & qr) {
    // No device check


  // DeviceGuard omitted
  return at::native::legacy_lstsq_out(self, A, X, qr);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__triangular_solve(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) {
    // No device check


  // DeviceGuard omitted
  return at::native::triangular_solve(self, A, upper, transpose, unitriangular);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_X_triangular_solve_out_X(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular, at::Tensor & X, at::Tensor & M) {
    // No device check


  // DeviceGuard omitted
  return at::native::triangular_solve_out(self, A, upper, transpose, unitriangular, X, M);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper___symeig_helper(const at::Tensor & self, bool eigenvectors, bool upper) {
    // No device check


  // DeviceGuard omitted
  return at::native::_symeig_helper_cpu(self, eigenvectors, upper);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper___svd_helper(const at::Tensor & self, bool some, bool compute_uv) {
    // No device check


  // DeviceGuard omitted
  return at::native::_svd_helper_cpu(self, some, compute_uv);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__cholesky(const at::Tensor & self, bool upper) {
    // No device check


  // DeviceGuard omitted
  return at::native::cholesky(self, upper);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_cholesky_out_out(const at::Tensor & self, bool upper, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::cholesky_out(self, upper, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___cholesky_solve_helper(const at::Tensor & self, const at::Tensor & A, bool upper) {
    // No device check


  // DeviceGuard omitted
  return at::native::_cholesky_solve_helper_cpu(self, A, upper);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper___solve_helper(const at::Tensor & self, const at::Tensor & A) {
    // No device check


  // DeviceGuard omitted
  return at::native::_solve_helper_cpu(self, A);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__cholesky_inverse(const at::Tensor & self, bool upper) {
    // No device check


  // DeviceGuard omitted
  return at::native::cholesky_inverse(self, upper);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_cholesky_inverse_out_out(const at::Tensor & self, bool upper, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::cholesky_inverse_out(self, upper, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__geqrf(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::geqrf(self);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_a_geqrf_out_a(const at::Tensor & self, at::Tensor & a, at::Tensor & tau) {
    // No device check


  // DeviceGuard omitted
  return at::native::geqrf_out(self, a, tau);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__ormqr(const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) {
    // No device check


  // DeviceGuard omitted
  return at::native::ormqr(self, input2, input3, left, transpose);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_ormqr_out_out(const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::ormqr_out(self, input2, input3, left, transpose, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper___lu_with_info(const at::Tensor & self, bool pivot, bool check_errors) {
    // No device check


  // DeviceGuard omitted
  return at::native::_lu_with_info(self, pivot, check_errors);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__lu_solve(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) {
    // No device check


  // DeviceGuard omitted
  return at::native::lu_solve(self, LU_data, LU_pivots);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_lu_solve_out_out(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::lu_solve_out(self, LU_data, LU_pivots, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__lu_unpack(const at::Tensor & LU_data, const at::Tensor & LU_pivots, bool unpack_data, bool unpack_pivots) {
    // No device check


  // DeviceGuard omitted
  return at::native::lu_unpack(LU_data, LU_pivots, unpack_data, unpack_pivots);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> wrapper_out_lu_unpack_out_out(const at::Tensor & LU_data, const at::Tensor & LU_pivots, bool unpack_data, bool unpack_pivots, at::Tensor & P, at::Tensor & L, at::Tensor & U) {
    // No device check


  // DeviceGuard omitted
  return at::native::lu_unpack_out(LU_data, LU_pivots, unpack_data, unpack_pivots, P, L, U);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__multinomial(const at::Tensor & self, int64_t num_samples, bool replacement, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::multinomial(self, num_samples, replacement, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_multinomial_out_out(const at::Tensor & self, int64_t num_samples, bool replacement, c10::optional<at::Generator> generator, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::multinomial_out(self, num_samples, replacement, generator, out);
}

} // anonymous namespace
struct structured_lgamma_out_functional final : public at::native::structured_lgamma_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lgamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_lgamma(const at::Tensor & self) {
structured_lgamma_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_lgamma_out_out final : public at::native::structured_lgamma_out {
    structured_lgamma_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lgamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lgamma_out_out(const at::Tensor & self, at::Tensor & out) {
structured_lgamma_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_lgamma_out_inplace final : public at::native::structured_lgamma_out {
    structured_lgamma_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_lgamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lgamma_(at::Tensor & self) {
structured_lgamma_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_polygamma_out_functional final : public at::native::structured_polygamma_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_polygamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_polygamma(int64_t n, const at::Tensor & self) {
structured_polygamma_out_functional op;
op.meta(n, self);
op.impl(n, self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_polygamma_out_out final : public at::native::structured_polygamma_out {
    structured_polygamma_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_polygamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_polygamma_out_out(int64_t n, const at::Tensor & self, at::Tensor & out) {
structured_polygamma_out_out op(out);
op.meta(n, self);
op.impl(n, self, op.outputs_[0]);
return out;
}
struct structured_erfinv_out_functional final : public at::native::structured_erfinv_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_erfinv_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_erfinv(const at::Tensor & self) {
structured_erfinv_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_erfinv_out_out final : public at::native::structured_erfinv_out {
    structured_erfinv_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_erfinv_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erfinv_out_out(const at::Tensor & self, at::Tensor & out) {
structured_erfinv_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_erfinv_out_inplace final : public at::native::structured_erfinv_out {
    structured_erfinv_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_erfinv_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erfinv_(at::Tensor & self) {
structured_erfinv_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_i0_out_functional final : public at::native::structured_i0_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_i0_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_i0(const at::Tensor & self) {
structured_i0_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_i0_out_out final : public at::native::structured_i0_out {
    structured_i0_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_i0_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_i0_out_out(const at::Tensor & self, at::Tensor & out) {
structured_i0_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_i0_out_inplace final : public at::native::structured_i0_out {
    structured_i0_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_i0_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_i0_(at::Tensor & self) {
structured_i0_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_sign_out_functional final : public at::native::structured_sign_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sign_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sign(const at::Tensor & self) {
structured_sign_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sign_out_out final : public at::native::structured_sign_out {
    structured_sign_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sign_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sign_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sign_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_sign_out_inplace final : public at::native::structured_sign_out {
    structured_sign_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sign_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sign_(at::Tensor & self) {
structured_sign_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_signbit_out_functional final : public at::native::structured_signbit_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_signbit_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_signbit(const at::Tensor & self) {
structured_signbit_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_signbit_out_out final : public at::native::structured_signbit_out {
    structured_signbit_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_signbit_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_signbit_out_out(const at::Tensor & self, at::Tensor & out) {
structured_signbit_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_atan2_out_functional final : public at::native::structured_atan2_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_atan2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_atan2(const at::Tensor & self, const at::Tensor & other) {
structured_atan2_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_atan2_out_out final : public at::native::structured_atan2_out {
    structured_atan2_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_atan2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atan2_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_atan2_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_atan2_out_inplace final : public at::native::structured_atan2_out {
    structured_atan2_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_atan2_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atan2_(at::Tensor & self, const at::Tensor & other) {
structured_atan2_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__histc(const at::Tensor & self, int64_t bins, const at::Scalar & min, const at::Scalar & max) {
    // No device check


  // DeviceGuard omitted
  return at::native::histogram_histc_cpu(self, bins, min, max);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_histc_out_out(const at::Tensor & self, int64_t bins, const at::Scalar & min, const at::Scalar & max, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::histogram_histc_cpu_out(self, bins, min, max, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_bins_tensor_histogram_bins_tensor(const at::Tensor & self, const at::Tensor & bins, const c10::optional<at::Tensor> & weight, bool density) {
    // No device check


  // DeviceGuard omitted
  return at::native::histogram_cpu(self, bins, weight, density);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_bins_tensor_out_histogram_out_bins_tensor_out(const at::Tensor & self, const at::Tensor & bins, const c10::optional<at::Tensor> & weight, bool density, at::Tensor & hist, at::Tensor & bin_edges) {
    // No device check


  // DeviceGuard omitted
  return at::native::histogram_out_cpu(self, bins, weight, density, hist, bin_edges);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_bin_ct_histogram_bin_ct(const at::Tensor & self, int64_t bins, c10::optional<at::ArrayRef<double>> range, const c10::optional<at::Tensor> & weight, bool density) {
    // No device check


  // DeviceGuard omitted
  return at::native::histogram_cpu(self, bins, range, weight, density);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_bin_ct_out_histogram_out_bin_ct_out(const at::Tensor & self, int64_t bins, c10::optional<at::ArrayRef<double>> range, const c10::optional<at::Tensor> & weight, bool density, at::Tensor & hist, at::Tensor & bin_edges) {
    // No device check


  // DeviceGuard omitted
  return at::native::histogram_out_cpu(self, bins, range, weight, density, hist, bin_edges);
}

} // anonymous namespace
struct structured_fmod_out_functional final : public at::native::structured_fmod_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_fmod_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_fmod_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_fmod_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_fmod_out_out final : public at::native::structured_fmod_out {
    structured_fmod_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_fmod_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_fmod_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_fmod_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_fmod_out_inplace final : public at::native::structured_fmod_out {
    structured_fmod_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_fmod_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_fmod__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_fmod_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_hypot_out_functional final : public at::native::structured_hypot_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hypot_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hypot(const at::Tensor & self, const at::Tensor & other) {
structured_hypot_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_hypot_out_out final : public at::native::structured_hypot_out {
    structured_hypot_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hypot_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hypot_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_hypot_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_hypot_out_inplace final : public at::native::structured_hypot_out {
    structured_hypot_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hypot_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hypot_(at::Tensor & self, const at::Tensor & other) {
structured_hypot_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_igamma_out_functional final : public at::native::structured_igamma_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_igamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_igamma(const at::Tensor & self, const at::Tensor & other) {
structured_igamma_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_igamma_out_out final : public at::native::structured_igamma_out {
    structured_igamma_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_igamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_igamma_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_igamma_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_igamma_out_inplace final : public at::native::structured_igamma_out {
    structured_igamma_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_igamma_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_igamma_(at::Tensor & self, const at::Tensor & other) {
structured_igamma_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_igammac_out_functional final : public at::native::structured_igammac_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_igammac_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_igammac(const at::Tensor & self, const at::Tensor & other) {
structured_igammac_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_igammac_out_out final : public at::native::structured_igammac_out {
    structured_igammac_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_igammac_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_igammac_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_igammac_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_igammac_out_inplace final : public at::native::structured_igammac_out {
    structured_igammac_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_igammac_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_igammac_(at::Tensor & self, const at::Tensor & other) {
structured_igammac_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_nextafter_out_functional final : public at::native::structured_nextafter_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_nextafter_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_nextafter(const at::Tensor & self, const at::Tensor & other) {
structured_nextafter_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_nextafter_out_out final : public at::native::structured_nextafter_out {
    structured_nextafter_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_nextafter_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_nextafter_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_nextafter_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_nextafter_out_inplace final : public at::native::structured_nextafter_out {
    structured_nextafter_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_nextafter_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_nextafter_(at::Tensor & self, const at::Tensor & other) {
structured_nextafter_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
struct structured_remainder_out_functional final : public at::native::structured_remainder_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_remainder_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_remainder_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_remainder_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_remainder_out_out final : public at::native::structured_remainder_out {
    structured_remainder_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_remainder_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_remainder_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_remainder_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_remainder_out_inplace final : public at::native::structured_remainder_out {
    structured_remainder_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_remainder_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_remainder__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_remainder_out_inplace op(self);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper_Scalar_Tensor_remainder_Scalar_Tensor(const at::Scalar & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::remainder(self, other);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__min(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::min(self);
}

} // anonymous namespace
struct structured_fmin_out_functional final : public at::native::structured_fmin_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_fmin_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_fmin(const at::Tensor & self, const at::Tensor & other) {
structured_fmin_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_fmin_out_out final : public at::native::structured_fmin_out {
    structured_fmin_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_fmin_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_fmin_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_fmin_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
namespace {

at::Tensor wrapper__max(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::max(self);
}

} // anonymous namespace
struct structured_fmax_out_functional final : public at::native::structured_fmax_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_fmax_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_fmax(const at::Tensor & self, const at::Tensor & other) {
structured_fmax_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_fmax_out_out final : public at::native::structured_fmax_out {
    structured_fmax_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_fmax_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_fmax_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_fmax_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_maximum_out_functional final : public at::native::structured_maximum_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_maximum_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_maximum(const at::Tensor & self, const at::Tensor & other) {
structured_maximum_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_maximum_out_out final : public at::native::structured_maximum_out {
    structured_maximum_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_maximum_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_maximum_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_maximum_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_minimum_out_functional final : public at::native::structured_minimum_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_minimum_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_minimum(const at::Tensor & self, const at::Tensor & other) {
structured_minimum_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_minimum_out_out final : public at::native::structured_minimum_out {
    structured_minimum_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_minimum_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_minimum_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_minimum_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__sort(const at::Tensor & self, int64_t dim, bool descending) {
    // No device check


  // DeviceGuard omitted
  return at::native::sort_cpu(self, dim, descending);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_values_sort_out_values(const at::Tensor & self, int64_t dim, bool descending, at::Tensor & values, at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::sort_out_cpu(self, dim, descending, values, indices);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_stable_sort_stable(const at::Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending) {
    // No device check


  // DeviceGuard omitted
  return at::native::sort_cpu_stable(self, stable, dim, descending);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_values_stable_sort_out_values_stable(const at::Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending, at::Tensor & values, at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::sort_out_cpu_stable(self, stable, dim, descending, values, indices);
}

} // anonymous namespace
struct structured_topk_out_cpu_functional final : public at::native::structured_topk_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
structured_topk_out_cpu_functional op;
op.meta(self, k, dim, largest, sorted);
op.impl(self, k, dim, largest, sorted, *op.outputs_[0], *op.outputs_[1]);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_topk_out_cpu_out final : public at::native::structured_topk_out_cpu {
    structured_topk_out_cpu_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_topk_out_values(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, at::Tensor & values, at::Tensor & indices) {
structured_topk_out_cpu_out op(values, indices);
op.meta(self, k, dim, largest, sorted);
op.impl(self, k, dim, largest, sorted, op.outputs_[0], op.outputs_[1]);
return std::forward_as_tuple(values, indices);
}
struct structured_all_all_out_functional final : public at::native::structured_all_all_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_all(const at::Tensor & self) {
structured_all_all_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_all_all_out_out final : public at::native::structured_all_all_out {
    structured_all_all_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_all_out_all_out(const at::Tensor & self, at::Tensor & out) {
structured_all_all_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_any_all_out_functional final : public at::native::structured_any_all_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_any(const at::Tensor & self) {
structured_any_all_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_any_all_out_out final : public at::native::structured_any_all_out {
    structured_any_all_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_any_out_all_out(const at::Tensor & self, at::Tensor & out) {
structured_any_all_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_renorm_out_functional final : public at::native::structured_renorm_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_renorm(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
structured_renorm_out_functional op;
op.meta(self, p, dim, maxnorm);
op.impl(self, p, dim, maxnorm, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_renorm_out_out final : public at::native::structured_renorm_out {
    structured_renorm_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_renorm_out_out(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm, at::Tensor & out) {
structured_renorm_out_out op(out);
op.meta(self, p, dim, maxnorm);
op.impl(self, p, dim, maxnorm, op.outputs_[0]);
return out;
}
struct structured_renorm_out_inplace final : public at::native::structured_renorm_out {
    structured_renorm_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_renorm_(at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
structured_renorm_out_inplace op(self);
op.meta(self, p, dim, maxnorm);
op.impl(self, p, dim, maxnorm, op.outputs_[0]);
return self;
}
namespace {

at::Tensor wrapper__unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step) {
    // No device check


  // DeviceGuard omitted
  return at::native::unfold(self, dimension, size, step);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__unfold_backward(const at::Tensor & grad_in, at::IntArrayRef input_sizes, int64_t dim, int64_t size, int64_t step) {
    // No device check


  // DeviceGuard omitted
  return at::native::unfold_backward(grad_in, input_sizes, dim, size, step);
}

} // anonymous namespace
namespace {

bool wrapper__equal(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::cpu_equal(self, other);
}

} // anonymous namespace
struct structured_pow_Tensor_Tensor_out_functional final : public at::native::structured_pow_Tensor_Tensor_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_pow_Tensor_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_pow_Tensor_Tensor(const at::Tensor & self, const at::Tensor & exponent) {
structured_pow_Tensor_Tensor_out_functional op;
op.meta(self, exponent);
op.impl(self, exponent, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_pow_Tensor_Tensor_out_out final : public at::native::structured_pow_Tensor_Tensor_out {
    structured_pow_Tensor_Tensor_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_pow_Tensor_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow_out_Tensor_Tensor_out(const at::Tensor & self, const at::Tensor & exponent, at::Tensor & out) {
structured_pow_Tensor_Tensor_out_out op(out);
op.meta(self, exponent);
op.impl(self, exponent, op.outputs_[0]);
return out;
}
struct structured_pow_Tensor_Tensor_out_inplace final : public at::native::structured_pow_Tensor_Tensor_out {
    structured_pow_Tensor_Tensor_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_pow_Tensor_Tensor_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow__Tensor(at::Tensor & self, const at::Tensor & exponent) {
structured_pow_Tensor_Tensor_out_inplace op(self);
op.meta(self, exponent);
op.impl(self, exponent, op.outputs_[0]);
return self;
}
struct structured_pow_Scalar_out_functional final : public at::native::structured_pow_Scalar_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_pow_Scalar(const at::Scalar & self, const at::Tensor & exponent) {
structured_pow_Scalar_out_functional op;
op.meta(self, exponent);
op.impl(self, exponent, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_pow_Scalar_out_out final : public at::native::structured_pow_Scalar_out {
    structured_pow_Scalar_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow_out_Scalar_out(const at::Scalar & self, const at::Tensor & exponent, at::Tensor & out) {
structured_pow_Scalar_out_out op(out);
op.meta(self, exponent);
op.impl(self, exponent, op.outputs_[0]);
return out;
}
struct structured_pow_Tensor_Scalar_out_functional final : public at::native::structured_pow_Tensor_Scalar_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_pow_Tensor_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_pow_Tensor_Scalar(const at::Tensor & self, const at::Scalar & exponent) {
structured_pow_Tensor_Scalar_out_functional op;
op.meta(self, exponent);
op.impl(self, exponent, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_pow_Tensor_Scalar_out_out final : public at::native::structured_pow_Tensor_Scalar_out {
    structured_pow_Tensor_Scalar_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_pow_Tensor_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow_out_Tensor_Scalar_out(const at::Tensor & self, const at::Scalar & exponent, at::Tensor & out) {
structured_pow_Tensor_Scalar_out_out op(out);
op.meta(self, exponent);
op.impl(self, exponent, op.outputs_[0]);
return out;
}
struct structured_pow_Tensor_Scalar_out_inplace final : public at::native::structured_pow_Tensor_Scalar_out {
    structured_pow_Tensor_Scalar_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_pow_Tensor_Scalar_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow__Scalar(at::Tensor & self, const at::Scalar & exponent) {
structured_pow_Tensor_Scalar_out_inplace op(self);
op.meta(self, exponent);
op.impl(self, exponent, op.outputs_[0]);
return self;
}
namespace {

at::Tensor & wrapper__normal_(at::Tensor & self, double mean, double std, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::normal_(self, mean, std, generator);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_float_normal_Tensor_float(const at::Tensor & mean, double std, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::normal(mean, std, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_float_out_normal_out_Tensor_float_out(const at::Tensor & mean, double std, c10::optional<at::Generator> generator, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::normal_out(mean, std, generator, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_float_Tensor_normal_float_Tensor(double mean, const at::Tensor & std, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::normal(mean, std, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_float_Tensor_out_normal_out_float_Tensor_out(double mean, const at::Tensor & std, c10::optional<at::Generator> generator, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::normal_out(mean, std, generator, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_Tensor_normal_Tensor_Tensor(const at::Tensor & mean, const at::Tensor & std, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::normal(mean, std, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_Tensor_out_normal_out_Tensor_Tensor_out(const at::Tensor & mean, const at::Tensor & std, c10::optional<at::Generator> generator, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::normal_out(mean, std, generator, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper___index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
    // No device check


  // DeviceGuard omitted
  return at::native::_index_copy_impl_(self, dim, index, source);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___cat(at::TensorList tensors, int64_t dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::_cat_cpu(tensors, dim);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out__cat_out_out(at::TensorList tensors, int64_t dim, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::_cat_out_cpu(tensors, dim, out);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_Scalar__foreach_add_Scalar(at::TensorList tensors, const at::Scalar & scalar) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_add_scalar_kernel_slow(tensors, scalar);
}

} // anonymous namespace
namespace {

void wrapper_Scalar__foreach_add__Scalar(at::TensorList self, const at::Scalar & scalar) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_add_scalar_kernel_slow_(self, scalar);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_Scalar__foreach_sub_Scalar(at::TensorList tensors, const at::Scalar & scalar) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sub_scalar_kernel_slow(tensors, scalar);
}

} // anonymous namespace
namespace {

void wrapper_Scalar__foreach_sub__Scalar(at::TensorList self, const at::Scalar & scalar) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sub_scalar_kernel_slow_(self, scalar);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_Scalar__foreach_mul_Scalar(at::TensorList tensors, const at::Scalar & scalar) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_mul_scalar_kernel_slow(tensors, scalar);
}

} // anonymous namespace
namespace {

void wrapper_Scalar__foreach_mul__Scalar(at::TensorList self, const at::Scalar & scalar) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_mul_scalar_kernel_slow_(self, scalar);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_Scalar__foreach_div_Scalar(at::TensorList tensors, const at::Scalar & scalar) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_div_scalar_kernel_slow(tensors, scalar);
}

} // anonymous namespace
namespace {

void wrapper_Scalar__foreach_div__Scalar(at::TensorList self, const at::Scalar & scalar) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_div_scalar_kernel_slow_(self, scalar);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_List__foreach_add_List(at::TensorList tensors1, at::TensorList tensors2, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_add_list_kernel_slow(tensors1, tensors2, alpha);
}

} // anonymous namespace
namespace {

void wrapper_List__foreach_add__List(at::TensorList self, at::TensorList other, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_add_list_kernel_slow_(self, other, alpha);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_List__foreach_sub_List(at::TensorList tensors1, at::TensorList tensors2, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sub_list_kernel_slow(tensors1, tensors2, alpha);
}

} // anonymous namespace
namespace {

void wrapper_List__foreach_sub__List(at::TensorList self, at::TensorList other, const at::Scalar & alpha) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sub_list_kernel_slow_(self, other, alpha);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_List__foreach_mul_List(at::TensorList tensors1, at::TensorList tensors2) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_mul_list_kernel_slow(tensors1, tensors2);
}

} // anonymous namespace
namespace {

void wrapper_List__foreach_mul__List(at::TensorList self, at::TensorList other) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_mul_list_kernel_slow_(self, other);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_List__foreach_div_List(at::TensorList tensors1, at::TensorList tensors2) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_div_list_kernel_slow(tensors1, tensors2);
}

} // anonymous namespace
namespace {

void wrapper_List__foreach_div__List(at::TensorList self, at::TensorList other) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_div_list_kernel_slow_(self, other);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_ScalarList__foreach_add_ScalarList(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_add_scalarlist_kernel_slow(tensors, scalars);
}

} // anonymous namespace
namespace {

void wrapper_ScalarList__foreach_add__ScalarList(at::TensorList self, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_add_scalarlist_kernel_slow_(self, scalars);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_ScalarList__foreach_sub_ScalarList(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sub_scalarlist_kernel_slow(tensors, scalars);
}

} // anonymous namespace
namespace {

void wrapper_ScalarList__foreach_sub__ScalarList(at::TensorList self, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sub_scalarlist_kernel_slow_(self, scalars);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_ScalarList__foreach_div_ScalarList(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_div_scalarlist_kernel_slow(tensors, scalars);
}

} // anonymous namespace
namespace {

void wrapper_ScalarList__foreach_div__ScalarList(at::TensorList self, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_div_scalarlist_kernel_slow_(self, scalars);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_ScalarList__foreach_mul_ScalarList(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_mul_scalarlist_kernel_slow(tensors, scalars);
}

} // anonymous namespace
namespace {

void wrapper_ScalarList__foreach_mul__ScalarList(at::TensorList self, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_mul_scalarlist_kernel_slow_(self, scalars);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_exp(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_exp_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_zero_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_zero_slow_(self);
}

} // anonymous namespace
namespace {

void wrapper___foreach_exp_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_exp_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_sqrt(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sqrt_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_sqrt_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sqrt_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_abs(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_abs_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_abs_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_abs_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_acos(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_acos_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_acos_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_acos_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_asin(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_asin_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_asin_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_asin_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_atan(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_atan_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_atan_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_atan_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_ceil(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_ceil_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_ceil_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_ceil_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_cos(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_cos_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_cos_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_cos_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_cosh(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_cosh_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_cosh_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_cosh_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_erf(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_erf_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_erf_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_erf_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_erfc(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_erfc_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_erfc_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_erfc_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_expm1(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_expm1_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_expm1_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_expm1_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_floor(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_floor_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_floor_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_floor_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_log(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_log_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_log_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_log_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_log10(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_log10_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_log10_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_log10_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_log1p(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_log1p_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_log1p_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_log1p_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_log2(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_log2_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_log2_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_log2_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_neg(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_neg_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_neg_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_neg_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_tan(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_tan_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_tan_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_tan_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_tanh(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_tanh_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_tanh_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_tanh_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_sin(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sin_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_sin_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sin_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_sinh(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sinh_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_sinh_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sinh_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_round(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_round_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_round_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_round_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_lgamma(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_lgamma_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_lgamma_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_lgamma_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_frac(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_frac_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_frac_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_frac_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_reciprocal(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_reciprocal_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_reciprocal_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_reciprocal_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_sigmoid(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sigmoid_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_sigmoid_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_sigmoid_slow_(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper___foreach_trunc(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_trunc_slow(tensors);
}

} // anonymous namespace
namespace {

void wrapper___foreach_trunc_(at::TensorList self) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_trunc_slow_(self);
}

} // anonymous namespace
namespace {

void wrapper_Scalar__foreach_addcdiv__Scalar(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_addcdiv_scalar_slow_(self, tensor1, tensor2, value);
}

} // anonymous namespace
namespace {

void wrapper_Scalar__foreach_addcmul__Scalar(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_addcmul_scalar_slow_(self, tensor1, tensor2, value);
}

} // anonymous namespace
namespace {

void wrapper_ScalarList__foreach_addcdiv__ScalarList(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_addcdiv_scalarlist_slow_(self, tensor1, tensor2, scalars);
}

} // anonymous namespace
namespace {

void wrapper_ScalarList__foreach_addcmul__ScalarList(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_addcmul_scalarlist_slow_(self, tensor1, tensor2, scalars);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_Scalar__foreach_addcdiv_Scalar(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_addcdiv_scalar_slow(input, tensor1, tensor2, value);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_Scalar__foreach_addcmul_Scalar(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_addcmul_scalar_slow(input, tensor1, tensor2, value);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_ScalarList__foreach_addcdiv_ScalarList(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_addcdiv_scalarlist_slow(input, tensor1, tensor2, scalars);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_ScalarList__foreach_addcmul_ScalarList(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_addcmul_scalarlist_slow(input, tensor1, tensor2, scalars);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_List__foreach_maximum_List(at::TensorList tensors1, at::TensorList tensors2) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_maximum_slow(tensors1, tensors2);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_List__foreach_minimum_List(at::TensorList tensors1, at::TensorList tensors2) {
    // No device check


  // DeviceGuard omitted
  return at::native::foreach_tensor_minimum_slow(tensors1, tensors2);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_bucketize_Tensor(const at::Tensor & self, const at::Tensor & boundaries, bool out_int32, bool right) {
    // No device check


  // DeviceGuard omitted
  return at::native::bucketize_cpu(self, boundaries, out_int32, right);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_bucketize_out_Tensor_out(const at::Tensor & self, const at::Tensor & boundaries, bool out_int32, bool right, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::bucketize_out_cpu(self, boundaries, out_int32, right, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_bucketize_Scalar(const at::Scalar & self, const at::Tensor & boundaries, bool out_int32, bool right) {
    // No device check


  // DeviceGuard omitted
  return at::native::bucketize_cpu(self, boundaries, out_int32, right);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_searchsorted_Tensor(const at::Tensor & sorted_sequence, const at::Tensor & self, bool out_int32, bool right) {
    // No device check


  // DeviceGuard omitted
  return at::native::searchsorted_cpu(sorted_sequence, self, out_int32, right);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_searchsorted_out_Tensor_out(const at::Tensor & sorted_sequence, const at::Tensor & self, bool out_int32, bool right, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::searchsorted_out_cpu(sorted_sequence, self, out_int32, right, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_searchsorted_Scalar(const at::Tensor & sorted_sequence, const at::Scalar & self, bool out_int32, bool right) {
    // No device check


  // DeviceGuard omitted
  return at::native::searchsorted_cpu(sorted_sequence, self, out_int32, right);
}

} // anonymous namespace
struct structured__convert_indices_from_coo_to_csr_structured_cpu_functional final : public at::native::structured__convert_indices_from_coo_to_csr_structured_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__convert_indices_from_coo_to_csr(const at::Tensor & self, int64_t size, bool out_int32) {
structured__convert_indices_from_coo_to_csr_structured_cpu_functional op;
op.meta(self, size, out_int32);
op.impl(self, size, out_int32, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured__convert_indices_from_coo_to_csr_structured_cpu_out final : public at::native::structured__convert_indices_from_coo_to_csr_structured_cpu {
    structured__convert_indices_from_coo_to_csr_structured_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__convert_indices_from_coo_to_csr_out_out(const at::Tensor & self, int64_t size, bool out_int32, at::Tensor & out) {
structured__convert_indices_from_coo_to_csr_structured_cpu_out op(out);
op.meta(self, size, out_int32);
op.impl(self, size, out_int32, op.outputs_[0]);
return out;
}
namespace {

at::Tensor wrapper__mse_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
    // No device check


  // DeviceGuard omitted
  return at::native::mse_loss(self, target, reduction);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_mse_loss_out_out(const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::mse_loss_out(self, target, reduction, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__mse_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
    // No device check


  // DeviceGuard omitted
  return at::native::mse_loss_backward(grad_output, self, target, reduction);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_mse_loss_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::mse_loss_backward_out(grad_output, self, target, reduction, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_l1_loss_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::l1_loss_backward_out(grad_output, self, target, reduction, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__multi_margin_loss(const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction) {
    // No device check


  // DeviceGuard omitted
  return at::native::multi_margin_loss_cpu(self, target, p, margin, weight, reduction);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_multi_margin_loss_out_out(const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::multi_margin_loss_cpu_out(self, target, p, margin, weight, reduction, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__multi_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction) {
    // No device check


  // DeviceGuard omitted
  return at::native::multi_margin_loss_cpu_backward(grad_output, self, target, p, margin, weight, reduction);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_multi_margin_loss_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::multi_margin_loss_cpu_backward_out(grad_output, self, target, p, margin, weight, reduction, grad_input);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__multilabel_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
    // No device check


  // DeviceGuard omitted
  return at::native::multilabel_margin_loss_forward_cpu(self, target, reduction);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_output_multilabel_margin_loss_forward_out_output(const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & output, at::Tensor & is_target) {
    // No device check


  // DeviceGuard omitted
  return at::native::multilabel_margin_loss_forward_out_cpu(self, target, reduction, output, is_target);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__multilabel_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) {
    // No device check


  // DeviceGuard omitted
  return at::native::multilabel_margin_loss_backward_cpu(grad_output, self, target, reduction, is_target);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_multilabel_margin_loss_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::multilabel_margin_loss_backward_cpu_out(grad_output, self, target, reduction, is_target, grad_input);
}

} // anonymous namespace
struct structured_nll_loss_forward_out_cpu_functional final : public at::native::structured_nll_loss_forward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index) {
structured_nll_loss_forward_out_cpu_functional op;
op.meta(self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index);
op.impl(self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index, *op.outputs_[0], *op.outputs_[1]);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_nll_loss_forward_out_cpu_out final : public at::native::structured_nll_loss_forward_out_cpu {
    structured_nll_loss_forward_out_cpu_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_nll_loss_forward_out_output(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & output, at::Tensor & total_weight) {
structured_nll_loss_forward_out_cpu_out op(output, total_weight);
op.meta(self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index);
op.impl(self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index, op.outputs_[0], op.outputs_[1]);
return std::forward_as_tuple(output, total_weight);
}
struct structured_nll_loss_backward_out_cpu_functional final : public at::native::structured_nll_loss_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
structured_nll_loss_backward_out_cpu_functional op;
op.meta(grad_output, self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index, total_weight);
op.impl(grad_output, self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index, total_weight, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_nll_loss_backward_out_cpu_out final : public at::native::structured_nll_loss_backward_out_cpu {
    structured_nll_loss_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_nll_loss_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight, at::Tensor & grad_input) {
structured_nll_loss_backward_out_cpu_out op(grad_input);
op.meta(grad_output, self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index, total_weight);
op.impl(grad_output, self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index, total_weight, op.outputs_[0]);
return grad_input;
}
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__nll_loss2d_forward(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index) {
    // No device check


  // DeviceGuard omitted
  return at::native::nll_loss2d_forward_cpu(self, target, weight, reduction, ignore_index);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_output_nll_loss2d_forward_out_output(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & output, at::Tensor & total_weight) {
    // No device check


  // DeviceGuard omitted
  return at::native::nll_loss2d_forward_out_cpu(self, target, weight, reduction, ignore_index, output, total_weight);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__nll_loss2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
    // No device check


  // DeviceGuard omitted
  return at::native::nll_loss2d_backward_cpu(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_nll_loss2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::nll_loss2d_backward_out_cpu(grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__smooth_l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta) {
    // No device check


  // DeviceGuard omitted
  return at::native::smooth_l1_loss(self, target, reduction, beta);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_smooth_l1_loss_out_out(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::smooth_l1_loss_out(self, target, reduction, beta, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_smooth_l1_loss_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::smooth_l1_loss_backward_out(grad_output, self, target, reduction, beta, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__huber_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double delta) {
    // No device check


  // DeviceGuard omitted
  return at::native::huber_loss(self, target, reduction, delta);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_huber_loss_out_out(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double delta, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::huber_loss_out(self, target, reduction, delta, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_huber_loss_backward_out_out(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double delta, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::huber_loss_backward_out(grad_output, self, target, reduction, delta, grad_input);
}

} // anonymous namespace
struct structured_elu_out_functional final : public at::native::structured_elu_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_elu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_elu(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
structured_elu_out_functional op;
op.meta(self, alpha, scale, input_scale);
op.impl(self, alpha, scale, input_scale, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_elu_out_out final : public at::native::structured_elu_out {
    structured_elu_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_elu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_elu_out_out(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, at::Tensor & out) {
structured_elu_out_out op(out);
op.meta(self, alpha, scale, input_scale);
op.impl(self, alpha, scale, input_scale, op.outputs_[0]);
return out;
}
struct structured_elu_out_inplace final : public at::native::structured_elu_out {
    structured_elu_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_elu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_elu_(at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
structured_elu_out_inplace op(self);
op.meta(self, alpha, scale, input_scale);
op.impl(self, alpha, scale, input_scale, op.outputs_[0]);
return self;
}
struct structured_elu_backward_out_functional final : public at::native::structured_elu_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_elu_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_elu_backward(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result) {
structured_elu_backward_out_functional op;
op.meta(grad_output, alpha, scale, input_scale, is_result, self_or_result);
op.impl(grad_output, alpha, scale, input_scale, is_result, self_or_result, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_elu_backward_out_out final : public at::native::structured_elu_backward_out {
    structured_elu_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_elu_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_elu_backward_out_grad_input(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result, at::Tensor & grad_input) {
structured_elu_backward_out_out op(grad_input);
op.meta(grad_output, alpha, scale, input_scale, is_result, self_or_result);
op.impl(grad_output, alpha, scale, input_scale, is_result, self_or_result, op.outputs_[0]);
return grad_input;
}
struct structured_glu_out_functional final : public at::native::structured_glu_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_glu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_glu(const at::Tensor & self, int64_t dim) {
structured_glu_out_functional op;
op.meta(self, dim);
op.impl(self, dim, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_glu_out_out final : public at::native::structured_glu_out {
    structured_glu_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_glu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_glu_out_out(const at::Tensor & self, int64_t dim, at::Tensor & out) {
structured_glu_out_out op(out);
op.meta(self, dim);
op.impl(self, dim, op.outputs_[0]);
return out;
}
namespace {

at::Tensor wrapper__glu_backward(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::glu_backward_cpu(grad_output, self, dim);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_glu_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::glu_backward_cpu_out(grad_output, self, dim, grad_input);
}

} // anonymous namespace
struct structured_hardsigmoid_out_functional final : public at::native::structured_hardsigmoid_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hardsigmoid_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hardsigmoid(const at::Tensor & self) {
structured_hardsigmoid_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_hardsigmoid_out_out final : public at::native::structured_hardsigmoid_out {
    structured_hardsigmoid_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hardsigmoid_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardsigmoid_out_out(const at::Tensor & self, at::Tensor & out) {
structured_hardsigmoid_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_hardsigmoid_out_inplace final : public at::native::structured_hardsigmoid_out {
    structured_hardsigmoid_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hardsigmoid_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardsigmoid_(at::Tensor & self) {
structured_hardsigmoid_out_inplace op(self);
op.meta(self);
op.impl(self, op.outputs_[0]);
return self;
}
struct structured_hardsigmoid_backward_out_functional final : public at::native::structured_hardsigmoid_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hardsigmoid_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hardsigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self) {
structured_hardsigmoid_backward_out_functional op;
op.meta(grad_output, self);
op.impl(grad_output, self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_hardsigmoid_backward_out_out final : public at::native::structured_hardsigmoid_backward_out {
    structured_hardsigmoid_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_hardsigmoid_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardsigmoid_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
structured_hardsigmoid_backward_out_out op(grad_input);
op.meta(grad_output, self);
op.impl(grad_output, self, op.outputs_[0]);
return grad_input;
}
namespace {

at::Tensor wrapper__hardtanh(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardtanh(self, min_val, max_val);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_hardtanh_out_out(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardtanh_out(self, min_val, max_val, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__hardtanh_(at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardtanh_(self, min_val, max_val);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__hardtanh_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardtanh_backward(grad_output, self, min_val, max_val);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_hardtanh_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardtanh_backward_out(grad_output, self, min_val, max_val, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__hardswish(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardswish(self);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_hardswish_out_out(const at::Tensor & self, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardswish_out(self, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__hardswish_(at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardswish_(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__hardswish_backward(const at::Tensor & grad_output, const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardswish_backward(grad_output, self);
}

} // anonymous namespace
struct structured_leaky_relu_out_functional final : public at::native::structured_leaky_relu_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_leaky_relu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_leaky_relu(const at::Tensor & self, const at::Scalar & negative_slope) {
structured_leaky_relu_out_functional op;
op.meta(self, negative_slope);
op.impl(self, negative_slope, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_leaky_relu_out_out final : public at::native::structured_leaky_relu_out {
    structured_leaky_relu_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_leaky_relu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_leaky_relu_out_out(const at::Tensor & self, const at::Scalar & negative_slope, at::Tensor & out) {
structured_leaky_relu_out_out op(out);
op.meta(self, negative_slope);
op.impl(self, negative_slope, op.outputs_[0]);
return out;
}
struct structured_leaky_relu_out_inplace final : public at::native::structured_leaky_relu_out {
    structured_leaky_relu_out_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_leaky_relu_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_leaky_relu_(at::Tensor & self, const at::Scalar & negative_slope) {
structured_leaky_relu_out_inplace op(self);
op.meta(self, negative_slope);
op.impl(self, negative_slope, op.outputs_[0]);
return self;
}
struct structured_leaky_relu_backward_out_functional final : public at::native::structured_leaky_relu_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_leaky_relu_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result) {
structured_leaky_relu_backward_out_functional op;
op.meta(grad_output, self, negative_slope, self_is_result);
op.impl(grad_output, self, negative_slope, self_is_result, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_leaky_relu_backward_out_out final : public at::native::structured_leaky_relu_backward_out {
    structured_leaky_relu_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_leaky_relu_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_leaky_relu_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result, at::Tensor & grad_input) {
structured_leaky_relu_backward_out_out op(grad_input);
op.meta(grad_output, self, negative_slope, self_is_result);
op.impl(grad_output, self, negative_slope, self_is_result, op.outputs_[0]);
return grad_input;
}
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__log_sigmoid_forward(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::log_sigmoid_forward_cpu(self);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_output_log_sigmoid_forward_out_output(const at::Tensor & self, at::Tensor & output, at::Tensor & buffer) {
    // No device check


  // DeviceGuard omitted
  return at::native::log_sigmoid_forward_out_cpu(self, output, buffer);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__log_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) {
    // No device check


  // DeviceGuard omitted
  return at::native::log_sigmoid_backward_cpu(grad_output, self, buffer);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_log_sigmoid_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::log_sigmoid_backward_cpu_out(grad_output, self, buffer, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__rrelu_with_noise(const at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::rrelu_with_noise_cpu(self, noise, lower, upper, training, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_rrelu_with_noise_out_out(const at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, c10::optional<at::Generator> generator, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::rrelu_with_noise_out_cpu(self, noise, lower, upper, training, generator, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__rrelu_with_noise_(at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::rrelu_with_noise_cpu_(self, noise, lower, upper, training, generator);
}

} // anonymous namespace
struct structured_softplus_out_functional final : public at::native::structured_softplus_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_softplus_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_softplus(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold) {
structured_softplus_out_functional op;
op.meta(self, beta, threshold);
op.impl(self, beta, threshold, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_softplus_out_out final : public at::native::structured_softplus_out {
    structured_softplus_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_softplus_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_softplus_out_out(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, at::Tensor & out) {
structured_softplus_out_out op(out);
op.meta(self, beta, threshold);
op.impl(self, beta, threshold, op.outputs_[0]);
return out;
}
struct structured_softplus_backward_out_functional final : public at::native::structured_softplus_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_softplus_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output) {
structured_softplus_backward_out_functional op;
op.meta(grad_output, self, beta, threshold, output);
op.impl(grad_output, self, beta, threshold, output, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_softplus_backward_out_out final : public at::native::structured_softplus_backward_out {
    structured_softplus_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_softplus_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_softplus_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output, at::Tensor & grad_input) {
structured_softplus_backward_out_out op(grad_input);
op.meta(grad_output, self, beta, threshold, output);
op.impl(grad_output, self, beta, threshold, output, op.outputs_[0]);
return grad_input;
}
struct structured_softshrink_out_functional final : public at::native::structured_softshrink_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_softshrink_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_softshrink(const at::Tensor & self, const at::Scalar & lambd) {
structured_softshrink_out_functional op;
op.meta(self, lambd);
op.impl(self, lambd, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_softshrink_out_out final : public at::native::structured_softshrink_out {
    structured_softshrink_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_softshrink_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_softshrink_out_out(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out) {
structured_softshrink_out_out op(out);
op.meta(self, lambd);
op.impl(self, lambd, op.outputs_[0]);
return out;
}
struct structured_softshrink_backward_out_functional final : public at::native::structured_softshrink_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_softshrink_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd) {
structured_softshrink_backward_out_functional op;
op.meta(grad_output, self, lambd);
op.impl(grad_output, self, lambd, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_softshrink_backward_out_out final : public at::native::structured_softshrink_backward_out {
    structured_softshrink_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_softshrink_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_softshrink_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input) {
structured_softshrink_backward_out_out op(grad_input);
op.meta(grad_output, self, lambd);
op.impl(grad_output, self, lambd, op.outputs_[0]);
return grad_input;
}
namespace {

at::Tensor & wrapper_out_adaptive_avg_pool2d_out_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool2d_out_cpu(self, output_size, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool2d_cpu(self, output_size);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___adaptive_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool2d_backward_cpu(grad_output, self);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_adaptive_avg_pool3d_out_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool3d_out_cpu(self, output_size, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___adaptive_avg_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool3d_cpu(self, output_size);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_adaptive_avg_pool3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool3d_backward_out_cpu(grad_output, self, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___adaptive_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool3d_backward_cpu(grad_output, self);
}

} // anonymous namespace
struct structured_adaptive_max_pool2d_out_cpu_functional final : public at::native::structured_adaptive_max_pool2d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_adaptive_max_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
structured_adaptive_max_pool2d_out_cpu_functional op;
op.meta(self, output_size);
op.impl(self, output_size, *op.outputs_[0], *op.outputs_[1]);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_adaptive_max_pool2d_out_cpu_out final : public at::native::structured_adaptive_max_pool2d_out_cpu {
    structured_adaptive_max_pool2d_out_cpu_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_adaptive_max_pool2d_out_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices) {
structured_adaptive_max_pool2d_out_cpu_out op(out, indices);
op.meta(self, output_size);
op.impl(self, output_size, op.outputs_[0], op.outputs_[1]);
return std::forward_as_tuple(out, indices);
}
struct structured_adaptive_max_pool2d_backward_out_cpu_functional final : public at::native::structured_adaptive_max_pool2d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
structured_adaptive_max_pool2d_backward_out_cpu_functional op;
op.meta(grad_output, self, indices);
op.impl(grad_output, self, indices, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_adaptive_max_pool2d_backward_out_cpu_out final : public at::native::structured_adaptive_max_pool2d_backward_out_cpu {
    structured_adaptive_max_pool2d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_adaptive_max_pool2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input) {
structured_adaptive_max_pool2d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, self, indices);
op.impl(grad_output, self, indices, op.outputs_[0]);
return grad_input;
}
struct structured_adaptive_max_pool3d_out_cpu_functional final : public at::native::structured_adaptive_max_pool3d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_adaptive_max_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
structured_adaptive_max_pool3d_out_cpu_functional op;
op.meta(self, output_size);
op.impl(self, output_size, *op.outputs_[0], *op.outputs_[1]);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_adaptive_max_pool3d_out_cpu_out final : public at::native::structured_adaptive_max_pool3d_out_cpu {
    structured_adaptive_max_pool3d_out_cpu_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_adaptive_max_pool3d_out_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices) {
structured_adaptive_max_pool3d_out_cpu_out op(out, indices);
op.meta(self, output_size);
op.impl(self, output_size, op.outputs_[0], op.outputs_[1]);
return std::forward_as_tuple(out, indices);
}
struct structured_adaptive_max_pool3d_backward_out_cpu_functional final : public at::native::structured_adaptive_max_pool3d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
structured_adaptive_max_pool3d_backward_out_cpu_functional op;
op.meta(grad_output, self, indices);
op.impl(grad_output, self, indices, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_adaptive_max_pool3d_backward_out_cpu_out final : public at::native::structured_adaptive_max_pool3d_backward_out_cpu {
    structured_adaptive_max_pool3d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_adaptive_max_pool3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input) {
structured_adaptive_max_pool3d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, self, indices);
op.impl(grad_output, self, indices, op.outputs_[0]);
return grad_input;
}
struct structured_avg_pool2d_out_cpu_functional final : public at::native::structured_avg_pool2d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
structured_avg_pool2d_out_cpu_functional op;
auto precompute = op.meta(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
(void)precompute;
op.impl(self, precompute.kH, precompute.kW, precompute.dH, precompute.dW, precompute.padH, precompute.padW, ceil_mode, count_include_pad, divisor_override, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_avg_pool2d_out_cpu_out final : public at::native::structured_avg_pool2d_out_cpu {
    structured_avg_pool2d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_avg_pool2d_out_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & out) {
structured_avg_pool2d_out_cpu_out op(out);
auto precompute = op.meta(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
(void)precompute;
op.impl(self, precompute.kH, precompute.kW, precompute.dH, precompute.dW, precompute.padH, precompute.padW, ceil_mode, count_include_pad, divisor_override, op.outputs_[0]);
return out;
}
struct structured_avg_pool2d_backward_out_cpu_functional final : public at::native::structured_avg_pool2d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
structured_avg_pool2d_backward_out_cpu_functional op;
op.meta(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
op.impl(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_avg_pool2d_backward_out_cpu_out final : public at::native::structured_avg_pool2d_backward_out_cpu {
    structured_avg_pool2d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_avg_pool2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & grad_input) {
structured_avg_pool2d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
op.impl(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, op.outputs_[0]);
return grad_input;
}
struct structured_avg_pool3d_out_cpu_functional final : public at::native::structured_avg_pool3d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
structured_avg_pool3d_out_cpu_functional op;
op.meta(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
op.impl(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_avg_pool3d_out_cpu_out final : public at::native::structured_avg_pool3d_out_cpu {
    structured_avg_pool3d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_avg_pool3d_out_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & out) {
structured_avg_pool3d_out_cpu_out op(out);
op.meta(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
op.impl(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, op.outputs_[0]);
return out;
}
struct structured_avg_pool3d_backward_out_cpu_functional final : public at::native::structured_avg_pool3d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
structured_avg_pool3d_backward_out_cpu_functional op;
op.meta(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
op.impl(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_avg_pool3d_backward_out_cpu_out final : public at::native::structured_avg_pool3d_backward_out_cpu {
    structured_avg_pool3d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_avg_pool3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & grad_input) {
structured_avg_pool3d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
op.impl(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, op.outputs_[0]);
return grad_input;
}
struct structured_fractional_max_pool2d_out_cpu_functional final : public at::native::structured_fractional_max_pool2d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_fractional_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
structured_fractional_max_pool2d_out_cpu_functional op;
op.meta(self, kernel_size, output_size, random_samples);
op.impl(self, kernel_size, output_size, random_samples, *op.outputs_[0], *op.outputs_[1]);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_fractional_max_pool2d_out_cpu_out final : public at::native::structured_fractional_max_pool2d_out_cpu {
    structured_fractional_max_pool2d_out_cpu_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_fractional_max_pool2d_out_output(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples, at::Tensor & output, at::Tensor & indices) {
structured_fractional_max_pool2d_out_cpu_out op(output, indices);
op.meta(self, kernel_size, output_size, random_samples);
op.impl(self, kernel_size, output_size, random_samples, op.outputs_[0], op.outputs_[1]);
return std::forward_as_tuple(output, indices);
}
namespace {

at::Tensor wrapper__fractional_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::fractional_max_pool2d_backward_cpu(grad_output, self, kernel_size, output_size, indices);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_fractional_max_pool2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::fractional_max_pool2d_backward_out_cpu(grad_output, self, kernel_size, output_size, indices, grad_input);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__fractional_max_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
    // No device check


  // DeviceGuard omitted
  return at::native::fractional_max_pool3d_cpu(self, kernel_size, output_size, random_samples);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_output_fractional_max_pool3d_out_output(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples, at::Tensor & output, at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::fractional_max_pool3d_out_cpu(self, kernel_size, output_size, random_samples, output, indices);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__fractional_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::fractional_max_pool3d_backward_cpu(grad_output, self, kernel_size, output_size, indices);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_fractional_max_pool3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::fractional_max_pool3d_backward_out_cpu(grad_output, self, kernel_size, output_size, indices, grad_input);
}

} // anonymous namespace
struct structured_max_pool2d_with_indices_out_cpu_functional final : public at::native::structured_max_pool2d_with_indices_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_max_pool2d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
structured_max_pool2d_with_indices_out_cpu_functional op;
op.meta(self, kernel_size, stride, padding, dilation, ceil_mode);
op.impl(self, kernel_size, stride, padding, dilation, ceil_mode, *op.outputs_[0], *op.outputs_[1]);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_max_pool2d_with_indices_out_cpu_out final : public at::native::structured_max_pool2d_with_indices_out_cpu {
    structured_max_pool2d_with_indices_out_cpu_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_max_pool2d_with_indices_out_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, at::Tensor & out, at::Tensor & indices) {
structured_max_pool2d_with_indices_out_cpu_out op(out, indices);
op.meta(self, kernel_size, stride, padding, dilation, ceil_mode);
op.impl(self, kernel_size, stride, padding, dilation, ceil_mode, op.outputs_[0], op.outputs_[1]);
return std::forward_as_tuple(out, indices);
}
struct structured_max_pool2d_with_indices_backward_out_cpu_functional final : public at::native::structured_max_pool2d_with_indices_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
structured_max_pool2d_with_indices_backward_out_cpu_functional op;
op.meta(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
op.impl(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_max_pool2d_with_indices_backward_out_cpu_out final : public at::native::structured_max_pool2d_with_indices_backward_out_cpu {
    structured_max_pool2d_with_indices_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_max_pool2d_with_indices_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices, at::Tensor & grad_input) {
structured_max_pool2d_with_indices_backward_out_cpu_out op(grad_input);
op.meta(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
op.impl(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, op.outputs_[0]);
return grad_input;
}
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__max_pool3d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_pool3d_with_indices_cpu(self, kernel_size, stride, padding, dilation, ceil_mode);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_out_max_pool3d_with_indices_out_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, at::Tensor & out, at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_pool3d_with_indices_out_cpu(self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__max_pool3d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_pool3d_with_indices_backward_cpu(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_max_pool3d_with_indices_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_pool3d_with_indices_backward_out_cpu(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__max_unpool2d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_unpooling2d_forward_cpu(self, indices, output_size);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_max_unpool2d_out_out(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_unpooling2d_forward_out_cpu(self, indices, output_size, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__max_unpool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_unpooling2d_backward_cpu(grad_output, self, indices, output_size);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_max_unpool2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_unpooling2d_backward_out_cpu(grad_output, self, indices, output_size, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__max_unpool3d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_unpooling3d_forward_cpu(self, indices, output_size, stride, padding);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_max_unpool3d_out_out(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_unpooling3d_forward_out_cpu(self, indices, output_size, stride, padding, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__max_unpool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_unpooling3d_backward_cpu(grad_output, self, indices, output_size, stride, padding);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_max_unpool3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_unpooling3d_backward_out_cpu(grad_output, self, indices, output_size, stride, padding, grad_input);
}

} // anonymous namespace
struct structured_reflection_pad1d_out_cpu_functional final : public at::native::structured_reflection_pad1d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
structured_reflection_pad1d_out_cpu_functional op;
op.meta(self, padding);
op.impl(self, padding, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_reflection_pad1d_out_cpu_out final : public at::native::structured_reflection_pad1d_out_cpu {
    structured_reflection_pad1d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reflection_pad1d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_reflection_pad1d_out_cpu_out op(out);
op.meta(self, padding);
op.impl(self, padding, op.outputs_[0]);
return out;
}
struct structured_reflection_pad1d_backward_out_cpu_functional final : public at::native::structured_reflection_pad1d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reflection_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
structured_reflection_pad1d_backward_out_cpu_functional op;
op.meta(grad_output, self, padding);
op.impl(grad_output, self, padding, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_reflection_pad1d_backward_out_cpu_out final : public at::native::structured_reflection_pad1d_backward_out_cpu {
    structured_reflection_pad1d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reflection_pad1d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
structured_reflection_pad1d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, self, padding);
op.impl(grad_output, self, padding, op.outputs_[0]);
return grad_input;
}
namespace {

at::Tensor wrapper__reflection_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::reflection_pad2d_cpu(self, padding);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_reflection_pad2d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::reflection_pad2d_out_cpu(self, padding, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__reflection_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::reflection_pad2d_backward_cpu(grad_output, self, padding);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_reflection_pad2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::reflection_pad2d_backward_out_cpu(grad_output, self, padding, grad_input);
}

} // anonymous namespace
struct structured_reflection_pad3d_out_cpu_functional final : public at::native::structured_reflection_pad3d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reflection_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
structured_reflection_pad3d_out_cpu_functional op;
op.meta(self, padding);
op.impl(self, padding, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_reflection_pad3d_out_cpu_out final : public at::native::structured_reflection_pad3d_out_cpu {
    structured_reflection_pad3d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reflection_pad3d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_reflection_pad3d_out_cpu_out op(out);
op.meta(self, padding);
op.impl(self, padding, op.outputs_[0]);
return out;
}
struct structured_reflection_pad3d_backward_out_cpu_functional final : public at::native::structured_reflection_pad3d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reflection_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
structured_reflection_pad3d_backward_out_cpu_functional op;
op.meta(grad_output, self, padding);
op.impl(grad_output, self, padding, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_reflection_pad3d_backward_out_cpu_out final : public at::native::structured_reflection_pad3d_backward_out_cpu {
    structured_reflection_pad3d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reflection_pad3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
structured_reflection_pad3d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, self, padding);
op.impl(grad_output, self, padding, op.outputs_[0]);
return grad_input;
}
struct structured_replication_pad1d_out_cpu_functional final : public at::native::structured_replication_pad1d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_replication_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
structured_replication_pad1d_out_cpu_functional op;
op.meta(self, padding);
op.impl(self, padding, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_replication_pad1d_out_cpu_out final : public at::native::structured_replication_pad1d_out_cpu {
    structured_replication_pad1d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_replication_pad1d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_replication_pad1d_out_cpu_out op(out);
op.meta(self, padding);
op.impl(self, padding, op.outputs_[0]);
return out;
}
struct structured_replication_pad1d_backward_out_cpu_functional final : public at::native::structured_replication_pad1d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_replication_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
structured_replication_pad1d_backward_out_cpu_functional op;
op.meta(grad_output, self, padding);
op.impl(grad_output, self, padding, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_replication_pad1d_backward_out_cpu_out final : public at::native::structured_replication_pad1d_backward_out_cpu {
    structured_replication_pad1d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_replication_pad1d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
structured_replication_pad1d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, self, padding);
op.impl(grad_output, self, padding, op.outputs_[0]);
return grad_input;
}
struct structured_replication_pad2d_out_cpu_functional final : public at::native::structured_replication_pad2d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_replication_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
structured_replication_pad2d_out_cpu_functional op;
op.meta(self, padding);
op.impl(self, padding, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_replication_pad2d_out_cpu_out final : public at::native::structured_replication_pad2d_out_cpu {
    structured_replication_pad2d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_replication_pad2d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_replication_pad2d_out_cpu_out op(out);
op.meta(self, padding);
op.impl(self, padding, op.outputs_[0]);
return out;
}
namespace {

at::Tensor wrapper__replication_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::replication_pad2d_backward_cpu(grad_output, self, padding);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_replication_pad2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::replication_pad2d_backward_out_cpu(grad_output, self, padding, grad_input);
}

} // anonymous namespace
struct structured_replication_pad3d_out_cpu_functional final : public at::native::structured_replication_pad3d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_replication_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
structured_replication_pad3d_out_cpu_functional op;
op.meta(self, padding);
op.impl(self, padding, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_replication_pad3d_out_cpu_out final : public at::native::structured_replication_pad3d_out_cpu {
    structured_replication_pad3d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_replication_pad3d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_replication_pad3d_out_cpu_out op(out);
op.meta(self, padding);
op.impl(self, padding, op.outputs_[0]);
return out;
}
namespace {

at::Tensor wrapper__replication_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::replication_pad3d_backward_cpu(grad_output, self, padding);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_replication_pad3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::replication_pad3d_backward_out_cpu(grad_output, self, padding, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_vec_upsample_nearest3d_vec(const at::Tensor & input, c10::optional<at::IntArrayRef> output_size, c10::optional<at::ArrayRef<double>> scale_factors) {
    // No device check


  // DeviceGuard omitted
  return at::native::upsample_nearest3d_cpu(input, output_size, scale_factors);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_vec_upsample_nearest3d_backward_vec(const at::Tensor & grad_output, c10::optional<at::IntArrayRef> output_size, at::IntArrayRef input_size, c10::optional<at::ArrayRef<double>> scale_factors) {
    // No device check


  // DeviceGuard omitted
  return at::native::upsample_nearest3d_backward_cpu(grad_output, output_size, input_size, scale_factors);
}

} // anonymous namespace
struct structured_upsample_linear1d_out_cpu_functional final : public at::native::structured_upsample_linear1d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_linear1d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
structured_upsample_linear1d_out_cpu_functional op;
op.meta(self, output_size, align_corners, scales);
op.impl(self, output_size, align_corners, scales, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_linear1d_out_cpu_out final : public at::native::structured_upsample_linear1d_out_cpu {
    structured_upsample_linear1d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_linear1d_out_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales, at::Tensor & out) {
structured_upsample_linear1d_out_cpu_out op(out);
op.meta(self, output_size, align_corners, scales);
op.impl(self, output_size, align_corners, scales, op.outputs_[0]);
return out;
}
struct structured_upsample_linear1d_backward_out_cpu_functional final : public at::native::structured_upsample_linear1d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_linear1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
structured_upsample_linear1d_backward_out_cpu_functional op;
op.meta(grad_output, output_size, input_size, align_corners, scales);
op.impl(grad_output, output_size, input_size, align_corners, scales, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_linear1d_backward_out_cpu_out final : public at::native::structured_upsample_linear1d_backward_out_cpu {
    structured_upsample_linear1d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_linear1d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales, at::Tensor & grad_input) {
structured_upsample_linear1d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, output_size, input_size, align_corners, scales);
op.impl(grad_output, output_size, input_size, align_corners, scales, op.outputs_[0]);
return grad_input;
}
struct structured_upsample_bilinear2d_out_cpu_functional final : public at::native::structured_upsample_bilinear2d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_bilinear2d_out_cpu_functional op;
op.meta(self, output_size, align_corners, scales_h, scales_w);
op.impl(self, output_size, align_corners, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_bilinear2d_out_cpu_out final : public at::native::structured_upsample_bilinear2d_out_cpu {
    structured_upsample_bilinear2d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_bilinear2d_out_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_bilinear2d_out_cpu_out op(out);
op.meta(self, output_size, align_corners, scales_h, scales_w);
op.impl(self, output_size, align_corners, scales_h, scales_w, op.outputs_[0]);
return out;
}
struct structured_upsample_bilinear2d_backward_out_cpu_functional final : public at::native::structured_upsample_bilinear2d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_bilinear2d_backward_out_cpu_functional op;
op.meta(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, align_corners, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_bilinear2d_backward_out_cpu_out final : public at::native::structured_upsample_bilinear2d_backward_out_cpu {
    structured_upsample_bilinear2d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_bilinear2d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_bilinear2d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, align_corners, scales_h, scales_w, op.outputs_[0]);
return grad_input;
}
struct structured_upsample_bicubic2d_out_cpu_functional final : public at::native::structured_upsample_bicubic2d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_bicubic2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_bicubic2d_out_cpu_functional op;
op.meta(self, output_size, align_corners, scales_h, scales_w);
op.impl(self, output_size, align_corners, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_bicubic2d_out_cpu_out final : public at::native::structured_upsample_bicubic2d_out_cpu {
    structured_upsample_bicubic2d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_bicubic2d_out_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_bicubic2d_out_cpu_out op(out);
op.meta(self, output_size, align_corners, scales_h, scales_w);
op.impl(self, output_size, align_corners, scales_h, scales_w, op.outputs_[0]);
return out;
}
struct structured_upsample_bicubic2d_backward_out_cpu_functional final : public at::native::structured_upsample_bicubic2d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_bicubic2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_bicubic2d_backward_out_cpu_functional op;
op.meta(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, align_corners, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_bicubic2d_backward_out_cpu_out final : public at::native::structured_upsample_bicubic2d_backward_out_cpu {
    structured_upsample_bicubic2d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_bicubic2d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_bicubic2d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, align_corners, scales_h, scales_w, op.outputs_[0]);
return grad_input;
}
struct structured_upsample_trilinear3d_out_cpu_functional final : public at::native::structured_upsample_trilinear3d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_trilinear3d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_trilinear3d_out_cpu_functional op;
op.meta(self, output_size, align_corners, scales_d, scales_h, scales_w);
op.impl(self, output_size, align_corners, scales_d, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_trilinear3d_out_cpu_out final : public at::native::structured_upsample_trilinear3d_out_cpu {
    structured_upsample_trilinear3d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_trilinear3d_out_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_trilinear3d_out_cpu_out op(out);
op.meta(self, output_size, align_corners, scales_d, scales_h, scales_w);
op.impl(self, output_size, align_corners, scales_d, scales_h, scales_w, op.outputs_[0]);
return out;
}
struct structured_upsample_trilinear3d_backward_out_cpu_functional final : public at::native::structured_upsample_trilinear3d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_trilinear3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_trilinear3d_backward_out_cpu_functional op;
op.meta(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_trilinear3d_backward_out_cpu_out final : public at::native::structured_upsample_trilinear3d_backward_out_cpu {
    structured_upsample_trilinear3d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_trilinear3d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_trilinear3d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, op.outputs_[0]);
return grad_input;
}
struct structured_upsample_nearest1d_out_cpu_functional final : public at::native::structured_upsample_nearest1d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest1d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales) {
structured_upsample_nearest1d_out_cpu_functional op;
op.meta(self, output_size, scales);
op.impl(self, output_size, scales, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest1d_out_cpu_out final : public at::native::structured_upsample_nearest1d_out_cpu {
    structured_upsample_nearest1d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest1d_out_out(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales, at::Tensor & out) {
structured_upsample_nearest1d_out_cpu_out op(out);
op.meta(self, output_size, scales);
op.impl(self, output_size, scales, op.outputs_[0]);
return out;
}
struct structured_upsample_nearest1d_backward_out_cpu_functional final : public at::native::structured_upsample_nearest1d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales) {
structured_upsample_nearest1d_backward_out_cpu_functional op;
op.meta(grad_output, output_size, input_size, scales);
op.impl(grad_output, output_size, input_size, scales, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest1d_backward_out_cpu_out final : public at::native::structured_upsample_nearest1d_backward_out_cpu {
    structured_upsample_nearest1d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest1d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales, at::Tensor & grad_input) {
structured_upsample_nearest1d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, output_size, input_size, scales);
op.impl(grad_output, output_size, input_size, scales, op.outputs_[0]);
return grad_input;
}
struct structured_upsample_nearest2d_out_cpu_functional final : public at::native::structured_upsample_nearest2d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_nearest2d_out_cpu_functional op;
op.meta(self, output_size, scales_h, scales_w);
op.impl(self, output_size, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest2d_out_cpu_out final : public at::native::structured_upsample_nearest2d_out_cpu {
    structured_upsample_nearest2d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest2d_out_out(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_nearest2d_out_cpu_out op(out);
op.meta(self, output_size, scales_h, scales_w);
op.impl(self, output_size, scales_h, scales_w, op.outputs_[0]);
return out;
}
struct structured_upsample_nearest2d_backward_out_cpu_functional final : public at::native::structured_upsample_nearest2d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_nearest2d_backward_out_cpu_functional op;
op.meta(grad_output, output_size, input_size, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest2d_backward_out_cpu_out final : public at::native::structured_upsample_nearest2d_backward_out_cpu {
    structured_upsample_nearest2d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest2d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_nearest2d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, output_size, input_size, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, scales_h, scales_w, op.outputs_[0]);
return grad_input;
}
struct structured_upsample_nearest3d_out_cpu_functional final : public at::native::structured_upsample_nearest3d_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest3d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_nearest3d_out_cpu_functional op;
op.meta(self, output_size, scales_d, scales_h, scales_w);
op.impl(self, output_size, scales_d, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest3d_out_cpu_out final : public at::native::structured_upsample_nearest3d_out_cpu {
    structured_upsample_nearest3d_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest3d_out_out(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_nearest3d_out_cpu_out op(out);
op.meta(self, output_size, scales_d, scales_h, scales_w);
op.impl(self, output_size, scales_d, scales_h, scales_w, op.outputs_[0]);
return out;
}
struct structured_upsample_nearest3d_backward_out_cpu_functional final : public at::native::structured_upsample_nearest3d_backward_out_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_nearest3d_backward_out_cpu_functional op;
op.meta(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, scales_d, scales_h, scales_w, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest3d_backward_out_cpu_out final : public at::native::structured_upsample_nearest3d_backward_out_cpu {
    structured_upsample_nearest3d_backward_out_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest3d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_nearest3d_backward_out_cpu_out op(grad_input);
op.meta(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
op.impl(grad_output, output_size, input_size, scales_d, scales_h, scales_w, op.outputs_[0]);
return grad_input;
}
struct structured_sigmoid_backward_out_functional final : public at::native::structured_sigmoid_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sigmoid_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output) {
structured_sigmoid_backward_out_functional op;
op.meta(grad_output, output);
op.impl(grad_output, output, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_sigmoid_backward_out_out final : public at::native::structured_sigmoid_backward_out {
    structured_sigmoid_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_sigmoid_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sigmoid_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input) {
structured_sigmoid_backward_out_out op(grad_input);
op.meta(grad_output, output);
op.impl(grad_output, output, op.outputs_[0]);
return grad_input;
}
struct structured_logit_backward_out_functional final : public at::native::structured_logit_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_logit_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_logit_backward(const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps) {
structured_logit_backward_out_functional op;
op.meta(grad_output, self, eps);
op.impl(grad_output, self, eps, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_logit_backward_out_out final : public at::native::structured_logit_backward_out {
    structured_logit_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_logit_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_logit_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps, at::Tensor & grad_input) {
structured_logit_backward_out_out op(grad_input);
op.meta(grad_output, self, eps);
op.impl(grad_output, self, eps, op.outputs_[0]);
return grad_input;
}
struct structured_tanh_backward_out_functional final : public at::native::structured_tanh_backward_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_tanh_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_tanh_backward(const at::Tensor & grad_output, const at::Tensor & output) {
structured_tanh_backward_out_functional op;
op.meta(grad_output, output);
op.impl(grad_output, output, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_tanh_backward_out_out final : public at::native::structured_tanh_backward_out {
    structured_tanh_backward_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_tanh_backward_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tanh_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input) {
structured_tanh_backward_out_out op(grad_input);
op.meta(grad_output, output);
op.impl(grad_output, output, op.outputs_[0]);
return grad_input;
}
struct structured_slow_conv_transpose2d_structured_cpu_functional final : public at::native::structured_slow_conv_transpose2d_structured_cpu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_slow_conv_transpose2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
structured_slow_conv_transpose2d_structured_cpu_functional op;
op.meta(self, weight, kernel_size, ((bias.has_value() && (*bias).defined()) ? at::OptionalTensorRef(*bias) : at::OptionalTensorRef()), stride, padding, output_padding, dilation);
op.impl(self, weight, kernel_size, ((bias.has_value() && (*bias).defined()) ? at::OptionalTensorRef(*bias) : at::OptionalTensorRef()), stride, padding, output_padding, dilation, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_slow_conv_transpose2d_structured_cpu_out final : public at::native::structured_slow_conv_transpose2d_structured_cpu {
    structured_slow_conv_transpose2d_structured_cpu_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_slow_conv_transpose2d_out_out(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, at::Tensor & out) {
structured_slow_conv_transpose2d_structured_cpu_out op(out);
op.meta(self, weight, kernel_size, ((bias.has_value() && (*bias).defined()) ? at::OptionalTensorRef(*bias) : at::OptionalTensorRef()), stride, padding, output_padding, dilation);
op.impl(self, weight, kernel_size, ((bias.has_value() && (*bias).defined()) ? at::OptionalTensorRef(*bias) : at::OptionalTensorRef()), stride, padding, output_padding, dilation, op.outputs_[0]);
return out;
}
namespace {

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> wrapper_grad_output_slow_conv_transpose2d_backward_out_grad_output(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & columns, const at::Tensor & ones, at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_transpose2d_backward_out_cpu(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, grad_input, grad_weight, grad_bias);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper_output_mask_slow_conv_transpose2d_backward_output_mask(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & columns, const at::Tensor & ones, ::std::array<bool,3> output_mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_transpose2d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__slow_conv_transpose3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_transpose3d_cpu(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_slow_conv_transpose3d_out_out(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_transpose3d_out_cpu(self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> wrapper_grad_output_slow_conv_transpose3d_backward_out_grad_output(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & finput, const at::Tensor & fgrad_input, at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_transpose3d_backward_out_cpu(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, grad_input, grad_weight, grad_bias);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper_output_mask_slow_conv_transpose3d_backward_output_mask(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & finput, const at::Tensor & fgrad_input, ::std::array<bool,3> output_mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_transpose3d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__thnn_conv2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv2d_forward_cpu(self, weight, kernel_size, bias, stride, padding);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> wrapper_output_thnn_conv2d_forward_out_output(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv2d_forward_out_cpu(self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> wrapper_grad_input_thnn_conv2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv2d_backward_out_cpu(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper_output_mask_thnn_conv2d_backward_output_mask(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, ::std::array<bool,3> output_mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv2d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__slow_conv3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv3d_forward_cpu(self, weight, kernel_size, bias, stride, padding);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> wrapper_output_slow_conv3d_forward_out_output(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv3d_forward_out_cpu(self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> wrapper_grad_input_slow_conv3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv3d_backward_out_cpu(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper_output_mask_slow_conv3d_backward_output_mask(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, ::std::array<bool,3> output_mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv3d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__slow_conv_dilated2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_dilated2d_cpu(self, weight, kernel_size, bias, stride, padding, dilation);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__slow_conv_dilated2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, ::std::array<bool,3> output_mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_dilated2d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__slow_conv_dilated3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_dilated3d_cpu(self, weight, kernel_size, bias, stride, padding, dilation);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper__slow_conv_dilated3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, ::std::array<bool,3> output_mask) {
    // No device check


  // DeviceGuard omitted
  return at::native::slow_conv_dilated3d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__col2im(const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
    // No device check


  // DeviceGuard omitted
  return at::native::col2im_cpu(self, output_size, kernel_size, dilation, padding, stride);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_col2im_out_out(const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::col2im_out_cpu(self, output_size, kernel_size, dilation, padding, stride, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__col2im_backward(const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
    // No device check


  // DeviceGuard omitted
  return at::native::col2im_backward_cpu(grad_output, kernel_size, dilation, padding, stride);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_col2im_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::col2im_backward_out_cpu(grad_output, kernel_size, dilation, padding, stride, grad_input);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__im2col(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
    // No device check


  // DeviceGuard omitted
  return at::native::im2col_cpu(self, kernel_size, dilation, padding, stride);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_im2col_out_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::im2col_out_cpu(self, kernel_size, dilation, padding, stride, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__im2col_backward(const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
    // No device check


  // DeviceGuard omitted
  return at::native::im2col_backward_cpu(grad_output, input_size, kernel_size, dilation, padding, stride);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_grad_input_im2col_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & grad_input) {
    // No device check


  // DeviceGuard omitted
  return at::native::im2col_backward_out_cpu(grad_output, input_size, kernel_size, dilation, padding, stride, grad_input);
}

} // anonymous namespace
struct structured_isposinf_out_functional final : public at::native::structured_isposinf_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_isposinf_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isposinf(const at::Tensor & self) {
structured_isposinf_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_isposinf_out_out final : public at::native::structured_isposinf_out {
    structured_isposinf_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_isposinf_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isposinf_out_out(const at::Tensor & self, at::Tensor & out) {
structured_isposinf_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_isneginf_out_functional final : public at::native::structured_isneginf_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_isneginf_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isneginf(const at::Tensor & self) {
structured_isneginf_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_isneginf_out_out final : public at::native::structured_isneginf_out {
    structured_isneginf_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_isneginf_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isneginf_out_out(const at::Tensor & self, at::Tensor & out) {
structured_isneginf_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_special_entr_out_functional final : public at::native::structured_special_entr_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_entr_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_entr(const at::Tensor & self) {
structured_special_entr_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_special_entr_out_out final : public at::native::structured_special_entr_out {
    structured_special_entr_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_entr_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_entr_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_entr_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_special_ndtri_out_functional final : public at::native::structured_special_ndtri_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_ndtri_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_ndtri(const at::Tensor & self) {
structured_special_ndtri_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_special_ndtri_out_out final : public at::native::structured_special_ndtri_out {
    structured_special_ndtri_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_ndtri_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_ndtri_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_ndtri_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_special_erfcx_out_functional final : public at::native::structured_special_erfcx_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_erfcx_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_erfcx(const at::Tensor & self) {
structured_special_erfcx_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_special_erfcx_out_out final : public at::native::structured_special_erfcx_out {
    structured_special_erfcx_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_erfcx_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_erfcx_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_erfcx_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_special_xlog1py_out_functional final : public at::native::structured_special_xlog1py_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_xlog1py_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_xlog1py(const at::Tensor & self, const at::Tensor & other) {
structured_special_xlog1py_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_special_xlog1py_out_out final : public at::native::structured_special_xlog1py_out {
    structured_special_xlog1py_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_xlog1py_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_xlog1py_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_special_xlog1py_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_special_zeta_out_functional final : public at::native::structured_special_zeta_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_zeta_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_zeta(const at::Tensor & self, const at::Tensor & other) {
structured_special_zeta_out_functional op;
op.meta(self, other);
op.impl(self, other, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_special_zeta_out_out final : public at::native::structured_special_zeta_out {
    structured_special_zeta_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_zeta_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_zeta_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_special_zeta_out_out op(out);
op.meta(self, other);
op.impl(self, other, op.outputs_[0]);
return out;
}
struct structured_special_i0e_out_functional final : public at::native::structured_special_i0e_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_i0e_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_i0e(const at::Tensor & self) {
structured_special_i0e_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_special_i0e_out_out final : public at::native::structured_special_i0e_out {
    structured_special_i0e_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_i0e_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_i0e_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_i0e_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_special_i1_out_functional final : public at::native::structured_special_i1_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_i1_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_i1(const at::Tensor & self) {
structured_special_i1_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_special_i1_out_out final : public at::native::structured_special_i1_out {
    structured_special_i1_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_i1_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_i1_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_i1_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
struct structured_special_i1e_out_functional final : public at::native::structured_special_i1e_out {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_i1e_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_i1e(const at::Tensor & self) {
structured_special_i1e_out_functional op;
op.meta(self);
op.impl(self, *op.outputs_[0]);
return std::move(op.outputs_[0]).take();
}
struct structured_special_i1e_out_out final : public at::native::structured_special_i1e_out {
    structured_special_i1e_out_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::native::structured_special_i1e_out::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_i1e_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_i1e_out_out op(out);
op.meta(self);
op.impl(self, op.outputs_[0]);
return out;
}
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__linalg_cholesky_ex(const at::Tensor & self, bool upper, bool check_errors) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_cholesky_ex(self, upper, check_errors);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_L_linalg_cholesky_ex_out_L(const at::Tensor & self, bool upper, bool check_errors, at::Tensor & L, at::Tensor & info) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_cholesky_ex_out(self, upper, check_errors, L, info);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor,at::Tensor> wrapper___det_lu_based_helper(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::_det_lu_based_helper(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___det_lu_based_helper_backward_helper(const at::Tensor & det_grad, const at::Tensor & det, const at::Tensor & self, const at::Tensor & lu, const at::Tensor & pivs) {
    // No device check


  // DeviceGuard omitted
  return at::native::_det_lu_based_helper_backward_helper(det_grad, det, self, lu, pivs);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &,at::Tensor &> wrapper_out_linalg_lstsq_out_out(const at::Tensor & self, const at::Tensor & b, c10::optional<double> rcond, c10::optional<c10::string_view> driver, at::Tensor & solution, at::Tensor & residuals, at::Tensor & rank, at::Tensor & singular_values) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_lstsq_out(self, b, rcond, driver, solution, residuals, rank, singular_values);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__linalg_slogdet(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_slogdet(self);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_out_linalg_slogdet_out_out(const at::Tensor & self, at::Tensor & sign, at::Tensor & logabsdet) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_slogdet_out(self, sign, logabsdet);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__linalg_eig(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_eig(self);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_out_linalg_eig_out_out(const at::Tensor & self, at::Tensor & eigenvalues, at::Tensor & eigenvectors) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_eig_out(self, eigenvalues, eigenvectors);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__linalg_eigh(const at::Tensor & self, c10::string_view UPLO) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_eigh(self, UPLO);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor &,at::Tensor &> wrapper_eigvals_linalg_eigh_out_eigvals(const at::Tensor & self, c10::string_view UPLO, at::Tensor & eigvals, at::Tensor & eigvecs) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_eigh_out(self, UPLO, eigvals, eigvecs);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_linalg_eigvalsh_out_out(const at::Tensor & self, c10::string_view UPLO, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_eigvalsh_out(self, UPLO, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__linalg_householder_product(const at::Tensor & input, const at::Tensor & tau) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_householder_product(input, tau);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_linalg_householder_product_out_out(const at::Tensor & input, const at::Tensor & tau, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_householder_product_out(input, tau, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper___linalg_inv_out_helper_(at::Tensor & self, at::Tensor & infos_lu, at::Tensor & infos_getri) {
    // No device check


  // DeviceGuard omitted
  return at::native::_linalg_inv_out_helper_cpu(self, infos_lu, infos_getri);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__linalg_vector_norm(const at::Tensor & self, const at::Scalar & ord, c10::optional<at::IntArrayRef> dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_vector_norm(self, ord, dim, keepdim, dtype);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_linalg_vector_norm_out_out(const at::Tensor & self, const at::Scalar & ord, c10::optional<at::IntArrayRef> dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_vector_norm_out(self, ord, dim, keepdim, dtype, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__linalg_solve(const at::Tensor & input, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_solve(input, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_linalg_solve_out_out(const at::Tensor & input, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::linalg_solve_out(input, other, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper___linalg_qr_helper(const at::Tensor & self, c10::string_view mode) {
    // No device check


  // DeviceGuard omitted
  return at::native::_linalg_qr_helper_default(self, mode);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___test_optional_intlist(const at::Tensor & values, c10::optional<at::IntArrayRef> addends) {
    // No device check


  // DeviceGuard omitted
  return at::native::_test_optional_intlist(values, addends);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___test_optional_filled_intlist(const at::Tensor & values, c10::optional<at::IntArrayRef> addends) {
    // No device check


  // DeviceGuard omitted
  return at::native::_test_optional_intlist(values, addends);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___test_optional_floatlist(const at::Tensor & values, c10::optional<at::ArrayRef<double>> addends) {
    // No device check


  // DeviceGuard omitted
  return at::native::_test_optional_floatlist(values, addends);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__segment_reduce(const at::Tensor & data, c10::string_view reduce, const c10::optional<at::Tensor> & lengths, const c10::optional<at::Tensor> & indices, int64_t axis, bool unsafe, const c10::optional<at::Scalar> & initial) {
    // No device check


  // DeviceGuard omitted
  return at::native::segment_reduce_kernel(data, reduce, lengths, indices, axis, unsafe, initial);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___segment_reduce_backward(const at::Tensor & grad, const at::Tensor & output, const at::Tensor & data, c10::string_view reduce, const c10::optional<at::Tensor> & lengths, int64_t axis) {
    // No device check


  // DeviceGuard omitted
  return at::native::_segment_reduce_backward_kernel(grad, output, data, reduce, lengths, axis);
}

} // anonymous namespace

TORCH_LIBRARY_IMPL(aten, CPU, m) {
  m.impl("_assert_async",
  TORCH_FN(wrapper___assert_async));
  m.impl("abs.out",
  TORCH_FN(wrapper_out_abs_out_out));
  m.impl("angle",
  TORCH_FN(wrapper__angle));
  m.impl("angle.out",
  TORCH_FN(wrapper_out_angle_out_out));
  m.impl("view_as_real",
  TORCH_FN(wrapper__view_as_real));
  m.impl("view_as_complex",
  TORCH_FN(wrapper__view_as_complex));
  m.impl("sgn", TORCH_FN(wrapper_sgn));
  m.impl("sgn.out", TORCH_FN(wrapper_sgn_out_out));
  m.impl("sgn_", TORCH_FN(wrapper_sgn_));
  m.impl("conj_physical.out",
  TORCH_FN(wrapper_out_conj_physical_out_out));
  m.impl("acos", TORCH_FN(wrapper_acos));
  m.impl("acos.out", TORCH_FN(wrapper_acos_out_out));
  m.impl("acos_", TORCH_FN(wrapper_acos_));
  m.impl("add.Tensor", TORCH_FN(wrapper_add_Tensor));
  m.impl("add.out", TORCH_FN(wrapper_add_out_out));
  m.impl("add_.Tensor", TORCH_FN(wrapper_add__Tensor));
  m.impl("_add_relu.Tensor",
  TORCH_FN(wrapper_Tensor__add_relu_Tensor));
  m.impl("_add_relu.out",
  TORCH_FN(wrapper_out__add_relu_out_out));
  m.impl("_add_relu_.Tensor",
  TORCH_FN(wrapper_Tensor__add_relu__Tensor));
  m.impl("_add_relu.Scalar",
  TORCH_FN(wrapper_Scalar__add_relu_Scalar));
  m.impl("_add_relu_.Scalar",
  TORCH_FN(wrapper_Scalar__add_relu__Scalar));
  m.impl("addmv", TORCH_FN(wrapper_addmv));
  m.impl("addmv.out", TORCH_FN(wrapper_addmv_out_out));
  m.impl("addmv_", TORCH_FN(wrapper_addmv_));
  m.impl("addr",
  TORCH_FN(wrapper__addr));
  m.impl("addr.out",
  TORCH_FN(wrapper_out_addr_out_out));
  m.impl("all.dim", TORCH_FN(wrapper_all_dim));
  m.impl("all.out", TORCH_FN(wrapper_all_out_out));
  m.impl("any.dim", TORCH_FN(wrapper_any_dim));
  m.impl("any.out", TORCH_FN(wrapper_any_out_out));
  m.impl("arange.start_out",
  TORCH_FN(wrapper_start_out_arange_out_start_out));
  m.impl("argmax", TORCH_FN(wrapper_argmax));
  m.impl("argmax.out", TORCH_FN(wrapper_argmax_out_out));
  m.impl("argmin", TORCH_FN(wrapper_argmin));
  m.impl("argmin.out", TORCH_FN(wrapper_argmin_out_out));
  m.impl("acosh", TORCH_FN(wrapper_acosh));
  m.impl("acosh.out", TORCH_FN(wrapper_acosh_out_out));
  m.impl("acosh_", TORCH_FN(wrapper_acosh_));
  m.impl("asinh", TORCH_FN(wrapper_asinh));
  m.impl("asinh.out", TORCH_FN(wrapper_asinh_out_out));
  m.impl("asinh_", TORCH_FN(wrapper_asinh_));
  m.impl("atanh", TORCH_FN(wrapper_atanh));
  m.impl("atanh.out", TORCH_FN(wrapper_atanh_out_out));
  m.impl("atanh_", TORCH_FN(wrapper_atanh_));
  m.impl("as_strided",
  TORCH_FN(wrapper__as_strided));
  m.impl("asin", TORCH_FN(wrapper_asin));
  m.impl("asin.out", TORCH_FN(wrapper_asin_out_out));
  m.impl("asin_", TORCH_FN(wrapper_asin_));
  m.impl("atan", TORCH_FN(wrapper_atan));
  m.impl("atan.out", TORCH_FN(wrapper_atan_out_out));
  m.impl("atan_", TORCH_FN(wrapper_atan_));
  m.impl("baddbmm",
  TORCH_FN(wrapper__baddbmm));
  m.impl("baddbmm.out",
  TORCH_FN(wrapper_out_baddbmm_out_out));
  m.impl("baddbmm_",
  TORCH_FN(wrapper__baddbmm_));
  m.impl("bernoulli.out",
  TORCH_FN(wrapper_out_bernoulli_out_out));
  m.impl("bernoulli_.Tensor",
  TORCH_FN(wrapper_Tensor_bernoulli__Tensor));
  m.impl("bernoulli_.float",
  TORCH_FN(wrapper_float_bernoulli__float));
  m.impl("binary_cross_entropy",
  TORCH_FN(wrapper__binary_cross_entropy));
  m.impl("binary_cross_entropy.out",
  TORCH_FN(wrapper_out_binary_cross_entropy_out_out));
  m.impl("binary_cross_entropy_backward",
  TORCH_FN(wrapper__binary_cross_entropy_backward));
  m.impl("binary_cross_entropy_backward.grad_input",
  TORCH_FN(wrapper_grad_input_binary_cross_entropy_backward_out_grad_input));
  m.impl("bincount",
  TORCH_FN(wrapper__bincount));
  m.impl("bitwise_not", TORCH_FN(wrapper_bitwise_not));
  m.impl("bitwise_not.out", TORCH_FN(wrapper_bitwise_not_out_out));
  m.impl("bitwise_not_", TORCH_FN(wrapper_bitwise_not_));
  m.impl("copysign.Tensor", TORCH_FN(wrapper_copysign_Tensor));
  m.impl("copysign.out", TORCH_FN(wrapper_copysign_out_out));
  m.impl("copysign_.Tensor", TORCH_FN(wrapper_copysign__Tensor));
  m.impl("logical_not.out",
  TORCH_FN(wrapper_out_logical_not_out_out));
  m.impl("logical_xor.out",
  TORCH_FN(wrapper_out_logical_xor_out_out));
  m.impl("logical_and.out",
  TORCH_FN(wrapper_out_logical_and_out_out));
  m.impl("logical_or.out",
  TORCH_FN(wrapper_out_logical_or_out_out));
  m.impl("bmm",
  TORCH_FN(wrapper__bmm));
  m.impl("bmm.out",
  TORCH_FN(wrapper_out_bmm_out_out));
  m.impl("ceil", TORCH_FN(wrapper_ceil));
  m.impl("ceil.out", TORCH_FN(wrapper_ceil_out_out));
  m.impl("ceil_", TORCH_FN(wrapper_ceil_));
  m.impl("clamp", TORCH_FN(wrapper_clamp));
  m.impl("clamp.out", TORCH_FN(wrapper_clamp_out_out));
  m.impl("clamp_", TORCH_FN(wrapper_clamp_));
  m.impl("clamp.Tensor",
  TORCH_FN(wrapper_Tensor_clamp_Tensor));
  m.impl("clamp.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_clamp_out_Tensor_out));
  m.impl("clamp_max.out",
  TORCH_FN(wrapper_out_clamp_max_out_out));
  m.impl("clamp_max.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_clamp_max_out_Tensor_out));
  m.impl("clamp_min.out",
  TORCH_FN(wrapper_out_clamp_min_out_out));
  m.impl("clamp_min.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_clamp_min_out_Tensor_out));
  m.impl("complex.out",
  TORCH_FN(wrapper_out_complex_out_out));
  m.impl("polar.out",
  TORCH_FN(wrapper_out_polar_out_out));
  m.impl("cos", TORCH_FN(wrapper_cos));
  m.impl("cos.out", TORCH_FN(wrapper_cos_out_out));
  m.impl("cos_", TORCH_FN(wrapper_cos_));
  m.impl("cosh", TORCH_FN(wrapper_cosh));
  m.impl("cosh.out", TORCH_FN(wrapper_cosh_out_out));
  m.impl("cosh_", TORCH_FN(wrapper_cosh_));
  m.impl("count_nonzero.dim_IntList",
  TORCH_FN(wrapper_dim_IntList_count_nonzero_dim_IntList));
  m.impl("_cummax_helper",
  TORCH_FN(wrapper___cummax_helper));
  m.impl("_cummin_helper",
  TORCH_FN(wrapper___cummin_helper));
  m.impl("cumprod", TORCH_FN(wrapper_cumprod));
  m.impl("cumprod.out", TORCH_FN(wrapper_cumprod_out_out));
  m.impl("cumprod_", TORCH_FN(wrapper_cumprod_));
  m.impl("cumsum", TORCH_FN(wrapper_cumsum));
  m.impl("cumsum.out", TORCH_FN(wrapper_cumsum_out_out));
  m.impl("cumsum_", TORCH_FN(wrapper_cumsum_));
  m.impl("_ctc_loss",
  TORCH_FN(wrapper___ctc_loss));
  m.impl("_ctc_loss_backward",
  TORCH_FN(wrapper___ctc_loss_backward));
  m.impl("div.Tensor", TORCH_FN(wrapper_div_Tensor));
  m.impl("div.out", TORCH_FN(wrapper_div_out_out));
  m.impl("div_.Tensor", TORCH_FN(wrapper_div__Tensor));
  m.impl("div.Tensor_mode", TORCH_FN(wrapper_div_Tensor_mode));
  m.impl("div.out_mode", TORCH_FN(wrapper_div_out_out_mode));
  m.impl("div_.Tensor_mode", TORCH_FN(wrapper_div__Tensor_mode));
  m.impl("dot",
  TORCH_FN(wrapper__dot));
  m.impl("vdot",
  TORCH_FN(wrapper__vdot));
  m.impl("embedding_dense_backward",
  TORCH_FN(wrapper__embedding_dense_backward));
  m.impl("embedding_renorm_",
  TORCH_FN(wrapper__embedding_renorm_));
  m.impl("_embedding_bag_forward_only",
  TORCH_FN(wrapper___embedding_bag_forward_only));
  m.impl("_embedding_bag",
  TORCH_FN(wrapper___embedding_bag));
  m.impl("_embedding_bag_dense_backward",
  TORCH_FN(wrapper___embedding_bag_dense_backward));
  m.impl("_embedding_bag_per_sample_weights_backward",
  TORCH_FN(wrapper___embedding_bag_per_sample_weights_backward));
  m.impl("empty.memory_format",
  TORCH_FN(wrapper_memory_format_empty_memory_format));
  m.impl("_empty_affine_quantized",
  TORCH_FN(wrapper___empty_affine_quantized));
  m.impl("_empty_per_channel_affine_quantized",
  TORCH_FN(wrapper___empty_per_channel_affine_quantized));
  m.impl("resize_",
  TORCH_FN(wrapper__resize_));
  m.impl("empty_strided",
  TORCH_FN(wrapper__empty_strided));
  m.impl("erf", TORCH_FN(wrapper_erf));
  m.impl("erf.out", TORCH_FN(wrapper_erf_out_out));
  m.impl("erf_", TORCH_FN(wrapper_erf_));
  m.impl("erfc", TORCH_FN(wrapper_erfc));
  m.impl("erfc.out", TORCH_FN(wrapper_erfc_out_out));
  m.impl("erfc_", TORCH_FN(wrapper_erfc_));
  m.impl("exp", TORCH_FN(wrapper_exp));
  m.impl("exp.out", TORCH_FN(wrapper_exp_out_out));
  m.impl("exp_", TORCH_FN(wrapper_exp_));
  m.impl("exp2", TORCH_FN(wrapper_exp2));
  m.impl("exp2.out", TORCH_FN(wrapper_exp2_out_out));
  m.impl("exp2_", TORCH_FN(wrapper_exp2_));
  m.impl("expm1", TORCH_FN(wrapper_expm1));
  m.impl("expm1.out", TORCH_FN(wrapper_expm1_out_out));
  m.impl("expm1_", TORCH_FN(wrapper_expm1_));
  m.impl("eye.out",
  TORCH_FN(wrapper_out_eye_out_out));
  m.impl("eye.m_out",
  TORCH_FN(wrapper_m_out_eye_out_m_out));
  m.impl("fill_.Scalar",
  TORCH_FN(wrapper_Scalar_fill__Scalar));
  m.impl("fill_.Tensor",
  TORCH_FN(wrapper_Tensor_fill__Tensor));
  m.impl("floor", TORCH_FN(wrapper_floor));
  m.impl("floor.out", TORCH_FN(wrapper_floor_out_out));
  m.impl("floor_", TORCH_FN(wrapper_floor_));
  m.impl("floor_divide",
  TORCH_FN(wrapper__floor_divide));
  m.impl("floor_divide.out",
  TORCH_FN(wrapper_out_floor_divide_out_out));
  m.impl("floor_divide_.Tensor",
  TORCH_FN(wrapper_Tensor_floor_divide__Tensor));
  m.impl("frac", TORCH_FN(wrapper_frac));
  m.impl("frac.out", TORCH_FN(wrapper_frac_out_out));
  m.impl("frac_", TORCH_FN(wrapper_frac_));
  m.impl("from_file",
  TORCH_FN(wrapper__from_file));
  m.impl("gcd", TORCH_FN(wrapper_gcd));
  m.impl("gcd.out", TORCH_FN(wrapper_gcd_out_out));
  m.impl("gcd_", TORCH_FN(wrapper_gcd_));
  m.impl("lcm", TORCH_FN(wrapper_lcm));
  m.impl("lcm.out", TORCH_FN(wrapper_lcm_out_out));
  m.impl("lcm_", TORCH_FN(wrapper_lcm_));
  m.impl("grid_sampler_2d",
  TORCH_FN(wrapper__grid_sampler_2d));
  m.impl("grid_sampler_2d_backward",
  TORCH_FN(wrapper__grid_sampler_2d_backward));
  m.impl("grid_sampler_3d",
  TORCH_FN(wrapper__grid_sampler_3d));
  m.impl("grid_sampler_3d_backward",
  TORCH_FN(wrapper__grid_sampler_3d_backward));
  m.impl("native_group_norm",
  TORCH_FN(wrapper__native_group_norm));
  m.impl("native_group_norm_backward",
  TORCH_FN(wrapper__native_group_norm_backward));
  m.impl("_fft_r2c",
  TORCH_FN(wrapper___fft_r2c));
  m.impl("_fft_r2c.out",
  TORCH_FN(wrapper_out__fft_r2c_out_out));
  m.impl("_fft_c2r",
  TORCH_FN(wrapper___fft_c2r));
  m.impl("_fft_c2r.out",
  TORCH_FN(wrapper_out__fft_c2r_out_out));
  m.impl("_fft_c2c",
  TORCH_FN(wrapper___fft_c2c));
  m.impl("_fft_c2c.out",
  TORCH_FN(wrapper_out__fft_c2c_out_out));
  m.impl("index.Tensor",
  TORCH_FN(wrapper_Tensor_index_Tensor));
  m.impl("_index_put_impl_",
  TORCH_FN(wrapper___index_put_impl_));
  m.impl("_inverse_helper",
  TORCH_FN(wrapper___inverse_helper));
  m.impl("isin.Tensor_Tensor", TORCH_FN(wrapper_isin_Tensor_Tensor));
  m.impl("isin.Tensor_Tensor_out", TORCH_FN(wrapper_isin_out_Tensor_Tensor_out));
  m.impl("isin.Tensor_Scalar", TORCH_FN(wrapper_isin_Tensor_Scalar));
  m.impl("isin.Tensor_Scalar_out", TORCH_FN(wrapper_isin_out_Tensor_Scalar_out));
  m.impl("isin.Scalar_Tensor", TORCH_FN(wrapper_isin_Scalar_Tensor));
  m.impl("isin.Scalar_Tensor_out", TORCH_FN(wrapper_isin_out_Scalar_Tensor_out));
  m.impl("isnan",
  TORCH_FN(wrapper__isnan));
  m.impl("kl_div_backward",
  TORCH_FN(wrapper__kl_div_backward));
  m.impl("kthvalue.values",
  TORCH_FN(wrapper_values_kthvalue_out_values));
  m.impl("native_layer_norm",
  TORCH_FN(wrapper__native_layer_norm));
  m.impl("native_layer_norm_backward",
  TORCH_FN(wrapper__native_layer_norm_backward));
  m.impl("nan_to_num.out",
  TORCH_FN(wrapper_out_nan_to_num_out_out));
  m.impl("linspace.out",
  TORCH_FN(wrapper_out_linspace_out_out));
  m.impl("log", TORCH_FN(wrapper_log));
  m.impl("log.out", TORCH_FN(wrapper_log_out_out));
  m.impl("log_", TORCH_FN(wrapper_log_));
  m.impl("log10", TORCH_FN(wrapper_log10));
  m.impl("log10.out", TORCH_FN(wrapper_log10_out_out));
  m.impl("log10_", TORCH_FN(wrapper_log10_));
  m.impl("log1p", TORCH_FN(wrapper_log1p));
  m.impl("log1p.out", TORCH_FN(wrapper_log1p_out_out));
  m.impl("log1p_", TORCH_FN(wrapper_log1p_));
  m.impl("log2", TORCH_FN(wrapper_log2));
  m.impl("log2.out", TORCH_FN(wrapper_log2_out_out));
  m.impl("log2_", TORCH_FN(wrapper_log2_));
  m.impl("logaddexp", TORCH_FN(wrapper_logaddexp));
  m.impl("logaddexp.out", TORCH_FN(wrapper_logaddexp_out_out));
  m.impl("logaddexp2", TORCH_FN(wrapper_logaddexp2));
  m.impl("logaddexp2.out", TORCH_FN(wrapper_logaddexp2_out_out));
  m.impl("xlogy.Tensor", TORCH_FN(wrapper_xlogy_Tensor));
  m.impl("xlogy.OutTensor", TORCH_FN(wrapper_xlogy_out_OutTensor));
  m.impl("xlogy_.Tensor", TORCH_FN(wrapper_xlogy__Tensor));
  m.impl("logspace.out",
  TORCH_FN(wrapper_out_logspace_out_out));
  m.impl("_log_softmax", TORCH_FN(wrapper__log_softmax));
  m.impl("_log_softmax.out", TORCH_FN(wrapper__log_softmax_out_out));
  m.impl("_log_softmax_backward_data", TORCH_FN(wrapper__log_softmax_backward_data));
  m.impl("_log_softmax_backward_data.out", TORCH_FN(wrapper__log_softmax_backward_data_out_out));
  m.impl("_logcumsumexp",
  TORCH_FN(wrapper___logcumsumexp));
  m.impl("_logcumsumexp.out",
  TORCH_FN(wrapper_out__logcumsumexp_out_out));
  m.impl("matrix_exp",
  TORCH_FN(wrapper__matrix_exp));
  m.impl("_aminmax",
  TORCH_FN(wrapper___aminmax));
  m.impl("_aminmax.dim",
  TORCH_FN(wrapper_dim__aminmax_dim));
  m.impl("aminmax", TORCH_FN(wrapper_aminmax));
  m.impl("aminmax.out", TORCH_FN(wrapper_aminmax_out_out));
  m.impl("_compute_linear_combination",
  TORCH_FN(wrapper___compute_linear_combination));
  m.impl("_compute_linear_combination.out",
  TORCH_FN(wrapper_out__compute_linear_combination_out_out));
  m.impl("max.dim",
  TORCH_FN(wrapper_dim_max_dim));
  m.impl("max.dim_max",
  TORCH_FN(wrapper_dim_max_max_out_dim_max));
  m.impl("amax.out",
  TORCH_FN(wrapper_out_amax_out_out));
  m.impl("mean.dim", TORCH_FN(wrapper_mean_dim));
  m.impl("mean.out", TORCH_FN(wrapper_mean_out_out));
  m.impl("median",
  TORCH_FN(wrapper__median));
  m.impl("median.dim_values",
  TORCH_FN(wrapper_dim_values_median_out_dim_values));
  m.impl("nanmedian",
  TORCH_FN(wrapper__nanmedian));
  m.impl("nanmedian.dim_values",
  TORCH_FN(wrapper_dim_values_nanmedian_out_dim_values));
  m.impl("min.dim",
  TORCH_FN(wrapper_dim_min_dim));
  m.impl("min.dim_min",
  TORCH_FN(wrapper_dim_min_min_out_dim_min));
  m.impl("amin.out",
  TORCH_FN(wrapper_out_amin_out_out));
  m.impl("mm", TORCH_FN(wrapper_mm));
  m.impl("mm.out", TORCH_FN(wrapper_mm_out_out));
  m.impl("mode",
  TORCH_FN(wrapper__mode));
  m.impl("mul.Tensor", TORCH_FN(wrapper_mul_Tensor));
  m.impl("mul.out", TORCH_FN(wrapper_mul_out_out));
  m.impl("mul_.Tensor", TORCH_FN(wrapper_mul__Tensor));
  m.impl("mv",
  TORCH_FN(wrapper__mv));
  m.impl("mvlgamma.out",
  TORCH_FN(wrapper_out_mvlgamma_out_out));
  m.impl("narrow_copy",
  TORCH_FN(wrapper__narrow_copy));
  m.impl("narrow_copy.out",
  TORCH_FN(wrapper_out_narrow_copy_out_out));
  m.impl("native_batch_norm",
  TORCH_FN(wrapper__native_batch_norm));
  m.impl("native_batch_norm_backward",
  TORCH_FN(wrapper__native_batch_norm_backward));
  m.impl("batch_norm_update_stats",
  TORCH_FN(wrapper__batch_norm_update_stats));
  m.impl("_cdist_forward",
  TORCH_FN(wrapper___cdist_forward));
  m.impl("_cdist_backward",
  TORCH_FN(wrapper___cdist_backward));
  m.impl("_pdist_forward",
  TORCH_FN(wrapper___pdist_forward));
  m.impl("_pdist_backward",
  TORCH_FN(wrapper___pdist_backward));
  m.impl("channel_shuffle",
  TORCH_FN(wrapper__channel_shuffle));
  m.impl("randperm.generator_out",
  TORCH_FN(wrapper_generator_out_randperm_out_generator_out));
  m.impl("range.out",
  TORCH_FN(wrapper_out_range_out_out));
  m.impl("reciprocal", TORCH_FN(wrapper_reciprocal));
  m.impl("reciprocal.out", TORCH_FN(wrapper_reciprocal_out_out));
  m.impl("reciprocal_", TORCH_FN(wrapper_reciprocal_));
  m.impl("neg", TORCH_FN(wrapper_neg));
  m.impl("neg.out", TORCH_FN(wrapper_neg_out_out));
  m.impl("neg_", TORCH_FN(wrapper_neg_));
  m.impl("repeat_interleave.Tensor",
  TORCH_FN(wrapper_Tensor_repeat_interleave_Tensor));
  m.impl("_reshape_alias",
  TORCH_FN(wrapper___reshape_alias));
  m.impl("round", TORCH_FN(wrapper_round));
  m.impl("round.out", TORCH_FN(wrapper_round_out_out));
  m.impl("round_", TORCH_FN(wrapper_round_));
  m.impl("relu",
  TORCH_FN(wrapper__relu));
  m.impl("relu_",
  TORCH_FN(wrapper__relu_));
  m.impl("prelu",
  TORCH_FN(wrapper__prelu));
  m.impl("prelu_backward",
  TORCH_FN(wrapper__prelu_backward));
  m.impl("gelu", TORCH_FN(wrapper_gelu));
  m.impl("gelu.out", TORCH_FN(wrapper_gelu_out_out));
  m.impl("gelu_backward", TORCH_FN(wrapper_gelu_backward));
  m.impl("gelu_backward.grad_input", TORCH_FN(wrapper_gelu_backward_out_grad_input));
  m.impl("hardshrink", TORCH_FN(wrapper_hardshrink));
  m.impl("hardshrink.out", TORCH_FN(wrapper_hardshrink_out_out));
  m.impl("hardshrink_backward", TORCH_FN(wrapper_hardshrink_backward));
  m.impl("hardshrink_backward.grad_input", TORCH_FN(wrapper_hardshrink_backward_out_grad_input));
  m.impl("rsqrt", TORCH_FN(wrapper_rsqrt));
  m.impl("rsqrt.out", TORCH_FN(wrapper_rsqrt_out_out));
  m.impl("rsqrt_", TORCH_FN(wrapper_rsqrt_));
  m.impl("silu", TORCH_FN(wrapper_silu));
  m.impl("silu.out", TORCH_FN(wrapper_silu_out_out));
  m.impl("silu_", TORCH_FN(wrapper_silu_));
  m.impl("silu_backward", TORCH_FN(wrapper_silu_backward));
  m.impl("silu_backward.grad_input", TORCH_FN(wrapper_silu_backward_out_grad_input));
  m.impl("mish", TORCH_FN(wrapper_mish));
  m.impl("mish.out", TORCH_FN(wrapper_mish_out_out));
  m.impl("mish_", TORCH_FN(wrapper_mish_));
  m.impl("mish_backward",
  TORCH_FN(wrapper__mish_backward));
  m.impl("sigmoid", TORCH_FN(wrapper_sigmoid));
  m.impl("sigmoid.out", TORCH_FN(wrapper_sigmoid_out_out));
  m.impl("sigmoid_", TORCH_FN(wrapper_sigmoid_));
  m.impl("logit",
  TORCH_FN(wrapper__logit));
  m.impl("logit.out",
  TORCH_FN(wrapper_out_logit_out_out));
  m.impl("logit_",
  TORCH_FN(wrapper__logit_));
  m.impl("sin", TORCH_FN(wrapper_sin));
  m.impl("sin.out", TORCH_FN(wrapper_sin_out_out));
  m.impl("sin_", TORCH_FN(wrapper_sin_));
  m.impl("sinc", TORCH_FN(wrapper_sinc));
  m.impl("sinc.out", TORCH_FN(wrapper_sinc_out_out));
  m.impl("sinc_", TORCH_FN(wrapper_sinc_));
  m.impl("sinh", TORCH_FN(wrapper_sinh));
  m.impl("sinh.out", TORCH_FN(wrapper_sinh_out_out));
  m.impl("sinh_", TORCH_FN(wrapper_sinh_));
  m.impl("_softmax", TORCH_FN(wrapper__softmax));
  m.impl("_softmax.out", TORCH_FN(wrapper__softmax_out_out));
  m.impl("_softmax_backward_data", TORCH_FN(wrapper__softmax_backward_data));
  m.impl("_softmax_backward_data.out", TORCH_FN(wrapper__softmax_backward_data_out_out));
  m.impl("sspaddmm.out",
  TORCH_FN(wrapper_out_sspaddmm_out_out));
  m.impl("_stack",
  TORCH_FN(wrapper___stack));
  m.impl("_stack.out",
  TORCH_FN(wrapper_out__stack_out_out));
  m.impl("sum.dim_IntList", TORCH_FN(wrapper_sum_dim_IntList));
  m.impl("sum.IntList_out", TORCH_FN(wrapper_sum_out_IntList_out));
  m.impl("nansum",
  TORCH_FN(wrapper__nansum));
  m.impl("nansum.dim_IntList",
  TORCH_FN(wrapper_dim_IntList_nansum_dim_IntList));
  m.impl("nansum.IntList_out",
  TORCH_FN(wrapper_IntList_out_nansum_out_IntList_out));
  m.impl("sqrt", TORCH_FN(wrapper_sqrt));
  m.impl("sqrt.out", TORCH_FN(wrapper_sqrt_out_out));
  m.impl("sqrt_", TORCH_FN(wrapper_sqrt_));
  m.impl("square.out",
  TORCH_FN(wrapper_out_square_out_out));
  m.impl("std.correction",
  TORCH_FN(wrapper_correction_std_correction));
  m.impl("std.correction_out",
  TORCH_FN(wrapper_correction_out_std_out_correction_out));
  m.impl("std_mean.correction",
  TORCH_FN(wrapper_correction_std_mean_correction));
  m.impl("prod",
  TORCH_FN(wrapper__prod));
  m.impl("prod.dim_int", TORCH_FN(wrapper_prod_dim_int));
  m.impl("prod.int_out", TORCH_FN(wrapper_prod_out_int_out));
  m.impl("tan", TORCH_FN(wrapper_tan));
  m.impl("tan.out", TORCH_FN(wrapper_tan_out_out));
  m.impl("tan_", TORCH_FN(wrapper_tan_));
  m.impl("tanh", TORCH_FN(wrapper_tanh));
  m.impl("tanh.out", TORCH_FN(wrapper_tanh_out_out));
  m.impl("tanh_", TORCH_FN(wrapper_tanh_));
  m.impl("tensordot.out",
  TORCH_FN(wrapper_out_tensordot_out_out));
  m.impl("threshold", TORCH_FN(wrapper_threshold));
  m.impl("threshold.out", TORCH_FN(wrapper_threshold_out_out));
  m.impl("threshold_", TORCH_FN(wrapper_threshold_));
  m.impl("threshold_backward", TORCH_FN(wrapper_threshold_backward));
  m.impl("threshold_backward.grad_input", TORCH_FN(wrapper_threshold_backward_out_grad_input));
  m.impl("flip",
  TORCH_FN(wrapper__flip));
  m.impl("roll",
  TORCH_FN(wrapper__roll));
  m.impl("trunc", TORCH_FN(wrapper_trunc));
  m.impl("trunc.out", TORCH_FN(wrapper_trunc_out_out));
  m.impl("trunc_", TORCH_FN(wrapper_trunc_));
  m.impl("_unique",
  TORCH_FN(wrapper___unique));
  m.impl("unique_dim",
  TORCH_FN(wrapper__unique_dim));
  m.impl("unique_consecutive",
  TORCH_FN(wrapper__unique_consecutive));
  m.impl("unique_dim_consecutive",
  TORCH_FN(wrapper__unique_dim_consecutive));
  m.impl("_unique2",
  TORCH_FN(wrapper___unique2));
  m.impl("var.correction",
  TORCH_FN(wrapper_correction_var_correction));
  m.impl("var.correction_out",
  TORCH_FN(wrapper_correction_out_var_out_correction_out));
  m.impl("var_mean.correction",
  TORCH_FN(wrapper_correction_var_mean_correction));
  m.impl("_s_where",
  TORCH_FN(wrapper___s_where));
  m.impl("_standard_gamma_grad",
  TORCH_FN(wrapper___standard_gamma_grad));
  m.impl("_standard_gamma",
  TORCH_FN(wrapper___standard_gamma));
  m.impl("_dirichlet_grad",
  TORCH_FN(wrapper___dirichlet_grad));
  m.impl("_sample_dirichlet",
  TORCH_FN(wrapper___sample_dirichlet));
  m.impl("poisson",
  TORCH_FN(wrapper__poisson));
  m.impl("binomial",
  TORCH_FN(wrapper__binomial));
  m.impl("norm.ScalarOpt_dim_dtype", TORCH_FN(wrapper_norm_ScalarOpt_dim_dtype));
  m.impl("norm.dtype_out", TORCH_FN(wrapper_norm_out_dtype_out));
  m.impl("norm.ScalarOpt_dim", TORCH_FN(wrapper_norm_ScalarOpt_dim));
  m.impl("norm.out", TORCH_FN(wrapper_norm_out_out));
  m.impl("frexp.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_frexp_out_Tensor_out));
  m.impl("zero_",
  TORCH_FN(wrapper__zero_));
  m.impl("sub.Tensor", TORCH_FN(wrapper_sub_Tensor));
  m.impl("sub.out", TORCH_FN(wrapper_sub_out_out));
  m.impl("sub_.Tensor", TORCH_FN(wrapper_sub__Tensor));
  m.impl("rsub.Tensor",
  TORCH_FN(wrapper_Tensor_rsub_Tensor));
  m.impl("heaviside", TORCH_FN(wrapper_heaviside));
  m.impl("heaviside.out", TORCH_FN(wrapper_heaviside_out_out));
  m.impl("heaviside_", TORCH_FN(wrapper_heaviside_));
  m.impl("addmm", TORCH_FN(wrapper_addmm));
  m.impl("addmm.out", TORCH_FN(wrapper_addmm_out_out));
  m.impl("addmm_", TORCH_FN(wrapper_addmm_));
  m.impl("to_sparse.sparse_dim",
  TORCH_FN(wrapper_sparse_dim_to_sparse_sparse_dim));
  m.impl("to_sparse",
  TORCH_FN(wrapper__to_sparse));
  m.impl("to_mkldnn",
  TORCH_FN(wrapper__to_mkldnn));
  m.impl("quantize_per_tensor",
  TORCH_FN(wrapper__quantize_per_tensor));
  m.impl("quantize_per_tensor.tensor_qparams",
  TORCH_FN(wrapper_tensor_qparams_quantize_per_tensor_tensor_qparams));
  m.impl("quantize_per_tensor.tensors",
  TORCH_FN(wrapper_tensors_quantize_per_tensor_tensors));
  m.impl("quantize_per_channel",
  TORCH_FN(wrapper__quantize_per_channel));
  m.impl("dequantize.self",
  TORCH_FN(wrapper_self_dequantize_self));
  m.impl("_make_per_tensor_quantized_tensor",
  TORCH_FN(wrapper___make_per_tensor_quantized_tensor));
  m.impl("_make_per_channel_quantized_tensor",
  TORCH_FN(wrapper___make_per_channel_quantized_tensor));
  m.impl("fake_quantize_per_tensor_affine_cachemask",
  TORCH_FN(wrapper__fake_quantize_per_tensor_affine_cachemask));
  m.impl("_fake_quantize_per_tensor_affine_cachemask_tensor_qparams",
  TORCH_FN(wrapper___fake_quantize_per_tensor_affine_cachemask_tensor_qparams));
  m.impl("_fake_quantize_learnable_per_tensor_affine",
  TORCH_FN(wrapper___fake_quantize_learnable_per_tensor_affine));
  m.impl("fake_quantize_per_channel_affine_cachemask",
  TORCH_FN(wrapper__fake_quantize_per_channel_affine_cachemask));
  m.impl("_fake_quantize_learnable_per_channel_affine",
  TORCH_FN(wrapper___fake_quantize_learnable_per_channel_affine));
  m.impl("_fused_moving_avg_obs_fq_helper",
  TORCH_FN(wrapper___fused_moving_avg_obs_fq_helper));
  m.impl("_local_scalar_dense",
  TORCH_FN(wrapper___local_scalar_dense));
  m.impl("set_.source_Storage",
  TORCH_FN(wrapper_source_Storage_set__source_Storage));
  m.impl("set_.source_Storage_storage_offset",
  TORCH_FN(wrapper_source_Storage_storage_offset_set__source_Storage_storage_offset));
  m.impl("set_.source_Tensor",
  TORCH_FN(wrapper_source_Tensor_set__source_Tensor));
  m.impl("set_",
  TORCH_FN(wrapper__set_));
  m.impl("is_set_to",
  TORCH_FN(wrapper__is_set_to));
  m.impl("masked_fill_.Scalar",
  TORCH_FN(wrapper_Scalar_masked_fill__Scalar));
  m.impl("masked_fill_.Tensor",
  TORCH_FN(wrapper_Tensor_masked_fill__Tensor));
  m.impl("masked_scatter_",
  TORCH_FN(wrapper__masked_scatter_));
  m.impl("view",
  TORCH_FN(wrapper__view));
  m.impl("put_",
  TORCH_FN(wrapper__put_));
  m.impl("index_add_.alpha",
  TORCH_FN(wrapper_alpha_index_add__alpha));
  m.impl("index_fill_.int_Scalar",
  TORCH_FN(wrapper_int_Scalar_index_fill__int_Scalar));
  m.impl("index_fill_.int_Tensor",
  TORCH_FN(wrapper_int_Tensor_index_fill__int_Tensor));
  m.impl("scatter.src", TORCH_FN(wrapper_scatter_src));
  m.impl("scatter.src_out", TORCH_FN(wrapper_scatter_out_src_out));
  m.impl("scatter_.src", TORCH_FN(wrapper_scatter__src));
  m.impl("scatter.value", TORCH_FN(wrapper_scatter_value));
  m.impl("scatter.value_out", TORCH_FN(wrapper_scatter_out_value_out));
  m.impl("scatter_.value", TORCH_FN(wrapper_scatter__value));
  m.impl("scatter.reduce", TORCH_FN(wrapper_scatter_reduce));
  m.impl("scatter.reduce_out", TORCH_FN(wrapper_scatter_out_reduce_out));
  m.impl("scatter_.reduce", TORCH_FN(wrapper_scatter__reduce));
  m.impl("scatter.value_reduce", TORCH_FN(wrapper_scatter_value_reduce));
  m.impl("scatter.value_reduce_out", TORCH_FN(wrapper_scatter_out_value_reduce_out));
  m.impl("scatter_.value_reduce", TORCH_FN(wrapper_scatter__value_reduce));
  m.impl("scatter_add", TORCH_FN(wrapper_scatter_add));
  m.impl("scatter_add.out", TORCH_FN(wrapper_scatter_add_out_out));
  m.impl("scatter_add_", TORCH_FN(wrapper_scatter_add_));
  m.impl("eq.Scalar", TORCH_FN(wrapper_eq_Scalar));
  m.impl("eq.Scalar_out", TORCH_FN(wrapper_eq_out_Scalar_out));
  m.impl("eq_.Scalar", TORCH_FN(wrapper_eq__Scalar));
  m.impl("eq.Tensor", TORCH_FN(wrapper_eq_Tensor));
  m.impl("eq.Tensor_out", TORCH_FN(wrapper_eq_out_Tensor_out));
  m.impl("eq_.Tensor", TORCH_FN(wrapper_eq__Tensor));
  m.impl("bitwise_and.Tensor", TORCH_FN(wrapper_bitwise_and_Tensor));
  m.impl("bitwise_and.Tensor_out", TORCH_FN(wrapper_bitwise_and_out_Tensor_out));
  m.impl("bitwise_and_.Tensor", TORCH_FN(wrapper_bitwise_and__Tensor));
  m.impl("bitwise_or.Tensor", TORCH_FN(wrapper_bitwise_or_Tensor));
  m.impl("bitwise_or.Tensor_out", TORCH_FN(wrapper_bitwise_or_out_Tensor_out));
  m.impl("bitwise_or_.Tensor", TORCH_FN(wrapper_bitwise_or__Tensor));
  m.impl("bitwise_xor.Tensor", TORCH_FN(wrapper_bitwise_xor_Tensor));
  m.impl("bitwise_xor.Tensor_out", TORCH_FN(wrapper_bitwise_xor_out_Tensor_out));
  m.impl("bitwise_xor_.Tensor", TORCH_FN(wrapper_bitwise_xor__Tensor));
  m.impl("__lshift__.Scalar",
  TORCH_FN(wrapper_Scalar___lshift___Scalar));
  m.impl("__ilshift__.Scalar",
  TORCH_FN(wrapper_Scalar___ilshift___Scalar));
  m.impl("__lshift__.Tensor",
  TORCH_FN(wrapper_Tensor___lshift___Tensor));
  m.impl("__ilshift__.Tensor",
  TORCH_FN(wrapper_Tensor___ilshift___Tensor));
  m.impl("bitwise_left_shift.Tensor", TORCH_FN(wrapper_bitwise_left_shift_Tensor));
  m.impl("bitwise_left_shift.Tensor_out", TORCH_FN(wrapper_bitwise_left_shift_out_Tensor_out));
  m.impl("bitwise_left_shift_.Tensor", TORCH_FN(wrapper_bitwise_left_shift__Tensor));
  m.impl("bitwise_left_shift.Tensor_Scalar",
  TORCH_FN(wrapper_Tensor_Scalar_bitwise_left_shift_Tensor_Scalar));
  m.impl("bitwise_left_shift.Tensor_Scalar_out",
  TORCH_FN(wrapper_Tensor_Scalar_out_bitwise_left_shift_out_Tensor_Scalar_out));
  m.impl("bitwise_left_shift_.Tensor_Scalar",
  TORCH_FN(wrapper_Tensor_Scalar_bitwise_left_shift__Tensor_Scalar));
  m.impl("bitwise_left_shift.Scalar_Tensor",
  TORCH_FN(wrapper_Scalar_Tensor_bitwise_left_shift_Scalar_Tensor));
  m.impl("__rshift__.Scalar",
  TORCH_FN(wrapper_Scalar___rshift___Scalar));
  m.impl("__irshift__.Scalar",
  TORCH_FN(wrapper_Scalar___irshift___Scalar));
  m.impl("__rshift__.Tensor",
  TORCH_FN(wrapper_Tensor___rshift___Tensor));
  m.impl("__irshift__.Tensor",
  TORCH_FN(wrapper_Tensor___irshift___Tensor));
  m.impl("bitwise_right_shift.Tensor", TORCH_FN(wrapper_bitwise_right_shift_Tensor));
  m.impl("bitwise_right_shift.Tensor_out", TORCH_FN(wrapper_bitwise_right_shift_out_Tensor_out));
  m.impl("bitwise_right_shift_.Tensor", TORCH_FN(wrapper_bitwise_right_shift__Tensor));
  m.impl("bitwise_right_shift.Tensor_Scalar",
  TORCH_FN(wrapper_Tensor_Scalar_bitwise_right_shift_Tensor_Scalar));
  m.impl("bitwise_right_shift.Tensor_Scalar_out",
  TORCH_FN(wrapper_Tensor_Scalar_out_bitwise_right_shift_out_Tensor_Scalar_out));
  m.impl("bitwise_right_shift_.Tensor_Scalar",
  TORCH_FN(wrapper_Tensor_Scalar_bitwise_right_shift__Tensor_Scalar));
  m.impl("bitwise_right_shift.Scalar_Tensor",
  TORCH_FN(wrapper_Scalar_Tensor_bitwise_right_shift_Scalar_Tensor));
  m.impl("tril.out",
  TORCH_FN(wrapper_out_tril_out_out));
  m.impl("tril_",
  TORCH_FN(wrapper__tril_));
  m.impl("triu.out",
  TORCH_FN(wrapper_out_triu_out_out));
  m.impl("triu_",
  TORCH_FN(wrapper__triu_));
  m.impl("digamma", TORCH_FN(wrapper_digamma));
  m.impl("digamma.out", TORCH_FN(wrapper_digamma_out_out));
  m.impl("digamma_", TORCH_FN(wrapper_digamma_));
  m.impl("lerp.Scalar",
  TORCH_FN(wrapper_Scalar_lerp_Scalar));
  m.impl("lerp.Scalar_out",
  TORCH_FN(wrapper_Scalar_out_lerp_out_Scalar_out));
  m.impl("lerp_.Scalar",
  TORCH_FN(wrapper_Scalar_lerp__Scalar));
  m.impl("lerp.Tensor",
  TORCH_FN(wrapper_Tensor_lerp_Tensor));
  m.impl("lerp.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_lerp_out_Tensor_out));
  m.impl("lerp_.Tensor",
  TORCH_FN(wrapper_Tensor_lerp__Tensor));
  m.impl("addbmm",
  TORCH_FN(wrapper__addbmm));
  m.impl("addbmm.out",
  TORCH_FN(wrapper_out_addbmm_out_out));
  m.impl("addbmm_",
  TORCH_FN(wrapper__addbmm_));
  m.impl("random_.from",
  TORCH_FN(wrapper_from_random__from));
  m.impl("random_.to",
  TORCH_FN(wrapper_to_random__to));
  m.impl("random_",
  TORCH_FN(wrapper__random_));
  m.impl("uniform_",
  TORCH_FN(wrapper__uniform_));
  m.impl("cauchy_",
  TORCH_FN(wrapper__cauchy_));
  m.impl("log_normal_",
  TORCH_FN(wrapper__log_normal_));
  m.impl("exponential_",
  TORCH_FN(wrapper__exponential_));
  m.impl("geometric_",
  TORCH_FN(wrapper__geometric_));
  m.impl("diag.out",
  TORCH_FN(wrapper_out_diag_out_out));
  m.impl("cross",
  TORCH_FN(wrapper__cross));
  m.impl("cross.out",
  TORCH_FN(wrapper_out_cross_out_out));
  m.impl("tril_indices",
  TORCH_FN(wrapper__tril_indices));
  m.impl("triu_indices",
  TORCH_FN(wrapper__triu_indices));
  m.impl("trace",
  TORCH_FN(wrapper__trace));
  m.impl("ne.Scalar", TORCH_FN(wrapper_ne_Scalar));
  m.impl("ne.Scalar_out", TORCH_FN(wrapper_ne_out_Scalar_out));
  m.impl("ne_.Scalar", TORCH_FN(wrapper_ne__Scalar));
  m.impl("ne.Tensor", TORCH_FN(wrapper_ne_Tensor));
  m.impl("ne.Tensor_out", TORCH_FN(wrapper_ne_out_Tensor_out));
  m.impl("ne_.Tensor", TORCH_FN(wrapper_ne__Tensor));
  m.impl("ge.Scalar", TORCH_FN(wrapper_ge_Scalar));
  m.impl("ge.Scalar_out", TORCH_FN(wrapper_ge_out_Scalar_out));
  m.impl("ge_.Scalar", TORCH_FN(wrapper_ge__Scalar));
  m.impl("ge.Tensor", TORCH_FN(wrapper_ge_Tensor));
  m.impl("ge.Tensor_out", TORCH_FN(wrapper_ge_out_Tensor_out));
  m.impl("ge_.Tensor", TORCH_FN(wrapper_ge__Tensor));
  m.impl("le.Scalar", TORCH_FN(wrapper_le_Scalar));
  m.impl("le.Scalar_out", TORCH_FN(wrapper_le_out_Scalar_out));
  m.impl("le_.Scalar", TORCH_FN(wrapper_le__Scalar));
  m.impl("le.Tensor", TORCH_FN(wrapper_le_Tensor));
  m.impl("le.Tensor_out", TORCH_FN(wrapper_le_out_Tensor_out));
  m.impl("le_.Tensor", TORCH_FN(wrapper_le__Tensor));
  m.impl("gt.Scalar", TORCH_FN(wrapper_gt_Scalar));
  m.impl("gt.Scalar_out", TORCH_FN(wrapper_gt_out_Scalar_out));
  m.impl("gt_.Scalar", TORCH_FN(wrapper_gt__Scalar));
  m.impl("gt.Tensor", TORCH_FN(wrapper_gt_Tensor));
  m.impl("gt.Tensor_out", TORCH_FN(wrapper_gt_out_Tensor_out));
  m.impl("gt_.Tensor", TORCH_FN(wrapper_gt__Tensor));
  m.impl("lt.Scalar", TORCH_FN(wrapper_lt_Scalar));
  m.impl("lt.Scalar_out", TORCH_FN(wrapper_lt_out_Scalar_out));
  m.impl("lt_.Scalar", TORCH_FN(wrapper_lt__Scalar));
  m.impl("lt.Tensor", TORCH_FN(wrapper_lt_Tensor));
  m.impl("lt.Tensor_out", TORCH_FN(wrapper_lt_out_Tensor_out));
  m.impl("lt_.Tensor", TORCH_FN(wrapper_lt__Tensor));
  m.impl("take",
  TORCH_FN(wrapper__take));
  m.impl("take.out",
  TORCH_FN(wrapper_out_take_out_out));
  m.impl("index_select",
  TORCH_FN(wrapper__index_select));
  m.impl("index_select.out",
  TORCH_FN(wrapper_out_index_select_out_out));
  m.impl("masked_select",
  TORCH_FN(wrapper__masked_select));
  m.impl("masked_select.out",
  TORCH_FN(wrapper_out_masked_select_out_out));
  m.impl("nonzero",
  TORCH_FN(wrapper__nonzero));
  m.impl("nonzero.out",
  TORCH_FN(wrapper_out_nonzero_out_out));
  m.impl("gather", TORCH_FN(wrapper_gather));
  m.impl("gather.out", TORCH_FN(wrapper_gather_out_out));
  m.impl("addcmul", TORCH_FN(wrapper_addcmul));
  m.impl("addcmul.out", TORCH_FN(wrapper_addcmul_out_out));
  m.impl("addcmul_", TORCH_FN(wrapper_addcmul_));
  m.impl("addcdiv", TORCH_FN(wrapper_addcdiv));
  m.impl("addcdiv.out", TORCH_FN(wrapper_addcdiv_out_out));
  m.impl("addcdiv_", TORCH_FN(wrapper_addcdiv_));
  m.impl("lstsq",
  TORCH_FN(wrapper__lstsq));
  m.impl("lstsq.X",
  TORCH_FN(wrapper_X_lstsq_out_X));
  m.impl("triangular_solve",
  TORCH_FN(wrapper__triangular_solve));
  m.impl("triangular_solve.X",
  TORCH_FN(wrapper_X_triangular_solve_out_X));
  m.impl("_symeig_helper",
  TORCH_FN(wrapper___symeig_helper));
  m.impl("_svd_helper",
  TORCH_FN(wrapper___svd_helper));
  m.impl("cholesky",
  TORCH_FN(wrapper__cholesky));
  m.impl("cholesky.out",
  TORCH_FN(wrapper_out_cholesky_out_out));
  m.impl("_cholesky_solve_helper",
  TORCH_FN(wrapper___cholesky_solve_helper));
  m.impl("_solve_helper",
  TORCH_FN(wrapper___solve_helper));
  m.impl("cholesky_inverse",
  TORCH_FN(wrapper__cholesky_inverse));
  m.impl("cholesky_inverse.out",
  TORCH_FN(wrapper_out_cholesky_inverse_out_out));
  m.impl("geqrf",
  TORCH_FN(wrapper__geqrf));
  m.impl("geqrf.a",
  TORCH_FN(wrapper_a_geqrf_out_a));
  m.impl("ormqr",
  TORCH_FN(wrapper__ormqr));
  m.impl("ormqr.out",
  TORCH_FN(wrapper_out_ormqr_out_out));
  m.impl("_lu_with_info",
  TORCH_FN(wrapper___lu_with_info));
  m.impl("lu_solve",
  TORCH_FN(wrapper__lu_solve));
  m.impl("lu_solve.out",
  TORCH_FN(wrapper_out_lu_solve_out_out));
  m.impl("lu_unpack",
  TORCH_FN(wrapper__lu_unpack));
  m.impl("lu_unpack.out",
  TORCH_FN(wrapper_out_lu_unpack_out_out));
  m.impl("multinomial",
  TORCH_FN(wrapper__multinomial));
  m.impl("multinomial.out",
  TORCH_FN(wrapper_out_multinomial_out_out));
  m.impl("lgamma", TORCH_FN(wrapper_lgamma));
  m.impl("lgamma.out", TORCH_FN(wrapper_lgamma_out_out));
  m.impl("lgamma_", TORCH_FN(wrapper_lgamma_));
  m.impl("polygamma", TORCH_FN(wrapper_polygamma));
  m.impl("polygamma.out", TORCH_FN(wrapper_polygamma_out_out));
  m.impl("erfinv", TORCH_FN(wrapper_erfinv));
  m.impl("erfinv.out", TORCH_FN(wrapper_erfinv_out_out));
  m.impl("erfinv_", TORCH_FN(wrapper_erfinv_));
  m.impl("i0", TORCH_FN(wrapper_i0));
  m.impl("i0.out", TORCH_FN(wrapper_i0_out_out));
  m.impl("i0_", TORCH_FN(wrapper_i0_));
  m.impl("sign", TORCH_FN(wrapper_sign));
  m.impl("sign.out", TORCH_FN(wrapper_sign_out_out));
  m.impl("sign_", TORCH_FN(wrapper_sign_));
  m.impl("signbit", TORCH_FN(wrapper_signbit));
  m.impl("signbit.out", TORCH_FN(wrapper_signbit_out_out));
  m.impl("atan2", TORCH_FN(wrapper_atan2));
  m.impl("atan2.out", TORCH_FN(wrapper_atan2_out_out));
  m.impl("atan2_", TORCH_FN(wrapper_atan2_));
  m.impl("histc",
  TORCH_FN(wrapper__histc));
  m.impl("histc.out",
  TORCH_FN(wrapper_out_histc_out_out));
  m.impl("histogram.bins_tensor",
  TORCH_FN(wrapper_bins_tensor_histogram_bins_tensor));
  m.impl("histogram.bins_tensor_out",
  TORCH_FN(wrapper_bins_tensor_out_histogram_out_bins_tensor_out));
  m.impl("histogram.bin_ct",
  TORCH_FN(wrapper_bin_ct_histogram_bin_ct));
  m.impl("histogram.bin_ct_out",
  TORCH_FN(wrapper_bin_ct_out_histogram_out_bin_ct_out));
  m.impl("fmod.Tensor", TORCH_FN(wrapper_fmod_Tensor));
  m.impl("fmod.Tensor_out", TORCH_FN(wrapper_fmod_out_Tensor_out));
  m.impl("fmod_.Tensor", TORCH_FN(wrapper_fmod__Tensor));
  m.impl("hypot", TORCH_FN(wrapper_hypot));
  m.impl("hypot.out", TORCH_FN(wrapper_hypot_out_out));
  m.impl("hypot_", TORCH_FN(wrapper_hypot_));
  m.impl("igamma", TORCH_FN(wrapper_igamma));
  m.impl("igamma.out", TORCH_FN(wrapper_igamma_out_out));
  m.impl("igamma_", TORCH_FN(wrapper_igamma_));
  m.impl("igammac", TORCH_FN(wrapper_igammac));
  m.impl("igammac.out", TORCH_FN(wrapper_igammac_out_out));
  m.impl("igammac_", TORCH_FN(wrapper_igammac_));
  m.impl("nextafter", TORCH_FN(wrapper_nextafter));
  m.impl("nextafter.out", TORCH_FN(wrapper_nextafter_out_out));
  m.impl("nextafter_", TORCH_FN(wrapper_nextafter_));
  m.impl("remainder.Tensor", TORCH_FN(wrapper_remainder_Tensor));
  m.impl("remainder.Tensor_out", TORCH_FN(wrapper_remainder_out_Tensor_out));
  m.impl("remainder_.Tensor", TORCH_FN(wrapper_remainder__Tensor));
  m.impl("remainder.Scalar_Tensor",
  TORCH_FN(wrapper_Scalar_Tensor_remainder_Scalar_Tensor));
  m.impl("min",
  TORCH_FN(wrapper__min));
  m.impl("fmin", TORCH_FN(wrapper_fmin));
  m.impl("fmin.out", TORCH_FN(wrapper_fmin_out_out));
  m.impl("max",
  TORCH_FN(wrapper__max));
  m.impl("fmax", TORCH_FN(wrapper_fmax));
  m.impl("fmax.out", TORCH_FN(wrapper_fmax_out_out));
  m.impl("maximum", TORCH_FN(wrapper_maximum));
  m.impl("maximum.out", TORCH_FN(wrapper_maximum_out_out));
  m.impl("minimum", TORCH_FN(wrapper_minimum));
  m.impl("minimum.out", TORCH_FN(wrapper_minimum_out_out));
  m.impl("sort",
  TORCH_FN(wrapper__sort));
  m.impl("sort.values",
  TORCH_FN(wrapper_values_sort_out_values));
  m.impl("sort.stable",
  TORCH_FN(wrapper_stable_sort_stable));
  m.impl("sort.values_stable",
  TORCH_FN(wrapper_values_stable_sort_out_values_stable));
  m.impl("topk", TORCH_FN(wrapper_topk));
  m.impl("topk.values", TORCH_FN(wrapper_topk_out_values));
  m.impl("all", TORCH_FN(wrapper_all));
  m.impl("all.all_out", TORCH_FN(wrapper_all_out_all_out));
  m.impl("any", TORCH_FN(wrapper_any));
  m.impl("any.all_out", TORCH_FN(wrapper_any_out_all_out));
  m.impl("renorm", TORCH_FN(wrapper_renorm));
  m.impl("renorm.out", TORCH_FN(wrapper_renorm_out_out));
  m.impl("renorm_", TORCH_FN(wrapper_renorm_));
  m.impl("unfold",
  TORCH_FN(wrapper__unfold));
  m.impl("unfold_backward",
  TORCH_FN(wrapper__unfold_backward));
  m.impl("equal",
  TORCH_FN(wrapper__equal));
  m.impl("pow.Tensor_Tensor", TORCH_FN(wrapper_pow_Tensor_Tensor));
  m.impl("pow.Tensor_Tensor_out", TORCH_FN(wrapper_pow_out_Tensor_Tensor_out));
  m.impl("pow_.Tensor", TORCH_FN(wrapper_pow__Tensor));
  m.impl("pow.Scalar", TORCH_FN(wrapper_pow_Scalar));
  m.impl("pow.Scalar_out", TORCH_FN(wrapper_pow_out_Scalar_out));
  m.impl("pow.Tensor_Scalar", TORCH_FN(wrapper_pow_Tensor_Scalar));
  m.impl("pow.Tensor_Scalar_out", TORCH_FN(wrapper_pow_out_Tensor_Scalar_out));
  m.impl("pow_.Scalar", TORCH_FN(wrapper_pow__Scalar));
  m.impl("normal_",
  TORCH_FN(wrapper__normal_));
  m.impl("normal.Tensor_float",
  TORCH_FN(wrapper_Tensor_float_normal_Tensor_float));
  m.impl("normal.Tensor_float_out",
  TORCH_FN(wrapper_Tensor_float_out_normal_out_Tensor_float_out));
  m.impl("normal.float_Tensor",
  TORCH_FN(wrapper_float_Tensor_normal_float_Tensor));
  m.impl("normal.float_Tensor_out",
  TORCH_FN(wrapper_float_Tensor_out_normal_out_float_Tensor_out));
  m.impl("normal.Tensor_Tensor",
  TORCH_FN(wrapper_Tensor_Tensor_normal_Tensor_Tensor));
  m.impl("normal.Tensor_Tensor_out",
  TORCH_FN(wrapper_Tensor_Tensor_out_normal_out_Tensor_Tensor_out));
  m.impl("_index_copy_",
  TORCH_FN(wrapper___index_copy_));
  m.impl("_cat",
  TORCH_FN(wrapper___cat));
  m.impl("_cat.out",
  TORCH_FN(wrapper_out__cat_out_out));
  m.impl("_foreach_add.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_add_Scalar));
  m.impl("_foreach_add_.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_add__Scalar));
  m.impl("_foreach_sub.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_sub_Scalar));
  m.impl("_foreach_sub_.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_sub__Scalar));
  m.impl("_foreach_mul.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_mul_Scalar));
  m.impl("_foreach_mul_.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_mul__Scalar));
  m.impl("_foreach_div.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_div_Scalar));
  m.impl("_foreach_div_.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_div__Scalar));
  m.impl("_foreach_add.List",
  TORCH_FN(wrapper_List__foreach_add_List));
  m.impl("_foreach_add_.List",
  TORCH_FN(wrapper_List__foreach_add__List));
  m.impl("_foreach_sub.List",
  TORCH_FN(wrapper_List__foreach_sub_List));
  m.impl("_foreach_sub_.List",
  TORCH_FN(wrapper_List__foreach_sub__List));
  m.impl("_foreach_mul.List",
  TORCH_FN(wrapper_List__foreach_mul_List));
  m.impl("_foreach_mul_.List",
  TORCH_FN(wrapper_List__foreach_mul__List));
  m.impl("_foreach_div.List",
  TORCH_FN(wrapper_List__foreach_div_List));
  m.impl("_foreach_div_.List",
  TORCH_FN(wrapper_List__foreach_div__List));
  m.impl("_foreach_add.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_add_ScalarList));
  m.impl("_foreach_add_.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_add__ScalarList));
  m.impl("_foreach_sub.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_sub_ScalarList));
  m.impl("_foreach_sub_.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_sub__ScalarList));
  m.impl("_foreach_div.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_div_ScalarList));
  m.impl("_foreach_div_.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_div__ScalarList));
  m.impl("_foreach_mul.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_mul_ScalarList));
  m.impl("_foreach_mul_.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_mul__ScalarList));
  m.impl("_foreach_exp",
  TORCH_FN(wrapper___foreach_exp));
  m.impl("_foreach_zero_",
  TORCH_FN(wrapper___foreach_zero_));
  m.impl("_foreach_exp_",
  TORCH_FN(wrapper___foreach_exp_));
  m.impl("_foreach_sqrt",
  TORCH_FN(wrapper___foreach_sqrt));
  m.impl("_foreach_sqrt_",
  TORCH_FN(wrapper___foreach_sqrt_));
  m.impl("_foreach_abs",
  TORCH_FN(wrapper___foreach_abs));
  m.impl("_foreach_abs_",
  TORCH_FN(wrapper___foreach_abs_));
  m.impl("_foreach_acos",
  TORCH_FN(wrapper___foreach_acos));
  m.impl("_foreach_acos_",
  TORCH_FN(wrapper___foreach_acos_));
  m.impl("_foreach_asin",
  TORCH_FN(wrapper___foreach_asin));
  m.impl("_foreach_asin_",
  TORCH_FN(wrapper___foreach_asin_));
  m.impl("_foreach_atan",
  TORCH_FN(wrapper___foreach_atan));
  m.impl("_foreach_atan_",
  TORCH_FN(wrapper___foreach_atan_));
  m.impl("_foreach_ceil",
  TORCH_FN(wrapper___foreach_ceil));
  m.impl("_foreach_ceil_",
  TORCH_FN(wrapper___foreach_ceil_));
  m.impl("_foreach_cos",
  TORCH_FN(wrapper___foreach_cos));
  m.impl("_foreach_cos_",
  TORCH_FN(wrapper___foreach_cos_));
  m.impl("_foreach_cosh",
  TORCH_FN(wrapper___foreach_cosh));
  m.impl("_foreach_cosh_",
  TORCH_FN(wrapper___foreach_cosh_));
  m.impl("_foreach_erf",
  TORCH_FN(wrapper___foreach_erf));
  m.impl("_foreach_erf_",
  TORCH_FN(wrapper___foreach_erf_));
  m.impl("_foreach_erfc",
  TORCH_FN(wrapper___foreach_erfc));
  m.impl("_foreach_erfc_",
  TORCH_FN(wrapper___foreach_erfc_));
  m.impl("_foreach_expm1",
  TORCH_FN(wrapper___foreach_expm1));
  m.impl("_foreach_expm1_",
  TORCH_FN(wrapper___foreach_expm1_));
  m.impl("_foreach_floor",
  TORCH_FN(wrapper___foreach_floor));
  m.impl("_foreach_floor_",
  TORCH_FN(wrapper___foreach_floor_));
  m.impl("_foreach_log",
  TORCH_FN(wrapper___foreach_log));
  m.impl("_foreach_log_",
  TORCH_FN(wrapper___foreach_log_));
  m.impl("_foreach_log10",
  TORCH_FN(wrapper___foreach_log10));
  m.impl("_foreach_log10_",
  TORCH_FN(wrapper___foreach_log10_));
  m.impl("_foreach_log1p",
  TORCH_FN(wrapper___foreach_log1p));
  m.impl("_foreach_log1p_",
  TORCH_FN(wrapper___foreach_log1p_));
  m.impl("_foreach_log2",
  TORCH_FN(wrapper___foreach_log2));
  m.impl("_foreach_log2_",
  TORCH_FN(wrapper___foreach_log2_));
  m.impl("_foreach_neg",
  TORCH_FN(wrapper___foreach_neg));
  m.impl("_foreach_neg_",
  TORCH_FN(wrapper___foreach_neg_));
  m.impl("_foreach_tan",
  TORCH_FN(wrapper___foreach_tan));
  m.impl("_foreach_tan_",
  TORCH_FN(wrapper___foreach_tan_));
  m.impl("_foreach_tanh",
  TORCH_FN(wrapper___foreach_tanh));
  m.impl("_foreach_tanh_",
  TORCH_FN(wrapper___foreach_tanh_));
  m.impl("_foreach_sin",
  TORCH_FN(wrapper___foreach_sin));
  m.impl("_foreach_sin_",
  TORCH_FN(wrapper___foreach_sin_));
  m.impl("_foreach_sinh",
  TORCH_FN(wrapper___foreach_sinh));
  m.impl("_foreach_sinh_",
  TORCH_FN(wrapper___foreach_sinh_));
  m.impl("_foreach_round",
  TORCH_FN(wrapper___foreach_round));
  m.impl("_foreach_round_",
  TORCH_FN(wrapper___foreach_round_));
  m.impl("_foreach_lgamma",
  TORCH_FN(wrapper___foreach_lgamma));
  m.impl("_foreach_lgamma_",
  TORCH_FN(wrapper___foreach_lgamma_));
  m.impl("_foreach_frac",
  TORCH_FN(wrapper___foreach_frac));
  m.impl("_foreach_frac_",
  TORCH_FN(wrapper___foreach_frac_));
  m.impl("_foreach_reciprocal",
  TORCH_FN(wrapper___foreach_reciprocal));
  m.impl("_foreach_reciprocal_",
  TORCH_FN(wrapper___foreach_reciprocal_));
  m.impl("_foreach_sigmoid",
  TORCH_FN(wrapper___foreach_sigmoid));
  m.impl("_foreach_sigmoid_",
  TORCH_FN(wrapper___foreach_sigmoid_));
  m.impl("_foreach_trunc",
  TORCH_FN(wrapper___foreach_trunc));
  m.impl("_foreach_trunc_",
  TORCH_FN(wrapper___foreach_trunc_));
  m.impl("_foreach_addcdiv_.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_addcdiv__Scalar));
  m.impl("_foreach_addcmul_.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_addcmul__Scalar));
  m.impl("_foreach_addcdiv_.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_addcdiv__ScalarList));
  m.impl("_foreach_addcmul_.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_addcmul__ScalarList));
  m.impl("_foreach_addcdiv.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_addcdiv_Scalar));
  m.impl("_foreach_addcmul.Scalar",
  TORCH_FN(wrapper_Scalar__foreach_addcmul_Scalar));
  m.impl("_foreach_addcdiv.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_addcdiv_ScalarList));
  m.impl("_foreach_addcmul.ScalarList",
  TORCH_FN(wrapper_ScalarList__foreach_addcmul_ScalarList));
  m.impl("_foreach_maximum.List",
  TORCH_FN(wrapper_List__foreach_maximum_List));
  m.impl("_foreach_minimum.List",
  TORCH_FN(wrapper_List__foreach_minimum_List));
  m.impl("bucketize.Tensor",
  TORCH_FN(wrapper_Tensor_bucketize_Tensor));
  m.impl("bucketize.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_bucketize_out_Tensor_out));
  m.impl("bucketize.Scalar",
  TORCH_FN(wrapper_Scalar_bucketize_Scalar));
  m.impl("searchsorted.Tensor",
  TORCH_FN(wrapper_Tensor_searchsorted_Tensor));
  m.impl("searchsorted.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_searchsorted_out_Tensor_out));
  m.impl("searchsorted.Scalar",
  TORCH_FN(wrapper_Scalar_searchsorted_Scalar));
  m.impl("_convert_indices_from_coo_to_csr", TORCH_FN(wrapper__convert_indices_from_coo_to_csr));
  m.impl("_convert_indices_from_coo_to_csr.out", TORCH_FN(wrapper__convert_indices_from_coo_to_csr_out_out));
  m.impl("mse_loss",
  TORCH_FN(wrapper__mse_loss));
  m.impl("mse_loss.out",
  TORCH_FN(wrapper_out_mse_loss_out_out));
  m.impl("mse_loss_backward",
  TORCH_FN(wrapper__mse_loss_backward));
  m.impl("mse_loss_backward.grad_input",
  TORCH_FN(wrapper_grad_input_mse_loss_backward_out_grad_input));
  m.impl("l1_loss_backward.grad_input",
  TORCH_FN(wrapper_grad_input_l1_loss_backward_out_grad_input));
  m.impl("multi_margin_loss",
  TORCH_FN(wrapper__multi_margin_loss));
  m.impl("multi_margin_loss.out",
  TORCH_FN(wrapper_out_multi_margin_loss_out_out));
  m.impl("multi_margin_loss_backward",
  TORCH_FN(wrapper__multi_margin_loss_backward));
  m.impl("multi_margin_loss_backward.grad_input",
  TORCH_FN(wrapper_grad_input_multi_margin_loss_backward_out_grad_input));
  m.impl("multilabel_margin_loss_forward",
  TORCH_FN(wrapper__multilabel_margin_loss_forward));
  m.impl("multilabel_margin_loss_forward.output",
  TORCH_FN(wrapper_output_multilabel_margin_loss_forward_out_output));
  m.impl("multilabel_margin_loss_backward",
  TORCH_FN(wrapper__multilabel_margin_loss_backward));
  m.impl("multilabel_margin_loss_backward.grad_input",
  TORCH_FN(wrapper_grad_input_multilabel_margin_loss_backward_out_grad_input));
  m.impl("nll_loss_forward", TORCH_FN(wrapper_nll_loss_forward));
  m.impl("nll_loss_forward.output", TORCH_FN(wrapper_nll_loss_forward_out_output));
  m.impl("nll_loss_backward", TORCH_FN(wrapper_nll_loss_backward));
  m.impl("nll_loss_backward.grad_input", TORCH_FN(wrapper_nll_loss_backward_out_grad_input));
  m.impl("nll_loss2d_forward",
  TORCH_FN(wrapper__nll_loss2d_forward));
  m.impl("nll_loss2d_forward.output",
  TORCH_FN(wrapper_output_nll_loss2d_forward_out_output));
  m.impl("nll_loss2d_backward",
  TORCH_FN(wrapper__nll_loss2d_backward));
  m.impl("nll_loss2d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_nll_loss2d_backward_out_grad_input));
  m.impl("smooth_l1_loss",
  TORCH_FN(wrapper__smooth_l1_loss));
  m.impl("smooth_l1_loss.out",
  TORCH_FN(wrapper_out_smooth_l1_loss_out_out));
  m.impl("smooth_l1_loss_backward.grad_input",
  TORCH_FN(wrapper_grad_input_smooth_l1_loss_backward_out_grad_input));
  m.impl("huber_loss",
  TORCH_FN(wrapper__huber_loss));
  m.impl("huber_loss.out",
  TORCH_FN(wrapper_out_huber_loss_out_out));
  m.impl("huber_loss_backward.out",
  TORCH_FN(wrapper_out_huber_loss_backward_out_out));
  m.impl("elu", TORCH_FN(wrapper_elu));
  m.impl("elu.out", TORCH_FN(wrapper_elu_out_out));
  m.impl("elu_", TORCH_FN(wrapper_elu_));
  m.impl("elu_backward", TORCH_FN(wrapper_elu_backward));
  m.impl("elu_backward.grad_input", TORCH_FN(wrapper_elu_backward_out_grad_input));
  m.impl("glu", TORCH_FN(wrapper_glu));
  m.impl("glu.out", TORCH_FN(wrapper_glu_out_out));
  m.impl("glu_backward",
  TORCH_FN(wrapper__glu_backward));
  m.impl("glu_backward.grad_input",
  TORCH_FN(wrapper_grad_input_glu_backward_out_grad_input));
  m.impl("hardsigmoid", TORCH_FN(wrapper_hardsigmoid));
  m.impl("hardsigmoid.out", TORCH_FN(wrapper_hardsigmoid_out_out));
  m.impl("hardsigmoid_", TORCH_FN(wrapper_hardsigmoid_));
  m.impl("hardsigmoid_backward", TORCH_FN(wrapper_hardsigmoid_backward));
  m.impl("hardsigmoid_backward.grad_input", TORCH_FN(wrapper_hardsigmoid_backward_out_grad_input));
  m.impl("hardtanh",
  TORCH_FN(wrapper__hardtanh));
  m.impl("hardtanh.out",
  TORCH_FN(wrapper_out_hardtanh_out_out));
  m.impl("hardtanh_",
  TORCH_FN(wrapper__hardtanh_));
  m.impl("hardtanh_backward",
  TORCH_FN(wrapper__hardtanh_backward));
  m.impl("hardtanh_backward.grad_input",
  TORCH_FN(wrapper_grad_input_hardtanh_backward_out_grad_input));
  m.impl("hardswish",
  TORCH_FN(wrapper__hardswish));
  m.impl("hardswish.out",
  TORCH_FN(wrapper_out_hardswish_out_out));
  m.impl("hardswish_",
  TORCH_FN(wrapper__hardswish_));
  m.impl("hardswish_backward",
  TORCH_FN(wrapper__hardswish_backward));
  m.impl("leaky_relu", TORCH_FN(wrapper_leaky_relu));
  m.impl("leaky_relu.out", TORCH_FN(wrapper_leaky_relu_out_out));
  m.impl("leaky_relu_", TORCH_FN(wrapper_leaky_relu_));
  m.impl("leaky_relu_backward", TORCH_FN(wrapper_leaky_relu_backward));
  m.impl("leaky_relu_backward.grad_input", TORCH_FN(wrapper_leaky_relu_backward_out_grad_input));
  m.impl("log_sigmoid_forward",
  TORCH_FN(wrapper__log_sigmoid_forward));
  m.impl("log_sigmoid_forward.output",
  TORCH_FN(wrapper_output_log_sigmoid_forward_out_output));
  m.impl("log_sigmoid_backward",
  TORCH_FN(wrapper__log_sigmoid_backward));
  m.impl("log_sigmoid_backward.grad_input",
  TORCH_FN(wrapper_grad_input_log_sigmoid_backward_out_grad_input));
  m.impl("rrelu_with_noise",
  TORCH_FN(wrapper__rrelu_with_noise));
  m.impl("rrelu_with_noise.out",
  TORCH_FN(wrapper_out_rrelu_with_noise_out_out));
  m.impl("rrelu_with_noise_",
  TORCH_FN(wrapper__rrelu_with_noise_));
  m.impl("softplus", TORCH_FN(wrapper_softplus));
  m.impl("softplus.out", TORCH_FN(wrapper_softplus_out_out));
  m.impl("softplus_backward", TORCH_FN(wrapper_softplus_backward));
  m.impl("softplus_backward.grad_input", TORCH_FN(wrapper_softplus_backward_out_grad_input));
  m.impl("softshrink", TORCH_FN(wrapper_softshrink));
  m.impl("softshrink.out", TORCH_FN(wrapper_softshrink_out_out));
  m.impl("softshrink_backward", TORCH_FN(wrapper_softshrink_backward));
  m.impl("softshrink_backward.grad_input", TORCH_FN(wrapper_softshrink_backward_out_grad_input));
  m.impl("adaptive_avg_pool2d.out",
  TORCH_FN(wrapper_out_adaptive_avg_pool2d_out_out));
  m.impl("_adaptive_avg_pool2d",
  TORCH_FN(wrapper___adaptive_avg_pool2d));
  m.impl("_adaptive_avg_pool2d_backward",
  TORCH_FN(wrapper___adaptive_avg_pool2d_backward));
  m.impl("adaptive_avg_pool3d.out",
  TORCH_FN(wrapper_out_adaptive_avg_pool3d_out_out));
  m.impl("_adaptive_avg_pool3d",
  TORCH_FN(wrapper___adaptive_avg_pool3d));
  m.impl("adaptive_avg_pool3d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_adaptive_avg_pool3d_backward_out_grad_input));
  m.impl("_adaptive_avg_pool3d_backward",
  TORCH_FN(wrapper___adaptive_avg_pool3d_backward));
  m.impl("adaptive_max_pool2d", TORCH_FN(wrapper_adaptive_max_pool2d));
  m.impl("adaptive_max_pool2d.out", TORCH_FN(wrapper_adaptive_max_pool2d_out_out));
  m.impl("adaptive_max_pool2d_backward", TORCH_FN(wrapper_adaptive_max_pool2d_backward));
  m.impl("adaptive_max_pool2d_backward.grad_input", TORCH_FN(wrapper_adaptive_max_pool2d_backward_out_grad_input));
  m.impl("adaptive_max_pool3d", TORCH_FN(wrapper_adaptive_max_pool3d));
  m.impl("adaptive_max_pool3d.out", TORCH_FN(wrapper_adaptive_max_pool3d_out_out));
  m.impl("adaptive_max_pool3d_backward", TORCH_FN(wrapper_adaptive_max_pool3d_backward));
  m.impl("adaptive_max_pool3d_backward.grad_input", TORCH_FN(wrapper_adaptive_max_pool3d_backward_out_grad_input));
  m.impl("avg_pool2d", TORCH_FN(wrapper_avg_pool2d));
  m.impl("avg_pool2d.out", TORCH_FN(wrapper_avg_pool2d_out_out));
  m.impl("avg_pool2d_backward", TORCH_FN(wrapper_avg_pool2d_backward));
  m.impl("avg_pool2d_backward.grad_input", TORCH_FN(wrapper_avg_pool2d_backward_out_grad_input));
  m.impl("avg_pool3d", TORCH_FN(wrapper_avg_pool3d));
  m.impl("avg_pool3d.out", TORCH_FN(wrapper_avg_pool3d_out_out));
  m.impl("avg_pool3d_backward", TORCH_FN(wrapper_avg_pool3d_backward));
  m.impl("avg_pool3d_backward.grad_input", TORCH_FN(wrapper_avg_pool3d_backward_out_grad_input));
  m.impl("fractional_max_pool2d", TORCH_FN(wrapper_fractional_max_pool2d));
  m.impl("fractional_max_pool2d.output", TORCH_FN(wrapper_fractional_max_pool2d_out_output));
  m.impl("fractional_max_pool2d_backward",
  TORCH_FN(wrapper__fractional_max_pool2d_backward));
  m.impl("fractional_max_pool2d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_fractional_max_pool2d_backward_out_grad_input));
  m.impl("fractional_max_pool3d",
  TORCH_FN(wrapper__fractional_max_pool3d));
  m.impl("fractional_max_pool3d.output",
  TORCH_FN(wrapper_output_fractional_max_pool3d_out_output));
  m.impl("fractional_max_pool3d_backward",
  TORCH_FN(wrapper__fractional_max_pool3d_backward));
  m.impl("fractional_max_pool3d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_fractional_max_pool3d_backward_out_grad_input));
  m.impl("max_pool2d_with_indices", TORCH_FN(wrapper_max_pool2d_with_indices));
  m.impl("max_pool2d_with_indices.out", TORCH_FN(wrapper_max_pool2d_with_indices_out_out));
  m.impl("max_pool2d_with_indices_backward", TORCH_FN(wrapper_max_pool2d_with_indices_backward));
  m.impl("max_pool2d_with_indices_backward.grad_input", TORCH_FN(wrapper_max_pool2d_with_indices_backward_out_grad_input));
  m.impl("max_pool3d_with_indices",
  TORCH_FN(wrapper__max_pool3d_with_indices));
  m.impl("max_pool3d_with_indices.out",
  TORCH_FN(wrapper_out_max_pool3d_with_indices_out_out));
  m.impl("max_pool3d_with_indices_backward",
  TORCH_FN(wrapper__max_pool3d_with_indices_backward));
  m.impl("max_pool3d_with_indices_backward.grad_input",
  TORCH_FN(wrapper_grad_input_max_pool3d_with_indices_backward_out_grad_input));
  m.impl("max_unpool2d",
  TORCH_FN(wrapper__max_unpool2d));
  m.impl("max_unpool2d.out",
  TORCH_FN(wrapper_out_max_unpool2d_out_out));
  m.impl("max_unpool2d_backward",
  TORCH_FN(wrapper__max_unpool2d_backward));
  m.impl("max_unpool2d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_max_unpool2d_backward_out_grad_input));
  m.impl("max_unpool3d",
  TORCH_FN(wrapper__max_unpool3d));
  m.impl("max_unpool3d.out",
  TORCH_FN(wrapper_out_max_unpool3d_out_out));
  m.impl("max_unpool3d_backward",
  TORCH_FN(wrapper__max_unpool3d_backward));
  m.impl("max_unpool3d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_max_unpool3d_backward_out_grad_input));
  m.impl("reflection_pad1d", TORCH_FN(wrapper_reflection_pad1d));
  m.impl("reflection_pad1d.out", TORCH_FN(wrapper_reflection_pad1d_out_out));
  m.impl("reflection_pad1d_backward", TORCH_FN(wrapper_reflection_pad1d_backward));
  m.impl("reflection_pad1d_backward.grad_input", TORCH_FN(wrapper_reflection_pad1d_backward_out_grad_input));
  m.impl("reflection_pad2d",
  TORCH_FN(wrapper__reflection_pad2d));
  m.impl("reflection_pad2d.out",
  TORCH_FN(wrapper_out_reflection_pad2d_out_out));
  m.impl("reflection_pad2d_backward",
  TORCH_FN(wrapper__reflection_pad2d_backward));
  m.impl("reflection_pad2d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_reflection_pad2d_backward_out_grad_input));
  m.impl("reflection_pad3d", TORCH_FN(wrapper_reflection_pad3d));
  m.impl("reflection_pad3d.out", TORCH_FN(wrapper_reflection_pad3d_out_out));
  m.impl("reflection_pad3d_backward", TORCH_FN(wrapper_reflection_pad3d_backward));
  m.impl("reflection_pad3d_backward.grad_input", TORCH_FN(wrapper_reflection_pad3d_backward_out_grad_input));
  m.impl("replication_pad1d", TORCH_FN(wrapper_replication_pad1d));
  m.impl("replication_pad1d.out", TORCH_FN(wrapper_replication_pad1d_out_out));
  m.impl("replication_pad1d_backward", TORCH_FN(wrapper_replication_pad1d_backward));
  m.impl("replication_pad1d_backward.grad_input", TORCH_FN(wrapper_replication_pad1d_backward_out_grad_input));
  m.impl("replication_pad2d", TORCH_FN(wrapper_replication_pad2d));
  m.impl("replication_pad2d.out", TORCH_FN(wrapper_replication_pad2d_out_out));
  m.impl("replication_pad2d_backward",
  TORCH_FN(wrapper__replication_pad2d_backward));
  m.impl("replication_pad2d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_replication_pad2d_backward_out_grad_input));
  m.impl("replication_pad3d", TORCH_FN(wrapper_replication_pad3d));
  m.impl("replication_pad3d.out", TORCH_FN(wrapper_replication_pad3d_out_out));
  m.impl("replication_pad3d_backward",
  TORCH_FN(wrapper__replication_pad3d_backward));
  m.impl("replication_pad3d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_replication_pad3d_backward_out_grad_input));
  m.impl("upsample_nearest3d.vec",
  TORCH_FN(wrapper_vec_upsample_nearest3d_vec));
  m.impl("upsample_nearest3d_backward.vec",
  TORCH_FN(wrapper_vec_upsample_nearest3d_backward_vec));
  m.impl("upsample_linear1d", TORCH_FN(wrapper_upsample_linear1d));
  m.impl("upsample_linear1d.out", TORCH_FN(wrapper_upsample_linear1d_out_out));
  m.impl("upsample_linear1d_backward", TORCH_FN(wrapper_upsample_linear1d_backward));
  m.impl("upsample_linear1d_backward.grad_input", TORCH_FN(wrapper_upsample_linear1d_backward_out_grad_input));
  m.impl("upsample_bilinear2d", TORCH_FN(wrapper_upsample_bilinear2d));
  m.impl("upsample_bilinear2d.out", TORCH_FN(wrapper_upsample_bilinear2d_out_out));
  m.impl("upsample_bilinear2d_backward", TORCH_FN(wrapper_upsample_bilinear2d_backward));
  m.impl("upsample_bilinear2d_backward.grad_input", TORCH_FN(wrapper_upsample_bilinear2d_backward_out_grad_input));
  m.impl("upsample_bicubic2d", TORCH_FN(wrapper_upsample_bicubic2d));
  m.impl("upsample_bicubic2d.out", TORCH_FN(wrapper_upsample_bicubic2d_out_out));
  m.impl("upsample_bicubic2d_backward", TORCH_FN(wrapper_upsample_bicubic2d_backward));
  m.impl("upsample_bicubic2d_backward.grad_input", TORCH_FN(wrapper_upsample_bicubic2d_backward_out_grad_input));
  m.impl("upsample_trilinear3d", TORCH_FN(wrapper_upsample_trilinear3d));
  m.impl("upsample_trilinear3d.out", TORCH_FN(wrapper_upsample_trilinear3d_out_out));
  m.impl("upsample_trilinear3d_backward", TORCH_FN(wrapper_upsample_trilinear3d_backward));
  m.impl("upsample_trilinear3d_backward.grad_input", TORCH_FN(wrapper_upsample_trilinear3d_backward_out_grad_input));
  m.impl("upsample_nearest1d", TORCH_FN(wrapper_upsample_nearest1d));
  m.impl("upsample_nearest1d.out", TORCH_FN(wrapper_upsample_nearest1d_out_out));
  m.impl("upsample_nearest1d_backward", TORCH_FN(wrapper_upsample_nearest1d_backward));
  m.impl("upsample_nearest1d_backward.grad_input", TORCH_FN(wrapper_upsample_nearest1d_backward_out_grad_input));
  m.impl("upsample_nearest2d", TORCH_FN(wrapper_upsample_nearest2d));
  m.impl("upsample_nearest2d.out", TORCH_FN(wrapper_upsample_nearest2d_out_out));
  m.impl("upsample_nearest2d_backward", TORCH_FN(wrapper_upsample_nearest2d_backward));
  m.impl("upsample_nearest2d_backward.grad_input", TORCH_FN(wrapper_upsample_nearest2d_backward_out_grad_input));
  m.impl("upsample_nearest3d", TORCH_FN(wrapper_upsample_nearest3d));
  m.impl("upsample_nearest3d.out", TORCH_FN(wrapper_upsample_nearest3d_out_out));
  m.impl("upsample_nearest3d_backward", TORCH_FN(wrapper_upsample_nearest3d_backward));
  m.impl("upsample_nearest3d_backward.grad_input", TORCH_FN(wrapper_upsample_nearest3d_backward_out_grad_input));
  m.impl("sigmoid_backward", TORCH_FN(wrapper_sigmoid_backward));
  m.impl("sigmoid_backward.grad_input", TORCH_FN(wrapper_sigmoid_backward_out_grad_input));
  m.impl("logit_backward", TORCH_FN(wrapper_logit_backward));
  m.impl("logit_backward.grad_input", TORCH_FN(wrapper_logit_backward_out_grad_input));
  m.impl("tanh_backward", TORCH_FN(wrapper_tanh_backward));
  m.impl("tanh_backward.grad_input", TORCH_FN(wrapper_tanh_backward_out_grad_input));
  m.impl("slow_conv_transpose2d", TORCH_FN(wrapper_slow_conv_transpose2d));
  m.impl("slow_conv_transpose2d.out", TORCH_FN(wrapper_slow_conv_transpose2d_out_out));
  m.impl("slow_conv_transpose2d_backward.grad_output",
  TORCH_FN(wrapper_grad_output_slow_conv_transpose2d_backward_out_grad_output));
  m.impl("slow_conv_transpose2d_backward.output_mask",
  TORCH_FN(wrapper_output_mask_slow_conv_transpose2d_backward_output_mask));
  m.impl("slow_conv_transpose3d",
  TORCH_FN(wrapper__slow_conv_transpose3d));
  m.impl("slow_conv_transpose3d.out",
  TORCH_FN(wrapper_out_slow_conv_transpose3d_out_out));
  m.impl("slow_conv_transpose3d_backward.grad_output",
  TORCH_FN(wrapper_grad_output_slow_conv_transpose3d_backward_out_grad_output));
  m.impl("slow_conv_transpose3d_backward.output_mask",
  TORCH_FN(wrapper_output_mask_slow_conv_transpose3d_backward_output_mask));
  m.impl("thnn_conv2d_forward",
  TORCH_FN(wrapper__thnn_conv2d_forward));
  m.impl("thnn_conv2d_forward.output",
  TORCH_FN(wrapper_output_thnn_conv2d_forward_out_output));
  m.impl("thnn_conv2d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_thnn_conv2d_backward_out_grad_input));
  m.impl("thnn_conv2d_backward.output_mask",
  TORCH_FN(wrapper_output_mask_thnn_conv2d_backward_output_mask));
  m.impl("slow_conv3d_forward",
  TORCH_FN(wrapper__slow_conv3d_forward));
  m.impl("slow_conv3d_forward.output",
  TORCH_FN(wrapper_output_slow_conv3d_forward_out_output));
  m.impl("slow_conv3d_backward.grad_input",
  TORCH_FN(wrapper_grad_input_slow_conv3d_backward_out_grad_input));
  m.impl("slow_conv3d_backward.output_mask",
  TORCH_FN(wrapper_output_mask_slow_conv3d_backward_output_mask));
  m.impl("slow_conv_dilated2d",
  TORCH_FN(wrapper__slow_conv_dilated2d));
  m.impl("slow_conv_dilated2d_backward",
  TORCH_FN(wrapper__slow_conv_dilated2d_backward));
  m.impl("slow_conv_dilated3d",
  TORCH_FN(wrapper__slow_conv_dilated3d));
  m.impl("slow_conv_dilated3d_backward",
  TORCH_FN(wrapper__slow_conv_dilated3d_backward));
  m.impl("col2im",
  TORCH_FN(wrapper__col2im));
  m.impl("col2im.out",
  TORCH_FN(wrapper_out_col2im_out_out));
  m.impl("col2im_backward",
  TORCH_FN(wrapper__col2im_backward));
  m.impl("col2im_backward.grad_input",
  TORCH_FN(wrapper_grad_input_col2im_backward_out_grad_input));
  m.impl("im2col",
  TORCH_FN(wrapper__im2col));
  m.impl("im2col.out",
  TORCH_FN(wrapper_out_im2col_out_out));
  m.impl("im2col_backward",
  TORCH_FN(wrapper__im2col_backward));
  m.impl("im2col_backward.grad_input",
  TORCH_FN(wrapper_grad_input_im2col_backward_out_grad_input));
  m.impl("isposinf", TORCH_FN(wrapper_isposinf));
  m.impl("isposinf.out", TORCH_FN(wrapper_isposinf_out_out));
  m.impl("isneginf", TORCH_FN(wrapper_isneginf));
  m.impl("isneginf.out", TORCH_FN(wrapper_isneginf_out_out));
  m.impl("special_entr", TORCH_FN(wrapper_special_entr));
  m.impl("special_entr.out", TORCH_FN(wrapper_special_entr_out_out));
  m.impl("special_ndtri", TORCH_FN(wrapper_special_ndtri));
  m.impl("special_ndtri.out", TORCH_FN(wrapper_special_ndtri_out_out));
  m.impl("special_erfcx", TORCH_FN(wrapper_special_erfcx));
  m.impl("special_erfcx.out", TORCH_FN(wrapper_special_erfcx_out_out));
  m.impl("special_xlog1py", TORCH_FN(wrapper_special_xlog1py));
  m.impl("special_xlog1py.out", TORCH_FN(wrapper_special_xlog1py_out_out));
  m.impl("special_zeta", TORCH_FN(wrapper_special_zeta));
  m.impl("special_zeta.out", TORCH_FN(wrapper_special_zeta_out_out));
  m.impl("special_i0e", TORCH_FN(wrapper_special_i0e));
  m.impl("special_i0e.out", TORCH_FN(wrapper_special_i0e_out_out));
  m.impl("special_i1", TORCH_FN(wrapper_special_i1));
  m.impl("special_i1.out", TORCH_FN(wrapper_special_i1_out_out));
  m.impl("special_i1e", TORCH_FN(wrapper_special_i1e));
  m.impl("special_i1e.out", TORCH_FN(wrapper_special_i1e_out_out));
  m.impl("linalg_cholesky_ex",
  TORCH_FN(wrapper__linalg_cholesky_ex));
  m.impl("linalg_cholesky_ex.L",
  TORCH_FN(wrapper_L_linalg_cholesky_ex_out_L));
  m.impl("_det_lu_based_helper",
  TORCH_FN(wrapper___det_lu_based_helper));
  m.impl("_det_lu_based_helper_backward_helper",
  TORCH_FN(wrapper___det_lu_based_helper_backward_helper));
  m.impl("linalg_lstsq.out",
  TORCH_FN(wrapper_out_linalg_lstsq_out_out));
  m.impl("linalg_slogdet",
  TORCH_FN(wrapper__linalg_slogdet));
  m.impl("linalg_slogdet.out",
  TORCH_FN(wrapper_out_linalg_slogdet_out_out));
  m.impl("linalg_eig",
  TORCH_FN(wrapper__linalg_eig));
  m.impl("linalg_eig.out",
  TORCH_FN(wrapper_out_linalg_eig_out_out));
  m.impl("linalg_eigh",
  TORCH_FN(wrapper__linalg_eigh));
  m.impl("linalg_eigh.eigvals",
  TORCH_FN(wrapper_eigvals_linalg_eigh_out_eigvals));
  m.impl("linalg_eigvalsh.out",
  TORCH_FN(wrapper_out_linalg_eigvalsh_out_out));
  m.impl("linalg_householder_product",
  TORCH_FN(wrapper__linalg_householder_product));
  m.impl("linalg_householder_product.out",
  TORCH_FN(wrapper_out_linalg_householder_product_out_out));
  m.impl("_linalg_inv_out_helper_",
  TORCH_FN(wrapper___linalg_inv_out_helper_));
  m.impl("linalg_vector_norm",
  TORCH_FN(wrapper__linalg_vector_norm));
  m.impl("linalg_vector_norm.out",
  TORCH_FN(wrapper_out_linalg_vector_norm_out_out));
  m.impl("linalg_solve",
  TORCH_FN(wrapper__linalg_solve));
  m.impl("linalg_solve.out",
  TORCH_FN(wrapper_out_linalg_solve_out_out));
  m.impl("_linalg_qr_helper",
  TORCH_FN(wrapper___linalg_qr_helper));
  m.impl("_test_optional_intlist",
  TORCH_FN(wrapper___test_optional_intlist));
  m.impl("_test_optional_filled_intlist",
  TORCH_FN(wrapper___test_optional_filled_intlist));
  m.impl("_test_optional_floatlist",
  TORCH_FN(wrapper___test_optional_floatlist));
  m.impl("segment_reduce",
  TORCH_FN(wrapper__segment_reduce));
  m.impl("_segment_reduce_backward",
  TORCH_FN(wrapper___segment_reduce_backward));
}

} // anonymous namespace

namespace cpu {


void _assert_async(const at::Tensor & self) {
return wrapper___assert_async(self);
}

at::Tensor & abs_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_out_abs_out_out(self, out);
}

at::Tensor & abs_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_out_abs_out_out(self, out);
}

at::Tensor angle(const at::Tensor & self) {
return wrapper__angle(self);
}

at::Tensor & angle_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_out_angle_out_out(self, out);
}

at::Tensor & angle_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_out_angle_out_out(self, out);
}

at::Tensor view_as_real(const at::Tensor & self) {
return wrapper__view_as_real(self);
}

at::Tensor view_as_complex(const at::Tensor & self) {
return wrapper__view_as_complex(self);
}

at::Tensor sgn(const at::Tensor & self) {
return wrapper_sgn(self);
}

at::Tensor & sgn_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sgn_out_out(self, out);
}

at::Tensor & sgn_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sgn_out_out(self, out);
}

at::Tensor & sgn_(at::Tensor & self) {
return wrapper_sgn_(self);
}

at::Tensor & conj_physical_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_out_conj_physical_out_out(self, out);
}

at::Tensor & conj_physical_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_out_conj_physical_out_out(self, out);
}

at::Tensor acos(const at::Tensor & self) {
return wrapper_acos(self);
}

at::Tensor & acos_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_acos_out_out(self, out);
}

at::Tensor & acos_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_acos_out_out(self, out);
}

at::Tensor & acos_(at::Tensor & self) {
return wrapper_acos_(self);
}

at::Tensor add(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_add_Tensor(self, other, alpha);
}

at::Tensor & add_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_add_out_out(self, other, alpha, out);
}

at::Tensor & add_outf(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_add_out_out(self, other, alpha, out);
}

at::Tensor & add_(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_add__Tensor(self, other, alpha);
}

at::Tensor _add_relu(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_Tensor__add_relu_Tensor(self, other, alpha);
}

at::Tensor & _add_relu_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_out__add_relu_out_out(self, other, alpha, out);
}

at::Tensor & _add_relu_outf(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_out__add_relu_out_out(self, other, alpha, out);
}

at::Tensor & _add_relu_(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_Tensor__add_relu__Tensor(self, other, alpha);
}

at::Tensor _add_relu(const at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha) {
return wrapper_Scalar__add_relu_Scalar(self, other, alpha);
}

at::Tensor & _add_relu_(at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha) {
return wrapper_Scalar__add_relu__Scalar(self, other, alpha);
}

at::Tensor addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmv(self, mat, vec, beta, alpha);
}

at::Tensor & addmv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmv_out_out(self, mat, vec, beta, alpha, out);
}

at::Tensor & addmv_outf(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_addmv_out_out(self, mat, vec, beta, alpha, out);
}

at::Tensor & addmv_(at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmv_(self, mat, vec, beta, alpha);
}

at::Tensor addr(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper__addr(self, vec1, vec2, beta, alpha);
}

at::Tensor & addr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_out_addr_out_out(self, vec1, vec2, beta, alpha, out);
}

at::Tensor & addr_outf(const at::Tensor & self, const at::Tensor & vec1, const at::Tensor & vec2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_out_addr_out_out(self, vec1, vec2, beta, alpha, out);
}

at::Tensor all(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_all_dim(self, dim, keepdim);
}

at::Tensor & all_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_all_out_out(self, dim, keepdim, out);
}

at::Tensor & all_outf(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out) {
return wrapper_all_out_out(self, dim, keepdim, out);
}

at::Tensor any(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_any_dim(self, dim, keepdim);
}

at::Tensor & any_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_any_out_out(self, dim, keepdim, out);
}

at::Tensor & any_outf(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out) {
return wrapper_any_out_out(self, dim, keepdim, out);
}

at::Tensor & arange_out(at::Tensor & out, const at::Scalar & start, const at::Scalar & end, const at::Scalar & step) {
return wrapper_start_out_arange_out_start_out(start, end, step, out);
}

at::Tensor & arange_outf(const at::Scalar & start, const at::Scalar & end, const at::Scalar & step, at::Tensor & out) {
return wrapper_start_out_arange_out_start_out(start, end, step, out);
}

at::Tensor argmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_argmax(self, dim, keepdim);
}

at::Tensor & argmax_out(at::Tensor & out, const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_argmax_out_out(self, dim, keepdim, out);
}

at::Tensor & argmax_outf(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & out) {
return wrapper_argmax_out_out(self, dim, keepdim, out);
}

at::Tensor argmin(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_argmin(self, dim, keepdim);
}

at::Tensor & argmin_out(at::Tensor & out, const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_argmin_out_out(self, dim, keepdim, out);
}

at::Tensor & argmin_outf(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & out) {
return wrapper_argmin_out_out(self, dim, keepdim, out);
}

at::Tensor acosh(const at::Tensor & self) {
return wrapper_acosh(self);
}

at::Tensor & acosh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_acosh_out_out(self, out);
}

at::Tensor & acosh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_acosh_out_out(self, out);
}

at::Tensor & acosh_(at::Tensor & self) {
return wrapper_acosh_(self);
}

at::Tensor asinh(const at::Tensor & self) {
return wrapper_asinh(self);
}

at::Tensor & asinh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_asinh_out_out(self, out);
}

at::Tensor & asinh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_asinh_out_out(self, out);
}

at::Tensor & asinh_(at::Tensor & self) {
return wrapper_asinh_(self);
}

at::Tensor atanh(const at::Tensor & self) {
return wrapper_atanh(self);
}

at::Tensor & atanh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_atanh_out_out(self, out);
}

at::Tensor & atanh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_atanh_out_out(self, out);
}

at::Tensor & atanh_(at::Tensor & self) {
return wrapper_atanh_(self);
}

at::Tensor as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
return wrapper__as_strided(self, size, stride, storage_offset);
}

at::Tensor asin(const at::Tensor & self) {
return wrapper_asin(self);
}

at::Tensor & asin_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_asin_out_out(self, out);
}

at::Tensor & asin_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_asin_out_out(self, out);
}

at::Tensor & asin_(at::Tensor & self) {
return wrapper_asin_(self);
}

at::Tensor atan(const at::Tensor & self) {
return wrapper_atan(self);
}

at::Tensor & atan_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_atan_out_out(self, out);
}

at::Tensor & atan_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_atan_out_out(self, out);
}

at::Tensor & atan_(at::Tensor & self) {
return wrapper_atan_(self);
}

at::Tensor baddbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper__baddbmm(self, batch1, batch2, beta, alpha);
}

at::Tensor & baddbmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_out_baddbmm_out_out(self, batch1, batch2, beta, alpha, out);
}

at::Tensor & baddbmm_outf(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_out_baddbmm_out_out(self, batch1, batch2, beta, alpha, out);
}

at::Tensor & baddbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper__baddbmm_(self, batch1, batch2, beta, alpha);
}

at::Tensor & bernoulli_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::Generator> generator) {
return wrapper_out_bernoulli_out_out(self, generator, out);
}

at::Tensor & bernoulli_outf(const at::Tensor & self, c10::optional<at::Generator> generator, at::Tensor & out) {
return wrapper_out_bernoulli_out_out(self, generator, out);
}

at::Tensor & bernoulli_(at::Tensor & self, const at::Tensor & p, c10::optional<at::Generator> generator) {
return wrapper_Tensor_bernoulli__Tensor(self, p, generator);
}

at::Tensor & bernoulli_(at::Tensor & self, double p, c10::optional<at::Generator> generator) {
return wrapper_float_bernoulli__float(self, p, generator);
}

at::Tensor binary_cross_entropy(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction) {
return wrapper__binary_cross_entropy(self, target, weight, reduction);
}

at::Tensor & binary_cross_entropy_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction) {
return wrapper_out_binary_cross_entropy_out_out(self, target, weight, reduction, out);
}

at::Tensor & binary_cross_entropy_outf(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & out) {
return wrapper_out_binary_cross_entropy_out_out(self, target, weight, reduction, out);
}

at::Tensor binary_cross_entropy_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction) {
return wrapper__binary_cross_entropy_backward(grad_output, self, target, weight, reduction);
}

at::Tensor & binary_cross_entropy_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction) {
return wrapper_grad_input_binary_cross_entropy_backward_out_grad_input(grad_output, self, target, weight, reduction, grad_input);
}

at::Tensor & binary_cross_entropy_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & grad_input) {
return wrapper_grad_input_binary_cross_entropy_backward_out_grad_input(grad_output, self, target, weight, reduction, grad_input);
}

at::Tensor bincount(const at::Tensor & self, const c10::optional<at::Tensor> & weights, int64_t minlength) {
return wrapper__bincount(self, weights, minlength);
}

at::Tensor bitwise_not(const at::Tensor & self) {
return wrapper_bitwise_not(self);
}

at::Tensor & bitwise_not_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_bitwise_not_out_out(self, out);
}

at::Tensor & bitwise_not_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_bitwise_not_out_out(self, out);
}

at::Tensor & bitwise_not_(at::Tensor & self) {
return wrapper_bitwise_not_(self);
}

at::Tensor copysign(const at::Tensor & self, const at::Tensor & other) {
return wrapper_copysign_Tensor(self, other);
}

at::Tensor & copysign_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_copysign_out_out(self, other, out);
}

at::Tensor & copysign_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_copysign_out_out(self, other, out);
}

at::Tensor & copysign_(at::Tensor & self, const at::Tensor & other) {
return wrapper_copysign__Tensor(self, other);
}

at::Tensor & logical_not_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_out_logical_not_out_out(self, out);
}

at::Tensor & logical_not_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_out_logical_not_out_out(self, out);
}

at::Tensor & logical_xor_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_out_logical_xor_out_out(self, other, out);
}

at::Tensor & logical_xor_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_out_logical_xor_out_out(self, other, out);
}

at::Tensor & logical_and_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_out_logical_and_out_out(self, other, out);
}

at::Tensor & logical_and_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_out_logical_and_out_out(self, other, out);
}

at::Tensor & logical_or_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_out_logical_or_out_out(self, other, out);
}

at::Tensor & logical_or_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_out_logical_or_out_out(self, other, out);
}

at::Tensor bmm(const at::Tensor & self, const at::Tensor & mat2) {
return wrapper__bmm(self, mat2);
}

at::Tensor & bmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat2) {
return wrapper_out_bmm_out_out(self, mat2, out);
}

at::Tensor & bmm_outf(const at::Tensor & self, const at::Tensor & mat2, at::Tensor & out) {
return wrapper_out_bmm_out_out(self, mat2, out);
}

at::Tensor ceil(const at::Tensor & self) {
return wrapper_ceil(self);
}

at::Tensor & ceil_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_ceil_out_out(self, out);
}

at::Tensor & ceil_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_ceil_out_out(self, out);
}

at::Tensor & ceil_(at::Tensor & self) {
return wrapper_ceil_(self);
}

at::Tensor clamp(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
return wrapper_clamp(self, min, max);
}

at::Tensor & clamp_out(at::Tensor & out, const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
return wrapper_clamp_out_out(self, min, max, out);
}

at::Tensor & clamp_outf(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max, at::Tensor & out) {
return wrapper_clamp_out_out(self, min, max, out);
}

at::Tensor & clamp_(at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
return wrapper_clamp_(self, min, max);
}

at::Tensor clamp(const at::Tensor & self, const c10::optional<at::Tensor> & min, const c10::optional<at::Tensor> & max) {
return wrapper_Tensor_clamp_Tensor(self, min, max);
}

at::Tensor & clamp_out(at::Tensor & out, const at::Tensor & self, const c10::optional<at::Tensor> & min, const c10::optional<at::Tensor> & max) {
return wrapper_Tensor_out_clamp_out_Tensor_out(self, min, max, out);
}

at::Tensor & clamp_outf(const at::Tensor & self, const c10::optional<at::Tensor> & min, const c10::optional<at::Tensor> & max, at::Tensor & out) {
return wrapper_Tensor_out_clamp_out_Tensor_out(self, min, max, out);
}

at::Tensor & clamp_max_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & max) {
return wrapper_out_clamp_max_out_out(self, max, out);
}

at::Tensor & clamp_max_outf(const at::Tensor & self, const at::Scalar & max, at::Tensor & out) {
return wrapper_out_clamp_max_out_out(self, max, out);
}

at::Tensor & clamp_max_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & max) {
return wrapper_Tensor_out_clamp_max_out_Tensor_out(self, max, out);
}

at::Tensor & clamp_max_outf(const at::Tensor & self, const at::Tensor & max, at::Tensor & out) {
return wrapper_Tensor_out_clamp_max_out_Tensor_out(self, max, out);
}

at::Tensor & clamp_min_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & min) {
return wrapper_out_clamp_min_out_out(self, min, out);
}

at::Tensor & clamp_min_outf(const at::Tensor & self, const at::Scalar & min, at::Tensor & out) {
return wrapper_out_clamp_min_out_out(self, min, out);
}

at::Tensor & clamp_min_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & min) {
return wrapper_Tensor_out_clamp_min_out_Tensor_out(self, min, out);
}

at::Tensor & clamp_min_outf(const at::Tensor & self, const at::Tensor & min, at::Tensor & out) {
return wrapper_Tensor_out_clamp_min_out_Tensor_out(self, min, out);
}

at::Tensor & complex_out(at::Tensor & out, const at::Tensor & real, const at::Tensor & imag) {
return wrapper_out_complex_out_out(real, imag, out);
}

at::Tensor & complex_outf(const at::Tensor & real, const at::Tensor & imag, at::Tensor & out) {
return wrapper_out_complex_out_out(real, imag, out);
}

at::Tensor & polar_out(at::Tensor & out, const at::Tensor & abs, const at::Tensor & angle) {
return wrapper_out_polar_out_out(abs, angle, out);
}

at::Tensor & polar_outf(const at::Tensor & abs, const at::Tensor & angle, at::Tensor & out) {
return wrapper_out_polar_out_out(abs, angle, out);
}

at::Tensor cos(const at::Tensor & self) {
return wrapper_cos(self);
}

at::Tensor & cos_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_cos_out_out(self, out);
}

at::Tensor & cos_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_cos_out_out(self, out);
}

at::Tensor & cos_(at::Tensor & self) {
return wrapper_cos_(self);
}

at::Tensor cosh(const at::Tensor & self) {
return wrapper_cosh(self);
}

at::Tensor & cosh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_cosh_out_out(self, out);
}

at::Tensor & cosh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_cosh_out_out(self, out);
}

at::Tensor & cosh_(at::Tensor & self) {
return wrapper_cosh_(self);
}

at::Tensor count_nonzero(const at::Tensor & self, at::IntArrayRef dim) {
return wrapper_dim_IntList_count_nonzero_dim_IntList(self, dim);
}

void _cummax_helper(const at::Tensor & self, at::Tensor & values, at::Tensor & indices, int64_t dim) {
return wrapper___cummax_helper(self, values, indices, dim);
}

void _cummin_helper(const at::Tensor & self, at::Tensor & values, at::Tensor & indices, int64_t dim) {
return wrapper___cummin_helper(self, values, indices, dim);
}

at::Tensor cumprod(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumprod(self, dim, dtype);
}

at::Tensor & cumprod_out(at::Tensor & out, const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumprod_out_out(self, dim, dtype, out);
}

at::Tensor & cumprod_outf(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_cumprod_out_out(self, dim, dtype, out);
}

at::Tensor & cumprod_(at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumprod_(self, dim, dtype);
}

at::Tensor cumsum(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumsum(self, dim, dtype);
}

at::Tensor & cumsum_out(at::Tensor & out, const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumsum_out_out(self, dim, dtype, out);
}

at::Tensor & cumsum_outf(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_cumsum_out_out(self, dim, dtype, out);
}

at::Tensor & cumsum_(at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumsum_(self, dim, dtype);
}

::std::tuple<at::Tensor,at::Tensor> _ctc_loss(const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {
return wrapper___ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
}

at::Tensor _ctc_loss_backward(const at::Tensor & grad, const at::Tensor & log_probs, const at::Tensor & targets, at::IntArrayRef input_lengths, at::IntArrayRef target_lengths, const at::Tensor & neg_log_likelihood, const at::Tensor & log_alpha, int64_t blank, bool zero_infinity) {
return wrapper___ctc_loss_backward(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
}

at::Tensor div(const at::Tensor & self, const at::Tensor & other) {
return wrapper_div_Tensor(self, other);
}

at::Tensor & div_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_div_out_out(self, other, out);
}

at::Tensor & div_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_div_out_out(self, other, out);
}

at::Tensor & div_(at::Tensor & self, const at::Tensor & other) {
return wrapper_div__Tensor(self, other);
}

at::Tensor div(const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
return wrapper_div_Tensor_mode(self, other, rounding_mode);
}

at::Tensor & div_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
return wrapper_div_out_out_mode(self, other, rounding_mode, out);
}

at::Tensor & div_outf(const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode, at::Tensor & out) {
return wrapper_div_out_out_mode(self, other, rounding_mode, out);
}

at::Tensor & div_(at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
return wrapper_div__Tensor_mode(self, other, rounding_mode);
}

at::Tensor dot(const at::Tensor & self, const at::Tensor & tensor) {
return wrapper__dot(self, tensor);
}

at::Tensor vdot(const at::Tensor & self, const at::Tensor & other) {
return wrapper__vdot(self, other);
}

at::Tensor embedding_dense_backward(const at::Tensor & grad_output, const at::Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
return wrapper__embedding_dense_backward(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
}

at::Tensor & embedding_renorm_(at::Tensor & self, const at::Tensor & indices, double max_norm, double norm_type) {
return wrapper__embedding_renorm_(self, indices, max_norm, norm_type);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> _embedding_bag_forward_only(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<at::Tensor> & per_sample_weights, bool include_last_offset, int64_t padding_idx) {
return wrapper___embedding_bag_forward_only(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor,at::Tensor> _embedding_bag(const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const c10::optional<at::Tensor> & per_sample_weights, bool include_last_offset, int64_t padding_idx) {
return wrapper___embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset, padding_idx);
}

at::Tensor _embedding_bag_dense_backward(const at::Tensor & grad, const at::Tensor & indices, const at::Tensor & offset2bag, const at::Tensor & bag_size, const at::Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const c10::optional<at::Tensor> & per_sample_weights, int64_t padding_idx) {
return wrapper___embedding_bag_dense_backward(grad, indices, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights, padding_idx);
}

at::Tensor _embedding_bag_per_sample_weights_backward(const at::Tensor & grad, const at::Tensor & weight, const at::Tensor & indices, const at::Tensor & offsets, const at::Tensor & offset2bag, int64_t mode, int64_t padding_idx) {
return wrapper___embedding_bag_per_sample_weights_backward(grad, weight, indices, offsets, offset2bag, mode, padding_idx);
}

at::Tensor empty(at::IntArrayRef size, at::TensorOptions options, c10::optional<at::MemoryFormat> memory_format) {
return wrapper_memory_format_empty_memory_format(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::check_tensor_options_and_extract_memory_format(options, memory_format));
}

at::Tensor empty(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
return wrapper_memory_format_empty_memory_format(size, dtype, layout, device, pin_memory, memory_format);
}

at::Tensor _empty_affine_quantized(at::IntArrayRef size, at::TensorOptions options, double scale, int64_t zero_point, c10::optional<at::MemoryFormat> memory_format) {
return wrapper___empty_affine_quantized(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), scale, zero_point, c10::impl::check_tensor_options_and_extract_memory_format(options, memory_format));
}

at::Tensor _empty_affine_quantized(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, double scale, int64_t zero_point, c10::optional<at::MemoryFormat> memory_format) {
return wrapper___empty_affine_quantized(size, dtype, layout, device, pin_memory, scale, zero_point, memory_format);
}

at::Tensor _empty_per_channel_affine_quantized(at::IntArrayRef size, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, at::TensorOptions options, c10::optional<at::MemoryFormat> memory_format) {
return wrapper___empty_per_channel_affine_quantized(size, scales, zero_points, axis, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::check_tensor_options_and_extract_memory_format(options, memory_format));
}

at::Tensor _empty_per_channel_affine_quantized(at::IntArrayRef size, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
return wrapper___empty_per_channel_affine_quantized(size, scales, zero_points, axis, dtype, layout, device, pin_memory, memory_format);
}

const at::Tensor & resize_(const at::Tensor & self, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format) {
return wrapper__resize_(self, size, memory_format);
}

at::Tensor empty_strided(at::IntArrayRef size, at::IntArrayRef stride, at::TensorOptions options) {
return wrapper__empty_strided(size, stride, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
}

at::Tensor empty_strided(at::IntArrayRef size, at::IntArrayRef stride, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
return wrapper__empty_strided(size, stride, dtype, layout, device, pin_memory);
}

at::Tensor erf(const at::Tensor & self) {
return wrapper_erf(self);
}

at::Tensor & erf_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_erf_out_out(self, out);
}

at::Tensor & erf_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_erf_out_out(self, out);
}

at::Tensor & erf_(at::Tensor & self) {
return wrapper_erf_(self);
}

at::Tensor erfc(const at::Tensor & self) {
return wrapper_erfc(self);
}

at::Tensor & erfc_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_erfc_out_out(self, out);
}

at::Tensor & erfc_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_erfc_out_out(self, out);
}

at::Tensor & erfc_(at::Tensor & self) {
return wrapper_erfc_(self);
}

at::Tensor exp(const at::Tensor & self) {
return wrapper_exp(self);
}

at::Tensor & exp_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_exp_out_out(self, out);
}

at::Tensor & exp_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_exp_out_out(self, out);
}

at::Tensor & exp_(at::Tensor & self) {
return wrapper_exp_(self);
}

at::Tensor exp2(const at::Tensor & self) {
return wrapper_exp2(self);
}

at::Tensor & exp2_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_exp2_out_out(self, out);
}

at::Tensor & exp2_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_exp2_out_out(self, out);
}

at::Tensor & exp2_(at::Tensor & self) {
return wrapper_exp2_(self);
}

at::Tensor expm1(const at::Tensor & self) {
return wrapper_expm1(self);
}

at::Tensor & expm1_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_expm1_out_out(self, out);
}

at::Tensor & expm1_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_expm1_out_out(self, out);
}

at::Tensor & expm1_(at::Tensor & self) {
return wrapper_expm1_(self);
}

at::Tensor & eye_out(at::Tensor & out, int64_t n) {
return wrapper_out_eye_out_out(n, out);
}

at::Tensor & eye_outf(int64_t n, at::Tensor & out) {
return wrapper_out_eye_out_out(n, out);
}

at::Tensor & eye_out(at::Tensor & out, int64_t n, int64_t m) {
return wrapper_m_out_eye_out_m_out(n, m, out);
}

at::Tensor & eye_outf(int64_t n, int64_t m, at::Tensor & out) {
return wrapper_m_out_eye_out_m_out(n, m, out);
}

at::Tensor & fill_(at::Tensor & self, const at::Scalar & value) {
return wrapper_Scalar_fill__Scalar(self, value);
}

at::Tensor & fill_(at::Tensor & self, const at::Tensor & value) {
return wrapper_Tensor_fill__Tensor(self, value);
}

at::Tensor floor(const at::Tensor & self) {
return wrapper_floor(self);
}

at::Tensor & floor_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_floor_out_out(self, out);
}

at::Tensor & floor_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_floor_out_out(self, out);
}

at::Tensor & floor_(at::Tensor & self) {
return wrapper_floor_(self);
}

at::Tensor floor_divide(const at::Tensor & self, const at::Tensor & other) {
return wrapper__floor_divide(self, other);
}

at::Tensor & floor_divide_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_out_floor_divide_out_out(self, other, out);
}

at::Tensor & floor_divide_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_out_floor_divide_out_out(self, other, out);
}

at::Tensor & floor_divide_(at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_floor_divide__Tensor(self, other);
}

at::Tensor frac(const at::Tensor & self) {
return wrapper_frac(self);
}

at::Tensor & frac_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_frac_out_out(self, out);
}

at::Tensor & frac_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_frac_out_out(self, out);
}

at::Tensor & frac_(at::Tensor & self) {
return wrapper_frac_(self);
}

at::Tensor from_file(c10::string_view filename, c10::optional<bool> shared, c10::optional<int64_t> size, at::TensorOptions options) {
return wrapper__from_file(filename, shared, size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
}

at::Tensor from_file(c10::string_view filename, c10::optional<bool> shared, c10::optional<int64_t> size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
return wrapper__from_file(filename, shared, size, dtype, layout, device, pin_memory);
}

at::Tensor gcd(const at::Tensor & self, const at::Tensor & other) {
return wrapper_gcd(self, other);
}

at::Tensor & gcd_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_gcd_out_out(self, other, out);
}

at::Tensor & gcd_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_gcd_out_out(self, other, out);
}

at::Tensor & gcd_(at::Tensor & self, const at::Tensor & other) {
return wrapper_gcd_(self, other);
}

at::Tensor lcm(const at::Tensor & self, const at::Tensor & other) {
return wrapper_lcm(self, other);
}

at::Tensor & lcm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_lcm_out_out(self, other, out);
}

at::Tensor & lcm_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_lcm_out_out(self, other, out);
}

at::Tensor & lcm_(at::Tensor & self, const at::Tensor & other) {
return wrapper_lcm_(self, other);
}

at::Tensor grid_sampler_2d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
return wrapper__grid_sampler_2d(input, grid, interpolation_mode, padding_mode, align_corners);
}

::std::tuple<at::Tensor,at::Tensor> grid_sampler_2d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
return wrapper__grid_sampler_2d_backward(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
}

at::Tensor grid_sampler_3d(const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
return wrapper__grid_sampler_3d(input, grid, interpolation_mode, padding_mode, align_corners);
}

::std::tuple<at::Tensor,at::Tensor> grid_sampler_3d_backward(const at::Tensor & grad_output, const at::Tensor & input, const at::Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
return wrapper__grid_sampler_3d_backward(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_group_norm(const at::Tensor & input, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, int64_t N, int64_t C, int64_t HxW, int64_t group, double eps) {
return wrapper__native_group_norm(input, weight, bias, N, C, HxW, group, eps);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_group_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const at::Tensor & mean, const at::Tensor & rstd, const c10::optional<at::Tensor> & weight, int64_t N, int64_t C, int64_t HxW, int64_t group, ::std::array<bool,3> output_mask) {
return wrapper__native_group_norm_backward(grad_out, input, mean, rstd, weight, N, C, HxW, group, output_mask);
}

at::Tensor _fft_r2c(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool onesided) {
return wrapper___fft_r2c(self, dim, normalization, onesided);
}

at::Tensor & _fft_r2c_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool onesided) {
return wrapper_out__fft_r2c_out_out(self, dim, normalization, onesided, out);
}

at::Tensor & _fft_r2c_outf(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool onesided, at::Tensor & out) {
return wrapper_out__fft_r2c_out_out(self, dim, normalization, onesided, out);
}

at::Tensor _fft_c2r(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, int64_t last_dim_size) {
return wrapper___fft_c2r(self, dim, normalization, last_dim_size);
}

at::Tensor & _fft_c2r_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, int64_t last_dim_size) {
return wrapper_out__fft_c2r_out_out(self, dim, normalization, last_dim_size, out);
}

at::Tensor & _fft_c2r_outf(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, int64_t last_dim_size, at::Tensor & out) {
return wrapper_out__fft_c2r_out_out(self, dim, normalization, last_dim_size, out);
}

at::Tensor _fft_c2c(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool forward) {
return wrapper___fft_c2c(self, dim, normalization, forward);
}

at::Tensor & _fft_c2c_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool forward) {
return wrapper_out__fft_c2c_out_out(self, dim, normalization, forward, out);
}

at::Tensor & _fft_c2c_outf(const at::Tensor & self, at::IntArrayRef dim, int64_t normalization, bool forward, at::Tensor & out) {
return wrapper_out__fft_c2c_out_out(self, dim, normalization, forward, out);
}

at::Tensor index(const at::Tensor & self, const c10::List<c10::optional<at::Tensor>> & indices) {
return wrapper_Tensor_index_Tensor(self, indices);
}

at::Tensor & _index_put_impl_(at::Tensor & self, const c10::List<c10::optional<at::Tensor>> & indices, const at::Tensor & values, bool accumulate, bool unsafe) {
return wrapper___index_put_impl_(self, indices, values, accumulate, unsafe);
}

at::Tensor _inverse_helper(const at::Tensor & self) {
return wrapper___inverse_helper(self);
}

at::Tensor isin(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert) {
return wrapper_isin_Tensor_Tensor(elements, test_elements, assume_unique, invert);
}

at::Tensor & isin_out(at::Tensor & out, const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert) {
return wrapper_isin_out_Tensor_Tensor_out(elements, test_elements, assume_unique, invert, out);
}

at::Tensor & isin_outf(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out) {
return wrapper_isin_out_Tensor_Tensor_out(elements, test_elements, assume_unique, invert, out);
}

at::Tensor isin(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert) {
return wrapper_isin_Tensor_Scalar(elements, test_element, assume_unique, invert);
}

at::Tensor & isin_out(at::Tensor & out, const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert) {
return wrapper_isin_out_Tensor_Scalar_out(elements, test_element, assume_unique, invert, out);
}

at::Tensor & isin_outf(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert, at::Tensor & out) {
return wrapper_isin_out_Tensor_Scalar_out(elements, test_element, assume_unique, invert, out);
}

at::Tensor isin(const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert) {
return wrapper_isin_Scalar_Tensor(element, test_elements, assume_unique, invert);
}

at::Tensor & isin_out(at::Tensor & out, const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert) {
return wrapper_isin_out_Scalar_Tensor_out(element, test_elements, assume_unique, invert, out);
}

at::Tensor & isin_outf(const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out) {
return wrapper_isin_out_Scalar_Tensor_out(element, test_elements, assume_unique, invert, out);
}

at::Tensor isnan(const at::Tensor & self) {
return wrapper__isnan(self);
}

at::Tensor kl_div_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, bool log_target) {
return wrapper__kl_div_backward(grad_output, self, target, reduction, log_target);
}

::std::tuple<at::Tensor &,at::Tensor &> kthvalue_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool keepdim) {
return wrapper_values_kthvalue_out_values(self, k, dim, keepdim, values, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> kthvalue_outf(const at::Tensor & self, int64_t k, int64_t dim, bool keepdim, at::Tensor & values, at::Tensor & indices) {
return wrapper_values_kthvalue_out_values(self, k, dim, keepdim, values, indices);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_layer_norm(const at::Tensor & input, at::IntArrayRef normalized_shape, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, double eps) {
return wrapper__native_layer_norm(input, normalized_shape, weight, bias, eps);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_layer_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, at::IntArrayRef normalized_shape, const at::Tensor & mean, const at::Tensor & rstd, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, ::std::array<bool,3> output_mask) {
return wrapper__native_layer_norm_backward(grad_out, input, normalized_shape, mean, rstd, weight, bias, output_mask);
}

at::Tensor & nan_to_num_out(at::Tensor & out, const at::Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf) {
return wrapper_out_nan_to_num_out_out(self, nan, posinf, neginf, out);
}

at::Tensor & nan_to_num_outf(const at::Tensor & self, c10::optional<double> nan, c10::optional<double> posinf, c10::optional<double> neginf, at::Tensor & out) {
return wrapper_out_nan_to_num_out_out(self, nan, posinf, neginf, out);
}

at::Tensor & linspace_out(at::Tensor & out, const at::Scalar & start, const at::Scalar & end, c10::optional<int64_t> steps) {
return wrapper_out_linspace_out_out(start, end, steps, out);
}

at::Tensor & linspace_outf(const at::Scalar & start, const at::Scalar & end, c10::optional<int64_t> steps, at::Tensor & out) {
return wrapper_out_linspace_out_out(start, end, steps, out);
}

at::Tensor log(const at::Tensor & self) {
return wrapper_log(self);
}

at::Tensor & log_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_log_out_out(self, out);
}

at::Tensor & log_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_log_out_out(self, out);
}

at::Tensor & log_(at::Tensor & self) {
return wrapper_log_(self);
}

at::Tensor log10(const at::Tensor & self) {
return wrapper_log10(self);
}

at::Tensor & log10_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_log10_out_out(self, out);
}

at::Tensor & log10_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_log10_out_out(self, out);
}

at::Tensor & log10_(at::Tensor & self) {
return wrapper_log10_(self);
}

at::Tensor log1p(const at::Tensor & self) {
return wrapper_log1p(self);
}

at::Tensor & log1p_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_log1p_out_out(self, out);
}

at::Tensor & log1p_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_log1p_out_out(self, out);
}

at::Tensor & log1p_(at::Tensor & self) {
return wrapper_log1p_(self);
}

at::Tensor log2(const at::Tensor & self) {
return wrapper_log2(self);
}

at::Tensor & log2_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_log2_out_out(self, out);
}

at::Tensor & log2_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_log2_out_out(self, out);
}

at::Tensor & log2_(at::Tensor & self) {
return wrapper_log2_(self);
}

at::Tensor logaddexp(const at::Tensor & self, const at::Tensor & other) {
return wrapper_logaddexp(self, other);
}

at::Tensor & logaddexp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_logaddexp_out_out(self, other, out);
}

at::Tensor & logaddexp_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_logaddexp_out_out(self, other, out);
}

at::Tensor logaddexp2(const at::Tensor & self, const at::Tensor & other) {
return wrapper_logaddexp2(self, other);
}

at::Tensor & logaddexp2_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_logaddexp2_out_out(self, other, out);
}

at::Tensor & logaddexp2_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_logaddexp2_out_out(self, other, out);
}

at::Tensor xlogy(const at::Tensor & self, const at::Tensor & other) {
return wrapper_xlogy_Tensor(self, other);
}

at::Tensor & xlogy_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_xlogy_out_OutTensor(self, other, out);
}

at::Tensor & xlogy_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_xlogy_out_OutTensor(self, other, out);
}

at::Tensor & xlogy_(at::Tensor & self, const at::Tensor & other) {
return wrapper_xlogy__Tensor(self, other);
}

at::Tensor & logspace_out(at::Tensor & out, const at::Scalar & start, const at::Scalar & end, c10::optional<int64_t> steps, double base) {
return wrapper_out_logspace_out_out(start, end, steps, base, out);
}

at::Tensor & logspace_outf(const at::Scalar & start, const at::Scalar & end, c10::optional<int64_t> steps, double base, at::Tensor & out) {
return wrapper_out_logspace_out_out(start, end, steps, base, out);
}

at::Tensor _log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
return wrapper__log_softmax(self, dim, half_to_float);
}

at::Tensor & _log_softmax_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool half_to_float) {
return wrapper__log_softmax_out_out(self, dim, half_to_float, out);
}

at::Tensor & _log_softmax_outf(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out) {
return wrapper__log_softmax_out_out(self, dim, half_to_float, out);
}

at::Tensor _log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
return wrapper__log_softmax_backward_data(grad_output, output, dim, self);
}

at::Tensor & _log_softmax_backward_data_out(at::Tensor & out, const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
return wrapper__log_softmax_backward_data_out_out(grad_output, output, dim, self, out);
}

at::Tensor & _log_softmax_backward_data_outf(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self, at::Tensor & out) {
return wrapper__log_softmax_backward_data_out_out(grad_output, output, dim, self, out);
}

at::Tensor _logcumsumexp(const at::Tensor & self, int64_t dim) {
return wrapper___logcumsumexp(self, dim);
}

at::Tensor & _logcumsumexp_out(at::Tensor & out, const at::Tensor & self, int64_t dim) {
return wrapper_out__logcumsumexp_out_out(self, dim, out);
}

at::Tensor & _logcumsumexp_outf(const at::Tensor & self, int64_t dim, at::Tensor & out) {
return wrapper_out__logcumsumexp_out_out(self, dim, out);
}

at::Tensor matrix_exp(const at::Tensor & self) {
return wrapper__matrix_exp(self);
}

::std::tuple<at::Tensor,at::Tensor> _aminmax(const at::Tensor & self) {
return wrapper___aminmax(self);
}

::std::tuple<at::Tensor,at::Tensor> _aminmax(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_dim__aminmax_dim(self, dim, keepdim);
}

::std::tuple<at::Tensor,at::Tensor> aminmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_aminmax(self, dim, keepdim);
}

::std::tuple<at::Tensor &,at::Tensor &> aminmax_out(at::Tensor & min, at::Tensor & max, const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_aminmax_out_out(self, dim, keepdim, min, max);
}

::std::tuple<at::Tensor &,at::Tensor &> aminmax_outf(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & min, at::Tensor & max) {
return wrapper_aminmax_out_out(self, dim, keepdim, min, max);
}

at::Tensor _compute_linear_combination(const at::Tensor & input, const at::Tensor & coefficients) {
return wrapper___compute_linear_combination(input, coefficients);
}

at::Tensor & _compute_linear_combination_out(at::Tensor & out, const at::Tensor & input, const at::Tensor & coefficients) {
return wrapper_out__compute_linear_combination_out_out(input, coefficients, out);
}

at::Tensor & _compute_linear_combination_outf(const at::Tensor & input, const at::Tensor & coefficients, at::Tensor & out) {
return wrapper_out__compute_linear_combination_out_out(input, coefficients, out);
}

::std::tuple<at::Tensor,at::Tensor> max(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_dim_max_dim(self, dim, keepdim);
}

::std::tuple<at::Tensor &,at::Tensor &> max_out(at::Tensor & max, at::Tensor & max_values, const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_dim_max_max_out_dim_max(self, dim, keepdim, max, max_values);
}

::std::tuple<at::Tensor &,at::Tensor &> max_outf(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & max, at::Tensor & max_values) {
return wrapper_dim_max_max_out_dim_max(self, dim, keepdim, max, max_values);
}

at::Tensor & amax_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
return wrapper_out_amax_out_out(self, dim, keepdim, out);
}

at::Tensor & amax_outf(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, at::Tensor & out) {
return wrapper_out_amax_out_out(self, dim, keepdim, out);
}

at::Tensor mean(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_mean_dim(self, dim, keepdim, dtype);
}

at::Tensor & mean_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_mean_out_out(self, dim, keepdim, dtype, out);
}

at::Tensor & mean_outf(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_mean_out_out(self, dim, keepdim, dtype, out);
}

at::Tensor median(const at::Tensor & self) {
return wrapper__median(self);
}

::std::tuple<at::Tensor &,at::Tensor &> median_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_dim_values_median_out_dim_values(self, dim, keepdim, values, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> median_outf(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & values, at::Tensor & indices) {
return wrapper_dim_values_median_out_dim_values(self, dim, keepdim, values, indices);
}

at::Tensor nanmedian(const at::Tensor & self) {
return wrapper__nanmedian(self);
}

::std::tuple<at::Tensor &,at::Tensor &> nanmedian_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_dim_values_nanmedian_out_dim_values(self, dim, keepdim, values, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> nanmedian_outf(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & values, at::Tensor & indices) {
return wrapper_dim_values_nanmedian_out_dim_values(self, dim, keepdim, values, indices);
}

::std::tuple<at::Tensor,at::Tensor> min(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_dim_min_dim(self, dim, keepdim);
}

::std::tuple<at::Tensor &,at::Tensor &> min_out(at::Tensor & min, at::Tensor & min_indices, const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_dim_min_min_out_dim_min(self, dim, keepdim, min, min_indices);
}

::std::tuple<at::Tensor &,at::Tensor &> min_outf(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & min, at::Tensor & min_indices) {
return wrapper_dim_min_min_out_dim_min(self, dim, keepdim, min, min_indices);
}

at::Tensor & amin_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim) {
return wrapper_out_amin_out_out(self, dim, keepdim, out);
}

at::Tensor & amin_outf(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, at::Tensor & out) {
return wrapper_out_amin_out_out(self, dim, keepdim, out);
}

at::Tensor mm(const at::Tensor & self, const at::Tensor & mat2) {
return wrapper_mm(self, mat2);
}

at::Tensor & mm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat2) {
return wrapper_mm_out_out(self, mat2, out);
}

at::Tensor & mm_outf(const at::Tensor & self, const at::Tensor & mat2, at::Tensor & out) {
return wrapper_mm_out_out(self, mat2, out);
}

::std::tuple<at::Tensor,at::Tensor> mode(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper__mode(self, dim, keepdim);
}

at::Tensor mul(const at::Tensor & self, const at::Tensor & other) {
return wrapper_mul_Tensor(self, other);
}

at::Tensor & mul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_mul_out_out(self, other, out);
}

at::Tensor & mul_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_mul_out_out(self, other, out);
}

at::Tensor & mul_(at::Tensor & self, const at::Tensor & other) {
return wrapper_mul__Tensor(self, other);
}

at::Tensor mv(const at::Tensor & self, const at::Tensor & vec) {
return wrapper__mv(self, vec);
}

at::Tensor & mvlgamma_out(at::Tensor & out, const at::Tensor & self, int64_t p) {
return wrapper_out_mvlgamma_out_out(self, p, out);
}

at::Tensor & mvlgamma_outf(const at::Tensor & self, int64_t p, at::Tensor & out) {
return wrapper_out_mvlgamma_out_out(self, p, out);
}

at::Tensor narrow_copy(const at::Tensor & self, int64_t dim, int64_t start, int64_t length) {
return wrapper__narrow_copy(self, dim, start, length);
}

at::Tensor & narrow_copy_out(at::Tensor & out, const at::Tensor & self, int64_t dim, int64_t start, int64_t length) {
return wrapper_out_narrow_copy_out_out(self, dim, start, length, out);
}

at::Tensor & narrow_copy_outf(const at::Tensor & self, int64_t dim, int64_t start, int64_t length, at::Tensor & out) {
return wrapper_out_narrow_copy_out_out(self, dim, start, length, out);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm(const at::Tensor & input, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, const c10::optional<at::Tensor> & running_mean, const c10::optional<at::Tensor> & running_var, bool training, double momentum, double eps) {
return wrapper__native_batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> native_batch_norm_backward(const at::Tensor & grad_out, const at::Tensor & input, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & running_mean, const c10::optional<at::Tensor> & running_var, const c10::optional<at::Tensor> & save_mean, const c10::optional<at::Tensor> & save_invstd, bool train, double eps, ::std::array<bool,3> output_mask) {
return wrapper__native_batch_norm_backward(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
}

::std::tuple<at::Tensor,at::Tensor> batch_norm_update_stats(const at::Tensor & input, const c10::optional<at::Tensor> & running_mean, const c10::optional<at::Tensor> & running_var, double momentum) {
return wrapper__batch_norm_update_stats(input, running_mean, running_var, momentum);
}

at::Tensor _cdist_forward(const at::Tensor & x1, const at::Tensor & x2, double p, c10::optional<int64_t> compute_mode) {
return wrapper___cdist_forward(x1, x2, p, compute_mode);
}

at::Tensor _cdist_backward(const at::Tensor & grad, const at::Tensor & x1, const at::Tensor & x2, double p, const at::Tensor & cdist) {
return wrapper___cdist_backward(grad, x1, x2, p, cdist);
}

at::Tensor _pdist_forward(const at::Tensor & self, double p) {
return wrapper___pdist_forward(self, p);
}

at::Tensor _pdist_backward(const at::Tensor & grad, const at::Tensor & self, double p, const at::Tensor & pdist) {
return wrapper___pdist_backward(grad, self, p, pdist);
}

at::Tensor channel_shuffle(const at::Tensor & self, int64_t groups) {
return wrapper__channel_shuffle(self, groups);
}

at::Tensor & randperm_out(at::Tensor & out, int64_t n, c10::optional<at::Generator> generator) {
return wrapper_generator_out_randperm_out_generator_out(n, generator, out);
}

at::Tensor & randperm_outf(int64_t n, c10::optional<at::Generator> generator, at::Tensor & out) {
return wrapper_generator_out_randperm_out_generator_out(n, generator, out);
}

at::Tensor & range_out(at::Tensor & out, const at::Scalar & start, const at::Scalar & end, const at::Scalar & step) {
return wrapper_out_range_out_out(start, end, step, out);
}

at::Tensor & range_outf(const at::Scalar & start, const at::Scalar & end, const at::Scalar & step, at::Tensor & out) {
return wrapper_out_range_out_out(start, end, step, out);
}

at::Tensor reciprocal(const at::Tensor & self) {
return wrapper_reciprocal(self);
}

at::Tensor & reciprocal_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_reciprocal_out_out(self, out);
}

at::Tensor & reciprocal_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_reciprocal_out_out(self, out);
}

at::Tensor & reciprocal_(at::Tensor & self) {
return wrapper_reciprocal_(self);
}

at::Tensor neg(const at::Tensor & self) {
return wrapper_neg(self);
}

at::Tensor & neg_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_neg_out_out(self, out);
}

at::Tensor & neg_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_neg_out_out(self, out);
}

at::Tensor & neg_(at::Tensor & self) {
return wrapper_neg_(self);
}

at::Tensor repeat_interleave(const at::Tensor & repeats, c10::optional<int64_t> output_size) {
return wrapper_Tensor_repeat_interleave_Tensor(repeats, output_size);
}

at::Tensor _reshape_alias(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride) {
return wrapper___reshape_alias(self, size, stride);
}

at::Tensor round(const at::Tensor & self) {
return wrapper_round(self);
}

at::Tensor & round_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_round_out_out(self, out);
}

at::Tensor & round_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_round_out_out(self, out);
}

at::Tensor & round_(at::Tensor & self) {
return wrapper_round_(self);
}

at::Tensor relu(const at::Tensor & self) {
return wrapper__relu(self);
}

at::Tensor & relu_(at::Tensor & self) {
return wrapper__relu_(self);
}

at::Tensor prelu(const at::Tensor & self, const at::Tensor & weight) {
return wrapper__prelu(self, weight);
}

::std::tuple<at::Tensor,at::Tensor> prelu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight) {
return wrapper__prelu_backward(grad_output, self, weight);
}

at::Tensor gelu(const at::Tensor & self) {
return wrapper_gelu(self);
}

at::Tensor & gelu_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_gelu_out_out(self, out);
}

at::Tensor & gelu_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_gelu_out_out(self, out);
}

at::Tensor gelu_backward(const at::Tensor & grad, const at::Tensor & self) {
return wrapper_gelu_backward(grad, self);
}

at::Tensor & gelu_backward_out(at::Tensor & grad_input, const at::Tensor & grad, const at::Tensor & self) {
return wrapper_gelu_backward_out_grad_input(grad, self, grad_input);
}

at::Tensor & gelu_backward_outf(const at::Tensor & grad, const at::Tensor & self, at::Tensor & grad_input) {
return wrapper_gelu_backward_out_grad_input(grad, self, grad_input);
}

at::Tensor hardshrink(const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_hardshrink(self, lambd);
}

at::Tensor & hardshrink_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_hardshrink_out_out(self, lambd, out);
}

at::Tensor & hardshrink_outf(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out) {
return wrapper_hardshrink_out_out(self, lambd, out);
}

at::Tensor hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_hardshrink_backward(grad_out, self, lambd);
}

at::Tensor & hardshrink_backward_out(at::Tensor & grad_input, const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_hardshrink_backward_out_grad_input(grad_out, self, lambd, grad_input);
}

at::Tensor & hardshrink_backward_outf(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input) {
return wrapper_hardshrink_backward_out_grad_input(grad_out, self, lambd, grad_input);
}

at::Tensor rsqrt(const at::Tensor & self) {
return wrapper_rsqrt(self);
}

at::Tensor & rsqrt_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_rsqrt_out_out(self, out);
}

at::Tensor & rsqrt_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_rsqrt_out_out(self, out);
}

at::Tensor & rsqrt_(at::Tensor & self) {
return wrapper_rsqrt_(self);
}

at::Tensor silu(const at::Tensor & self) {
return wrapper_silu(self);
}

at::Tensor & silu_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_silu_out_out(self, out);
}

at::Tensor & silu_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_silu_out_out(self, out);
}

at::Tensor & silu_(at::Tensor & self) {
return wrapper_silu_(self);
}

at::Tensor silu_backward(const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper_silu_backward(grad_output, self);
}

at::Tensor & silu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper_silu_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor & silu_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
return wrapper_silu_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor mish(const at::Tensor & self) {
return wrapper_mish(self);
}

at::Tensor & mish_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_mish_out_out(self, out);
}

at::Tensor & mish_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_mish_out_out(self, out);
}

at::Tensor & mish_(at::Tensor & self) {
return wrapper_mish_(self);
}

at::Tensor mish_backward(const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper__mish_backward(grad_output, self);
}

at::Tensor sigmoid(const at::Tensor & self) {
return wrapper_sigmoid(self);
}

at::Tensor & sigmoid_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sigmoid_out_out(self, out);
}

at::Tensor & sigmoid_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sigmoid_out_out(self, out);
}

at::Tensor & sigmoid_(at::Tensor & self) {
return wrapper_sigmoid_(self);
}

at::Tensor logit(const at::Tensor & self, c10::optional<double> eps) {
return wrapper__logit(self, eps);
}

at::Tensor & logit_out(at::Tensor & out, const at::Tensor & self, c10::optional<double> eps) {
return wrapper_out_logit_out_out(self, eps, out);
}

at::Tensor & logit_outf(const at::Tensor & self, c10::optional<double> eps, at::Tensor & out) {
return wrapper_out_logit_out_out(self, eps, out);
}

at::Tensor & logit_(at::Tensor & self, c10::optional<double> eps) {
return wrapper__logit_(self, eps);
}

at::Tensor sin(const at::Tensor & self) {
return wrapper_sin(self);
}

at::Tensor & sin_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sin_out_out(self, out);
}

at::Tensor & sin_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sin_out_out(self, out);
}

at::Tensor & sin_(at::Tensor & self) {
return wrapper_sin_(self);
}

at::Tensor sinc(const at::Tensor & self) {
return wrapper_sinc(self);
}

at::Tensor & sinc_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sinc_out_out(self, out);
}

at::Tensor & sinc_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sinc_out_out(self, out);
}

at::Tensor & sinc_(at::Tensor & self) {
return wrapper_sinc_(self);
}

at::Tensor sinh(const at::Tensor & self) {
return wrapper_sinh(self);
}

at::Tensor & sinh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sinh_out_out(self, out);
}

at::Tensor & sinh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sinh_out_out(self, out);
}

at::Tensor & sinh_(at::Tensor & self) {
return wrapper_sinh_(self);
}

at::Tensor _softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
return wrapper__softmax(self, dim, half_to_float);
}

at::Tensor & _softmax_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool half_to_float) {
return wrapper__softmax_out_out(self, dim, half_to_float, out);
}

at::Tensor & _softmax_outf(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out) {
return wrapper__softmax_out_out(self, dim, half_to_float, out);
}

at::Tensor _softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
return wrapper__softmax_backward_data(grad_output, output, dim, self);
}

at::Tensor & _softmax_backward_data_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
return wrapper__softmax_backward_data_out_out(grad_output, output, dim, self, grad_input);
}

at::Tensor & _softmax_backward_data_outf(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self, at::Tensor & grad_input) {
return wrapper__softmax_backward_data_out_out(grad_output, output, dim, self, grad_input);
}

at::Tensor & sspaddmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_out_sspaddmm_out_out(self, mat1, mat2, beta, alpha, out);
}

at::Tensor & sspaddmm_outf(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_out_sspaddmm_out_out(self, mat1, mat2, beta, alpha, out);
}

at::Tensor _stack(at::TensorList tensors, int64_t dim) {
return wrapper___stack(tensors, dim);
}

at::Tensor & _stack_out(at::Tensor & out, at::TensorList tensors, int64_t dim) {
return wrapper_out__stack_out_out(tensors, dim, out);
}

at::Tensor & _stack_outf(at::TensorList tensors, int64_t dim, at::Tensor & out) {
return wrapper_out__stack_out_out(tensors, dim, out);
}

at::Tensor sum(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_sum_dim_IntList(self, dim, keepdim, dtype);
}

at::Tensor & sum_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_sum_out_IntList_out(self, dim, keepdim, dtype, out);
}

at::Tensor & sum_outf(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_sum_out_IntList_out(self, dim, keepdim, dtype, out);
}

at::Tensor nansum(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
return wrapper__nansum(self, dtype);
}

at::Tensor nansum(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_dim_IntList_nansum_dim_IntList(self, dim, keepdim, dtype);
}

at::Tensor & nansum_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_IntList_out_nansum_out_IntList_out(self, dim, keepdim, dtype, out);
}

at::Tensor & nansum_outf(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_IntList_out_nansum_out_IntList_out(self, dim, keepdim, dtype, out);
}

at::Tensor sqrt(const at::Tensor & self) {
return wrapper_sqrt(self);
}

at::Tensor & sqrt_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sqrt_out_out(self, out);
}

at::Tensor & sqrt_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sqrt_out_out(self, out);
}

at::Tensor & sqrt_(at::Tensor & self) {
return wrapper_sqrt_(self);
}

at::Tensor & square_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_out_square_out_out(self, out);
}

at::Tensor & square_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_out_square_out_out(self, out);
}

at::Tensor std(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
return wrapper_correction_std_correction(self, dim, correction, keepdim);
}

at::Tensor & std_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
return wrapper_correction_out_std_out_correction_out(self, dim, correction, keepdim, out);
}

at::Tensor & std_outf(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim, at::Tensor & out) {
return wrapper_correction_out_std_out_correction_out(self, dim, correction, keepdim, out);
}

::std::tuple<at::Tensor,at::Tensor> std_mean(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
return wrapper_correction_std_mean_correction(self, dim, correction, keepdim);
}

at::Tensor prod(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
return wrapper__prod(self, dtype);
}

at::Tensor prod(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_prod_dim_int(self, dim, keepdim, dtype);
}

at::Tensor & prod_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_prod_out_int_out(self, dim, keepdim, dtype, out);
}

at::Tensor & prod_outf(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_prod_out_int_out(self, dim, keepdim, dtype, out);
}

at::Tensor tan(const at::Tensor & self) {
return wrapper_tan(self);
}

at::Tensor & tan_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_tan_out_out(self, out);
}

at::Tensor & tan_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_tan_out_out(self, out);
}

at::Tensor & tan_(at::Tensor & self) {
return wrapper_tan_(self);
}

at::Tensor tanh(const at::Tensor & self) {
return wrapper_tanh(self);
}

at::Tensor & tanh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_tanh_out_out(self, out);
}

at::Tensor & tanh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_tanh_out_out(self, out);
}

at::Tensor & tanh_(at::Tensor & self) {
return wrapper_tanh_(self);
}

at::Tensor & tensordot_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, at::IntArrayRef dims_self, at::IntArrayRef dims_other) {
return wrapper_out_tensordot_out_out(self, other, dims_self, dims_other, out);
}

at::Tensor & tensordot_outf(const at::Tensor & self, const at::Tensor & other, at::IntArrayRef dims_self, at::IntArrayRef dims_other, at::Tensor & out) {
return wrapper_out_tensordot_out_out(self, other, dims_self, dims_other, out);
}

at::Tensor threshold(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
return wrapper_threshold(self, threshold, value);
}

at::Tensor & threshold_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
return wrapper_threshold_out_out(self, threshold, value, out);
}

at::Tensor & threshold_outf(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value, at::Tensor & out) {
return wrapper_threshold_out_out(self, threshold, value, out);
}

at::Tensor & threshold_(at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
return wrapper_threshold_(self, threshold, value);
}

at::Tensor threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold) {
return wrapper_threshold_backward(grad_output, self, threshold);
}

at::Tensor & threshold_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold) {
return wrapper_threshold_backward_out_grad_input(grad_output, self, threshold, grad_input);
}

at::Tensor & threshold_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold, at::Tensor & grad_input) {
return wrapper_threshold_backward_out_grad_input(grad_output, self, threshold, grad_input);
}

at::Tensor flip(const at::Tensor & self, at::IntArrayRef dims) {
return wrapper__flip(self, dims);
}

at::Tensor roll(const at::Tensor & self, at::IntArrayRef shifts, at::IntArrayRef dims) {
return wrapper__roll(self, shifts, dims);
}

at::Tensor trunc(const at::Tensor & self) {
return wrapper_trunc(self);
}

at::Tensor & trunc_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_trunc_out_out(self, out);
}

at::Tensor & trunc_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_trunc_out_out(self, out);
}

at::Tensor & trunc_(at::Tensor & self) {
return wrapper_trunc_(self);
}

::std::tuple<at::Tensor,at::Tensor> _unique(const at::Tensor & self, bool sorted, bool return_inverse) {
return wrapper___unique(self, sorted, return_inverse);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> unique_dim(const at::Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {
return wrapper__unique_dim(self, dim, sorted, return_inverse, return_counts);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> unique_consecutive(const at::Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
return wrapper__unique_consecutive(self, return_inverse, return_counts, dim);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> unique_dim_consecutive(const at::Tensor & self, int64_t dim, bool return_inverse, bool return_counts) {
return wrapper__unique_dim_consecutive(self, dim, return_inverse, return_counts);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> _unique2(const at::Tensor & self, bool sorted, bool return_inverse, bool return_counts) {
return wrapper___unique2(self, sorted, return_inverse, return_counts);
}

at::Tensor var(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
return wrapper_correction_var_correction(self, dim, correction, keepdim);
}

at::Tensor & var_out(at::Tensor & out, const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
return wrapper_correction_out_var_out_correction_out(self, dim, correction, keepdim, out);
}

at::Tensor & var_outf(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim, at::Tensor & out) {
return wrapper_correction_out_var_out_correction_out(self, dim, correction, keepdim, out);
}

::std::tuple<at::Tensor,at::Tensor> var_mean(const at::Tensor & self, c10::optional<at::IntArrayRef> dim, c10::optional<int64_t> correction, bool keepdim) {
return wrapper_correction_var_mean_correction(self, dim, correction, keepdim);
}

at::Tensor _s_where(const at::Tensor & condition, const at::Tensor & self, const at::Tensor & other) {
return wrapper___s_where(condition, self, other);
}

at::Tensor _standard_gamma_grad(const at::Tensor & self, const at::Tensor & output) {
return wrapper___standard_gamma_grad(self, output);
}

at::Tensor _standard_gamma(const at::Tensor & self, c10::optional<at::Generator> generator) {
return wrapper___standard_gamma(self, generator);
}

at::Tensor _dirichlet_grad(const at::Tensor & x, const at::Tensor & alpha, const at::Tensor & total) {
return wrapper___dirichlet_grad(x, alpha, total);
}

at::Tensor _sample_dirichlet(const at::Tensor & self, c10::optional<at::Generator> generator) {
return wrapper___sample_dirichlet(self, generator);
}

at::Tensor poisson(const at::Tensor & self, c10::optional<at::Generator> generator) {
return wrapper__poisson(self, generator);
}

at::Tensor binomial(const at::Tensor & count, const at::Tensor & prob, c10::optional<at::Generator> generator) {
return wrapper__binomial(count, prob, generator);
}

at::Tensor norm(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
return wrapper_norm_ScalarOpt_dim_dtype(self, p, dim, keepdim, dtype);
}

at::Tensor & norm_out(at::Tensor & out, const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
return wrapper_norm_out_dtype_out(self, p, dim, keepdim, dtype, out);
}

at::Tensor & norm_outf(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype, at::Tensor & out) {
return wrapper_norm_out_dtype_out(self, p, dim, keepdim, dtype, out);
}

at::Tensor norm(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim) {
return wrapper_norm_ScalarOpt_dim(self, p, dim, keepdim);
}

at::Tensor & norm_out(at::Tensor & out, const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim) {
return wrapper_norm_out_out(self, p, dim, keepdim, out);
}

at::Tensor & norm_outf(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::Tensor & out) {
return wrapper_norm_out_out(self, p, dim, keepdim, out);
}

::std::tuple<at::Tensor &,at::Tensor &> frexp_out(at::Tensor & mantissa, at::Tensor & exponent, const at::Tensor & self) {
return wrapper_Tensor_out_frexp_out_Tensor_out(self, mantissa, exponent);
}

::std::tuple<at::Tensor &,at::Tensor &> frexp_outf(const at::Tensor & self, at::Tensor & mantissa, at::Tensor & exponent) {
return wrapper_Tensor_out_frexp_out_Tensor_out(self, mantissa, exponent);
}

at::Tensor & zero_(at::Tensor & self) {
return wrapper__zero_(self);
}

at::Tensor sub(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_sub_Tensor(self, other, alpha);
}

at::Tensor & sub_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_sub_out_out(self, other, alpha, out);
}

at::Tensor & sub_outf(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_sub_out_out(self, other, alpha, out);
}

at::Tensor & sub_(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_sub__Tensor(self, other, alpha);
}

at::Tensor rsub(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_Tensor_rsub_Tensor(self, other, alpha);
}

at::Tensor heaviside(const at::Tensor & self, const at::Tensor & values) {
return wrapper_heaviside(self, values);
}

at::Tensor & heaviside_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & values) {
return wrapper_heaviside_out_out(self, values, out);
}

at::Tensor & heaviside_outf(const at::Tensor & self, const at::Tensor & values, at::Tensor & out) {
return wrapper_heaviside_out_out(self, values, out);
}

at::Tensor & heaviside_(at::Tensor & self, const at::Tensor & values) {
return wrapper_heaviside_(self, values);
}

at::Tensor addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmm(self, mat1, mat2, beta, alpha);
}

at::Tensor & addmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmm_out_out(self, mat1, mat2, beta, alpha, out);
}

at::Tensor & addmm_outf(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_addmm_out_out(self, mat1, mat2, beta, alpha, out);
}

at::Tensor & addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmm_(self, mat1, mat2, beta, alpha);
}

at::Tensor to_sparse(const at::Tensor & self, int64_t sparse_dim) {
return wrapper_sparse_dim_to_sparse_sparse_dim(self, sparse_dim);
}

at::Tensor to_sparse(const at::Tensor & self) {
return wrapper__to_sparse(self);
}

at::Tensor to_mkldnn(const at::Tensor & self, c10::optional<at::ScalarType> dtype) {
return wrapper__to_mkldnn(self, dtype);
}

at::Tensor quantize_per_tensor(const at::Tensor & self, double scale, int64_t zero_point, at::ScalarType dtype) {
return wrapper__quantize_per_tensor(self, scale, zero_point, dtype);
}

at::Tensor quantize_per_tensor(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, at::ScalarType dtype) {
return wrapper_tensor_qparams_quantize_per_tensor_tensor_qparams(self, scale, zero_point, dtype);
}

::std::vector<at::Tensor> quantize_per_tensor(at::TensorList tensors, const at::Tensor & scales, const at::Tensor & zero_points, at::ScalarType dtype) {
return wrapper_tensors_quantize_per_tensor_tensors(tensors, scales, zero_points, dtype);
}

at::Tensor quantize_per_channel(const at::Tensor & self, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, at::ScalarType dtype) {
return wrapper__quantize_per_channel(self, scales, zero_points, axis, dtype);
}

at::Tensor dequantize(const at::Tensor & self) {
return wrapper_self_dequantize_self(self);
}

at::Tensor _make_per_tensor_quantized_tensor(const at::Tensor & self, double scale, int64_t zero_point) {
return wrapper___make_per_tensor_quantized_tensor(self, scale, zero_point);
}

at::Tensor _make_per_channel_quantized_tensor(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t axis) {
return wrapper___make_per_channel_quantized_tensor(self, scale, zero_point, axis);
}

::std::tuple<at::Tensor,at::Tensor> fake_quantize_per_tensor_affine_cachemask(const at::Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
return wrapper__fake_quantize_per_tensor_affine_cachemask(self, scale, zero_point, quant_min, quant_max);
}

::std::tuple<at::Tensor,at::Tensor> _fake_quantize_per_tensor_affine_cachemask_tensor_qparams(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, const at::Tensor & fake_quant_enabled, int64_t quant_min, int64_t quant_max) {
return wrapper___fake_quantize_per_tensor_affine_cachemask_tensor_qparams(self, scale, zero_point, fake_quant_enabled, quant_min, quant_max);
}

at::Tensor _fake_quantize_learnable_per_tensor_affine(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t quant_min, int64_t quant_max, double grad_factor) {
return wrapper___fake_quantize_learnable_per_tensor_affine(self, scale, zero_point, quant_min, quant_max, grad_factor);
}

::std::tuple<at::Tensor,at::Tensor> fake_quantize_per_channel_affine_cachemask(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
return wrapper__fake_quantize_per_channel_affine_cachemask(self, scale, zero_point, axis, quant_min, quant_max);
}

at::Tensor _fake_quantize_learnable_per_channel_affine(const at::Tensor & self, const at::Tensor & scale, const at::Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max, double grad_factor) {
return wrapper___fake_quantize_learnable_per_channel_affine(self, scale, zero_point, axis, quant_min, quant_max, grad_factor);
}

::std::tuple<at::Tensor,at::Tensor> _fused_moving_avg_obs_fq_helper(const at::Tensor & self, const at::Tensor & observer_on, const at::Tensor & fake_quant_on, at::Tensor & running_min, at::Tensor & running_max, at::Tensor & scale, at::Tensor & zero_point, double averaging_const, int64_t quant_min, int64_t quant_max, int64_t ch_axis, bool per_row_fake_quant, bool symmetric_quant) {
return wrapper___fused_moving_avg_obs_fq_helper(self, observer_on, fake_quant_on, running_min, running_max, scale, zero_point, averaging_const, quant_min, quant_max, ch_axis, per_row_fake_quant, symmetric_quant);
}

at::Scalar _local_scalar_dense(const at::Tensor & self) {
return wrapper___local_scalar_dense(self);
}

at::Tensor & set_(at::Tensor & self, at::Storage source) {
return wrapper_source_Storage_set__source_Storage(self, source);
}

at::Tensor & set_(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride) {
return wrapper_source_Storage_storage_offset_set__source_Storage_storage_offset(self, source, storage_offset, size, stride);
}

at::Tensor & set_(at::Tensor & self, const at::Tensor & source) {
return wrapper_source_Tensor_set__source_Tensor(self, source);
}

at::Tensor & set_(at::Tensor & self) {
return wrapper__set_(self);
}

bool is_set_to(const at::Tensor & self, const at::Tensor & tensor) {
return wrapper__is_set_to(self, tensor);
}

at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Scalar & value) {
return wrapper_Scalar_masked_fill__Scalar(self, mask, value);
}

at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) {
return wrapper_Tensor_masked_fill__Tensor(self, mask, value);
}

at::Tensor & masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) {
return wrapper__masked_scatter_(self, mask, source);
}

at::Tensor view(const at::Tensor & self, at::IntArrayRef size) {
return wrapper__view(self, size);
}

at::Tensor & put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate) {
return wrapper__put_(self, index, source, accumulate);
}

at::Tensor & index_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source, const at::Scalar & alpha) {
return wrapper_alpha_index_add__alpha(self, dim, index, source, alpha);
}

at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
return wrapper_int_Scalar_index_fill__int_Scalar(self, dim, index, value);
}

at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) {
return wrapper_int_Tensor_index_fill__int_Tensor(self, dim, index, value);
}

at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_src(self, dim, index, src);
}

at::Tensor & scatter_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_out_src_out(self, dim, index, src, out);
}

at::Tensor & scatter_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, at::Tensor & out) {
return wrapper_scatter_out_src_out(self, dim, index, src, out);
}

at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter__src(self, dim, index, src);
}

at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
return wrapper_scatter_value(self, dim, index, value);
}

at::Tensor & scatter_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
return wrapper_scatter_out_value_out(self, dim, index, value, out);
}

at::Tensor & scatter_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, at::Tensor & out) {
return wrapper_scatter_out_value_out(self, dim, index, value, out);
}

at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
return wrapper_scatter__value(self, dim, index, value);
}

at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
return wrapper_scatter_reduce(self, dim, index, src, reduce);
}

at::Tensor & scatter_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
return wrapper_scatter_out_reduce_out(self, dim, index, src, reduce, out);
}

at::Tensor & scatter_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce, at::Tensor & out) {
return wrapper_scatter_out_reduce_out(self, dim, index, src, reduce, out);
}

at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
return wrapper_scatter__reduce(self, dim, index, src, reduce);
}

at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
return wrapper_scatter_value_reduce(self, dim, index, value, reduce);
}

at::Tensor & scatter_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
return wrapper_scatter_out_value_reduce_out(self, dim, index, value, reduce, out);
}

at::Tensor & scatter_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce, at::Tensor & out) {
return wrapper_scatter_out_value_reduce_out(self, dim, index, value, reduce, out);
}

at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
return wrapper_scatter__value_reduce(self, dim, index, value, reduce);
}

at::Tensor scatter_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_add(self, dim, index, src);
}

at::Tensor & scatter_add_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_add_out_out(self, dim, index, src, out);
}

at::Tensor & scatter_add_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, at::Tensor & out) {
return wrapper_scatter_add_out_out(self, dim, index, src, out);
}

at::Tensor & scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_add_(self, dim, index, src);
}

at::Tensor eq(const at::Tensor & self, const at::Scalar & other) {
return wrapper_eq_Scalar(self, other);
}

at::Tensor & eq_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_eq_out_Scalar_out(self, other, out);
}

at::Tensor & eq_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_eq_out_Scalar_out(self, other, out);
}

at::Tensor & eq_(at::Tensor & self, const at::Scalar & other) {
return wrapper_eq__Scalar(self, other);
}

at::Tensor eq(const at::Tensor & self, const at::Tensor & other) {
return wrapper_eq_Tensor(self, other);
}

at::Tensor & eq_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_eq_out_Tensor_out(self, other, out);
}

at::Tensor & eq_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_eq_out_Tensor_out(self, other, out);
}

at::Tensor & eq_(at::Tensor & self, const at::Tensor & other) {
return wrapper_eq__Tensor(self, other);
}

at::Tensor bitwise_and(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_and_Tensor(self, other);
}

at::Tensor & bitwise_and_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_and_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_and_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_and_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_and_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_and__Tensor(self, other);
}

at::Tensor bitwise_or(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_or_Tensor(self, other);
}

at::Tensor & bitwise_or_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_or_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_or_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_or_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_or_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_or__Tensor(self, other);
}

at::Tensor bitwise_xor(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_xor_Tensor(self, other);
}

at::Tensor & bitwise_xor_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_xor_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_xor_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_xor_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_xor_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_xor__Tensor(self, other);
}

at::Tensor __lshift__(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar___lshift___Scalar(self, other);
}

at::Tensor & __ilshift__(at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar___ilshift___Scalar(self, other);
}

at::Tensor __lshift__(const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor___lshift___Tensor(self, other);
}

at::Tensor & __ilshift__(at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor___ilshift___Tensor(self, other);
}

at::Tensor bitwise_left_shift(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_left_shift_Tensor(self, other);
}

at::Tensor & bitwise_left_shift_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_left_shift_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_left_shift_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_left_shift_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_left_shift_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_left_shift__Tensor(self, other);
}

at::Tensor bitwise_left_shift(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Tensor_Scalar_bitwise_left_shift_Tensor_Scalar(self, other);
}

at::Tensor & bitwise_left_shift_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_Tensor_Scalar_out_bitwise_left_shift_out_Tensor_Scalar_out(self, other, out);
}

at::Tensor & bitwise_left_shift_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_Tensor_Scalar_out_bitwise_left_shift_out_Tensor_Scalar_out(self, other, out);
}

at::Tensor & bitwise_left_shift_(at::Tensor & self, const at::Scalar & other) {
return wrapper_Tensor_Scalar_bitwise_left_shift__Tensor_Scalar(self, other);
}

at::Tensor bitwise_left_shift(const at::Scalar & self, const at::Tensor & other) {
return wrapper_Scalar_Tensor_bitwise_left_shift_Scalar_Tensor(self, other);
}

at::Tensor __rshift__(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar___rshift___Scalar(self, other);
}

at::Tensor & __irshift__(at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar___irshift___Scalar(self, other);
}

at::Tensor __rshift__(const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor___rshift___Tensor(self, other);
}

at::Tensor & __irshift__(at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor___irshift___Tensor(self, other);
}

at::Tensor bitwise_right_shift(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_right_shift_Tensor(self, other);
}

at::Tensor & bitwise_right_shift_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_right_shift_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_right_shift_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_right_shift_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_right_shift_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_right_shift__Tensor(self, other);
}

at::Tensor bitwise_right_shift(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Tensor_Scalar_bitwise_right_shift_Tensor_Scalar(self, other);
}

at::Tensor & bitwise_right_shift_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_Tensor_Scalar_out_bitwise_right_shift_out_Tensor_Scalar_out(self, other, out);
}

at::Tensor & bitwise_right_shift_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_Tensor_Scalar_out_bitwise_right_shift_out_Tensor_Scalar_out(self, other, out);
}

at::Tensor & bitwise_right_shift_(at::Tensor & self, const at::Scalar & other) {
return wrapper_Tensor_Scalar_bitwise_right_shift__Tensor_Scalar(self, other);
}

at::Tensor bitwise_right_shift(const at::Scalar & self, const at::Tensor & other) {
return wrapper_Scalar_Tensor_bitwise_right_shift_Scalar_Tensor(self, other);
}

at::Tensor & tril_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal) {
return wrapper_out_tril_out_out(self, diagonal, out);
}

at::Tensor & tril_outf(const at::Tensor & self, int64_t diagonal, at::Tensor & out) {
return wrapper_out_tril_out_out(self, diagonal, out);
}

at::Tensor & tril_(at::Tensor & self, int64_t diagonal) {
return wrapper__tril_(self, diagonal);
}

at::Tensor & triu_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal) {
return wrapper_out_triu_out_out(self, diagonal, out);
}

at::Tensor & triu_outf(const at::Tensor & self, int64_t diagonal, at::Tensor & out) {
return wrapper_out_triu_out_out(self, diagonal, out);
}

at::Tensor & triu_(at::Tensor & self, int64_t diagonal) {
return wrapper__triu_(self, diagonal);
}

at::Tensor digamma(const at::Tensor & self) {
return wrapper_digamma(self);
}

at::Tensor & digamma_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_digamma_out_out(self, out);
}

at::Tensor & digamma_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_digamma_out_out(self, out);
}

at::Tensor & digamma_(at::Tensor & self) {
return wrapper_digamma_(self);
}

at::Tensor lerp(const at::Tensor & self, const at::Tensor & end, const at::Scalar & weight) {
return wrapper_Scalar_lerp_Scalar(self, end, weight);
}

at::Tensor & lerp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & end, const at::Scalar & weight) {
return wrapper_Scalar_out_lerp_out_Scalar_out(self, end, weight, out);
}

at::Tensor & lerp_outf(const at::Tensor & self, const at::Tensor & end, const at::Scalar & weight, at::Tensor & out) {
return wrapper_Scalar_out_lerp_out_Scalar_out(self, end, weight, out);
}

at::Tensor & lerp_(at::Tensor & self, const at::Tensor & end, const at::Scalar & weight) {
return wrapper_Scalar_lerp__Scalar(self, end, weight);
}

at::Tensor lerp(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
return wrapper_Tensor_lerp_Tensor(self, end, weight);
}

at::Tensor & lerp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
return wrapper_Tensor_out_lerp_out_Tensor_out(self, end, weight, out);
}

at::Tensor & lerp_outf(const at::Tensor & self, const at::Tensor & end, const at::Tensor & weight, at::Tensor & out) {
return wrapper_Tensor_out_lerp_out_Tensor_out(self, end, weight, out);
}

at::Tensor & lerp_(at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
return wrapper_Tensor_lerp__Tensor(self, end, weight);
}

at::Tensor addbmm(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper__addbmm(self, batch1, batch2, beta, alpha);
}

at::Tensor & addbmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_out_addbmm_out_out(self, batch1, batch2, beta, alpha, out);
}

at::Tensor & addbmm_outf(const at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_out_addbmm_out_out(self, batch1, batch2, beta, alpha, out);
}

at::Tensor & addbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper__addbmm_(self, batch1, batch2, beta, alpha);
}

at::Tensor & random_(at::Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<at::Generator> generator) {
return wrapper_from_random__from(self, from, to, generator);
}

at::Tensor & random_(at::Tensor & self, int64_t to, c10::optional<at::Generator> generator) {
return wrapper_to_random__to(self, to, generator);
}

at::Tensor & random_(at::Tensor & self, c10::optional<at::Generator> generator) {
return wrapper__random_(self, generator);
}

at::Tensor & uniform_(at::Tensor & self, double from, double to, c10::optional<at::Generator> generator) {
return wrapper__uniform_(self, from, to, generator);
}

at::Tensor & cauchy_(at::Tensor & self, double median, double sigma, c10::optional<at::Generator> generator) {
return wrapper__cauchy_(self, median, sigma, generator);
}

at::Tensor & log_normal_(at::Tensor & self, double mean, double std, c10::optional<at::Generator> generator) {
return wrapper__log_normal_(self, mean, std, generator);
}

at::Tensor & exponential_(at::Tensor & self, double lambd, c10::optional<at::Generator> generator) {
return wrapper__exponential_(self, lambd, generator);
}

at::Tensor & geometric_(at::Tensor & self, double p, c10::optional<at::Generator> generator) {
return wrapper__geometric_(self, p, generator);
}

at::Tensor & diag_out(at::Tensor & out, const at::Tensor & self, int64_t diagonal) {
return wrapper_out_diag_out_out(self, diagonal, out);
}

at::Tensor & diag_outf(const at::Tensor & self, int64_t diagonal, at::Tensor & out) {
return wrapper_out_diag_out_out(self, diagonal, out);
}

at::Tensor cross(const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim) {
return wrapper__cross(self, other, dim);
}

at::Tensor & cross_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim) {
return wrapper_out_cross_out_out(self, other, dim, out);
}

at::Tensor & cross_outf(const at::Tensor & self, const at::Tensor & other, c10::optional<int64_t> dim, at::Tensor & out) {
return wrapper_out_cross_out_out(self, other, dim, out);
}

at::Tensor tril_indices(int64_t row, int64_t col, int64_t offset, at::TensorOptions options) {
return wrapper__tril_indices(row, col, offset, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
}

at::Tensor tril_indices(int64_t row, int64_t col, int64_t offset, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
return wrapper__tril_indices(row, col, offset, dtype, layout, device, pin_memory);
}

at::Tensor triu_indices(int64_t row, int64_t col, int64_t offset, at::TensorOptions options) {
return wrapper__triu_indices(row, col, offset, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
}

at::Tensor triu_indices(int64_t row, int64_t col, int64_t offset, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
return wrapper__triu_indices(row, col, offset, dtype, layout, device, pin_memory);
}

at::Tensor trace(const at::Tensor & self) {
return wrapper__trace(self);
}

at::Tensor ne(const at::Tensor & self, const at::Scalar & other) {
return wrapper_ne_Scalar(self, other);
}

at::Tensor & ne_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_ne_out_Scalar_out(self, other, out);
}

at::Tensor & ne_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_ne_out_Scalar_out(self, other, out);
}

at::Tensor & ne_(at::Tensor & self, const at::Scalar & other) {
return wrapper_ne__Scalar(self, other);
}

at::Tensor ne(const at::Tensor & self, const at::Tensor & other) {
return wrapper_ne_Tensor(self, other);
}

at::Tensor & ne_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_ne_out_Tensor_out(self, other, out);
}

at::Tensor & ne_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_ne_out_Tensor_out(self, other, out);
}

at::Tensor & ne_(at::Tensor & self, const at::Tensor & other) {
return wrapper_ne__Tensor(self, other);
}

at::Tensor ge(const at::Tensor & self, const at::Scalar & other) {
return wrapper_ge_Scalar(self, other);
}

at::Tensor & ge_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_ge_out_Scalar_out(self, other, out);
}

at::Tensor & ge_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_ge_out_Scalar_out(self, other, out);
}

at::Tensor & ge_(at::Tensor & self, const at::Scalar & other) {
return wrapper_ge__Scalar(self, other);
}

at::Tensor ge(const at::Tensor & self, const at::Tensor & other) {
return wrapper_ge_Tensor(self, other);
}

at::Tensor & ge_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_ge_out_Tensor_out(self, other, out);
}

at::Tensor & ge_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_ge_out_Tensor_out(self, other, out);
}

at::Tensor & ge_(at::Tensor & self, const at::Tensor & other) {
return wrapper_ge__Tensor(self, other);
}

at::Tensor le(const at::Tensor & self, const at::Scalar & other) {
return wrapper_le_Scalar(self, other);
}

at::Tensor & le_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_le_out_Scalar_out(self, other, out);
}

at::Tensor & le_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_le_out_Scalar_out(self, other, out);
}

at::Tensor & le_(at::Tensor & self, const at::Scalar & other) {
return wrapper_le__Scalar(self, other);
}

at::Tensor le(const at::Tensor & self, const at::Tensor & other) {
return wrapper_le_Tensor(self, other);
}

at::Tensor & le_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_le_out_Tensor_out(self, other, out);
}

at::Tensor & le_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_le_out_Tensor_out(self, other, out);
}

at::Tensor & le_(at::Tensor & self, const at::Tensor & other) {
return wrapper_le__Tensor(self, other);
}

at::Tensor gt(const at::Tensor & self, const at::Scalar & other) {
return wrapper_gt_Scalar(self, other);
}

at::Tensor & gt_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_gt_out_Scalar_out(self, other, out);
}

at::Tensor & gt_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_gt_out_Scalar_out(self, other, out);
}

at::Tensor & gt_(at::Tensor & self, const at::Scalar & other) {
return wrapper_gt__Scalar(self, other);
}

at::Tensor gt(const at::Tensor & self, const at::Tensor & other) {
return wrapper_gt_Tensor(self, other);
}

at::Tensor & gt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_gt_out_Tensor_out(self, other, out);
}

at::Tensor & gt_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_gt_out_Tensor_out(self, other, out);
}

at::Tensor & gt_(at::Tensor & self, const at::Tensor & other) {
return wrapper_gt__Tensor(self, other);
}

at::Tensor lt(const at::Tensor & self, const at::Scalar & other) {
return wrapper_lt_Scalar(self, other);
}

at::Tensor & lt_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_lt_out_Scalar_out(self, other, out);
}

at::Tensor & lt_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_lt_out_Scalar_out(self, other, out);
}

at::Tensor & lt_(at::Tensor & self, const at::Scalar & other) {
return wrapper_lt__Scalar(self, other);
}

at::Tensor lt(const at::Tensor & self, const at::Tensor & other) {
return wrapper_lt_Tensor(self, other);
}

at::Tensor & lt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_lt_out_Tensor_out(self, other, out);
}

at::Tensor & lt_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_lt_out_Tensor_out(self, other, out);
}

at::Tensor & lt_(at::Tensor & self, const at::Tensor & other) {
return wrapper_lt__Tensor(self, other);
}

at::Tensor take(const at::Tensor & self, const at::Tensor & index) {
return wrapper__take(self, index);
}

at::Tensor & take_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & index) {
return wrapper_out_take_out_out(self, index, out);
}

at::Tensor & take_outf(const at::Tensor & self, const at::Tensor & index, at::Tensor & out) {
return wrapper_out_take_out_out(self, index, out);
}

at::Tensor index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index) {
return wrapper__index_select(self, dim, index);
}

at::Tensor & index_select_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index) {
return wrapper_out_index_select_out_out(self, dim, index, out);
}

at::Tensor & index_select_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, at::Tensor & out) {
return wrapper_out_index_select_out_out(self, dim, index, out);
}

at::Tensor masked_select(const at::Tensor & self, const at::Tensor & mask) {
return wrapper__masked_select(self, mask);
}

at::Tensor & masked_select_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mask) {
return wrapper_out_masked_select_out_out(self, mask, out);
}

at::Tensor & masked_select_outf(const at::Tensor & self, const at::Tensor & mask, at::Tensor & out) {
return wrapper_out_masked_select_out_out(self, mask, out);
}

at::Tensor nonzero(const at::Tensor & self) {
return wrapper__nonzero(self);
}

at::Tensor & nonzero_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_out_nonzero_out_out(self, out);
}

at::Tensor & nonzero_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_out_nonzero_out_out(self, out);
}

at::Tensor gather(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
return wrapper_gather(self, dim, index, sparse_grad);
}

at::Tensor & gather_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
return wrapper_gather_out_out(self, dim, index, sparse_grad, out);
}

at::Tensor & gather_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad, at::Tensor & out) {
return wrapper_gather_out_out(self, dim, index, sparse_grad, out);
}

at::Tensor addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcmul(self, tensor1, tensor2, value);
}

at::Tensor & addcmul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcmul_out_out(self, tensor1, tensor2, value, out);
}

at::Tensor & addcmul_outf(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out) {
return wrapper_addcmul_out_out(self, tensor1, tensor2, value, out);
}

at::Tensor & addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcmul_(self, tensor1, tensor2, value);
}

at::Tensor addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcdiv(self, tensor1, tensor2, value);
}

at::Tensor & addcdiv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcdiv_out_out(self, tensor1, tensor2, value, out);
}

at::Tensor & addcdiv_outf(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out) {
return wrapper_addcdiv_out_out(self, tensor1, tensor2, value, out);
}

at::Tensor & addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcdiv_(self, tensor1, tensor2, value);
}

::std::tuple<at::Tensor,at::Tensor> lstsq(const at::Tensor & self, const at::Tensor & A) {
return wrapper__lstsq(self, A);
}

::std::tuple<at::Tensor &,at::Tensor &> lstsq_out(at::Tensor & X, at::Tensor & qr, const at::Tensor & self, const at::Tensor & A) {
return wrapper_X_lstsq_out_X(self, A, X, qr);
}

::std::tuple<at::Tensor &,at::Tensor &> lstsq_outf(const at::Tensor & self, const at::Tensor & A, at::Tensor & X, at::Tensor & qr) {
return wrapper_X_lstsq_out_X(self, A, X, qr);
}

::std::tuple<at::Tensor,at::Tensor> triangular_solve(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) {
return wrapper__triangular_solve(self, A, upper, transpose, unitriangular);
}

::std::tuple<at::Tensor &,at::Tensor &> triangular_solve_out(at::Tensor & X, at::Tensor & M, const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular) {
return wrapper_X_triangular_solve_out_X(self, A, upper, transpose, unitriangular, X, M);
}

::std::tuple<at::Tensor &,at::Tensor &> triangular_solve_outf(const at::Tensor & self, const at::Tensor & A, bool upper, bool transpose, bool unitriangular, at::Tensor & X, at::Tensor & M) {
return wrapper_X_triangular_solve_out_X(self, A, upper, transpose, unitriangular, X, M);
}

::std::tuple<at::Tensor,at::Tensor> _symeig_helper(const at::Tensor & self, bool eigenvectors, bool upper) {
return wrapper___symeig_helper(self, eigenvectors, upper);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> _svd_helper(const at::Tensor & self, bool some, bool compute_uv) {
return wrapper___svd_helper(self, some, compute_uv);
}

at::Tensor cholesky(const at::Tensor & self, bool upper) {
return wrapper__cholesky(self, upper);
}

at::Tensor & cholesky_out(at::Tensor & out, const at::Tensor & self, bool upper) {
return wrapper_out_cholesky_out_out(self, upper, out);
}

at::Tensor & cholesky_outf(const at::Tensor & self, bool upper, at::Tensor & out) {
return wrapper_out_cholesky_out_out(self, upper, out);
}

at::Tensor _cholesky_solve_helper(const at::Tensor & self, const at::Tensor & A, bool upper) {
return wrapper___cholesky_solve_helper(self, A, upper);
}

::std::tuple<at::Tensor,at::Tensor> _solve_helper(const at::Tensor & self, const at::Tensor & A) {
return wrapper___solve_helper(self, A);
}

at::Tensor cholesky_inverse(const at::Tensor & self, bool upper) {
return wrapper__cholesky_inverse(self, upper);
}

at::Tensor & cholesky_inverse_out(at::Tensor & out, const at::Tensor & self, bool upper) {
return wrapper_out_cholesky_inverse_out_out(self, upper, out);
}

at::Tensor & cholesky_inverse_outf(const at::Tensor & self, bool upper, at::Tensor & out) {
return wrapper_out_cholesky_inverse_out_out(self, upper, out);
}

::std::tuple<at::Tensor,at::Tensor> geqrf(const at::Tensor & self) {
return wrapper__geqrf(self);
}

::std::tuple<at::Tensor &,at::Tensor &> geqrf_out(at::Tensor & a, at::Tensor & tau, const at::Tensor & self) {
return wrapper_a_geqrf_out_a(self, a, tau);
}

::std::tuple<at::Tensor &,at::Tensor &> geqrf_outf(const at::Tensor & self, at::Tensor & a, at::Tensor & tau) {
return wrapper_a_geqrf_out_a(self, a, tau);
}

at::Tensor ormqr(const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) {
return wrapper__ormqr(self, input2, input3, left, transpose);
}

at::Tensor & ormqr_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose) {
return wrapper_out_ormqr_out_out(self, input2, input3, left, transpose, out);
}

at::Tensor & ormqr_outf(const at::Tensor & self, const at::Tensor & input2, const at::Tensor & input3, bool left, bool transpose, at::Tensor & out) {
return wrapper_out_ormqr_out_out(self, input2, input3, left, transpose, out);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> _lu_with_info(const at::Tensor & self, bool pivot, bool check_errors) {
return wrapper___lu_with_info(self, pivot, check_errors);
}

at::Tensor lu_solve(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) {
return wrapper__lu_solve(self, LU_data, LU_pivots);
}

at::Tensor & lu_solve_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots) {
return wrapper_out_lu_solve_out_out(self, LU_data, LU_pivots, out);
}

at::Tensor & lu_solve_outf(const at::Tensor & self, const at::Tensor & LU_data, const at::Tensor & LU_pivots, at::Tensor & out) {
return wrapper_out_lu_solve_out_out(self, LU_data, LU_pivots, out);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> lu_unpack(const at::Tensor & LU_data, const at::Tensor & LU_pivots, bool unpack_data, bool unpack_pivots) {
return wrapper__lu_unpack(LU_data, LU_pivots, unpack_data, unpack_pivots);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> lu_unpack_out(at::Tensor & P, at::Tensor & L, at::Tensor & U, const at::Tensor & LU_data, const at::Tensor & LU_pivots, bool unpack_data, bool unpack_pivots) {
return wrapper_out_lu_unpack_out_out(LU_data, LU_pivots, unpack_data, unpack_pivots, P, L, U);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> lu_unpack_outf(const at::Tensor & LU_data, const at::Tensor & LU_pivots, bool unpack_data, bool unpack_pivots, at::Tensor & P, at::Tensor & L, at::Tensor & U) {
return wrapper_out_lu_unpack_out_out(LU_data, LU_pivots, unpack_data, unpack_pivots, P, L, U);
}

at::Tensor multinomial(const at::Tensor & self, int64_t num_samples, bool replacement, c10::optional<at::Generator> generator) {
return wrapper__multinomial(self, num_samples, replacement, generator);
}

at::Tensor & multinomial_out(at::Tensor & out, const at::Tensor & self, int64_t num_samples, bool replacement, c10::optional<at::Generator> generator) {
return wrapper_out_multinomial_out_out(self, num_samples, replacement, generator, out);
}

at::Tensor & multinomial_outf(const at::Tensor & self, int64_t num_samples, bool replacement, c10::optional<at::Generator> generator, at::Tensor & out) {
return wrapper_out_multinomial_out_out(self, num_samples, replacement, generator, out);
}

at::Tensor lgamma(const at::Tensor & self) {
return wrapper_lgamma(self);
}

at::Tensor & lgamma_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_lgamma_out_out(self, out);
}

at::Tensor & lgamma_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_lgamma_out_out(self, out);
}

at::Tensor & lgamma_(at::Tensor & self) {
return wrapper_lgamma_(self);
}

at::Tensor polygamma(int64_t n, const at::Tensor & self) {
return wrapper_polygamma(n, self);
}

at::Tensor & polygamma_out(at::Tensor & out, int64_t n, const at::Tensor & self) {
return wrapper_polygamma_out_out(n, self, out);
}

at::Tensor & polygamma_outf(int64_t n, const at::Tensor & self, at::Tensor & out) {
return wrapper_polygamma_out_out(n, self, out);
}

at::Tensor erfinv(const at::Tensor & self) {
return wrapper_erfinv(self);
}

at::Tensor & erfinv_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_erfinv_out_out(self, out);
}

at::Tensor & erfinv_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_erfinv_out_out(self, out);
}

at::Tensor & erfinv_(at::Tensor & self) {
return wrapper_erfinv_(self);
}

at::Tensor i0(const at::Tensor & self) {
return wrapper_i0(self);
}

at::Tensor & i0_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_i0_out_out(self, out);
}

at::Tensor & i0_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_i0_out_out(self, out);
}

at::Tensor & i0_(at::Tensor & self) {
return wrapper_i0_(self);
}

at::Tensor sign(const at::Tensor & self) {
return wrapper_sign(self);
}

at::Tensor & sign_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sign_out_out(self, out);
}

at::Tensor & sign_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sign_out_out(self, out);
}

at::Tensor & sign_(at::Tensor & self) {
return wrapper_sign_(self);
}

at::Tensor signbit(const at::Tensor & self) {
return wrapper_signbit(self);
}

at::Tensor & signbit_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_signbit_out_out(self, out);
}

at::Tensor & signbit_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_signbit_out_out(self, out);
}

at::Tensor atan2(const at::Tensor & self, const at::Tensor & other) {
return wrapper_atan2(self, other);
}

at::Tensor & atan2_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_atan2_out_out(self, other, out);
}

at::Tensor & atan2_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_atan2_out_out(self, other, out);
}

at::Tensor & atan2_(at::Tensor & self, const at::Tensor & other) {
return wrapper_atan2_(self, other);
}

at::Tensor histc(const at::Tensor & self, int64_t bins, const at::Scalar & min, const at::Scalar & max) {
return wrapper__histc(self, bins, min, max);
}

at::Tensor & histc_out(at::Tensor & out, const at::Tensor & self, int64_t bins, const at::Scalar & min, const at::Scalar & max) {
return wrapper_out_histc_out_out(self, bins, min, max, out);
}

at::Tensor & histc_outf(const at::Tensor & self, int64_t bins, const at::Scalar & min, const at::Scalar & max, at::Tensor & out) {
return wrapper_out_histc_out_out(self, bins, min, max, out);
}

::std::tuple<at::Tensor,at::Tensor> histogram(const at::Tensor & self, const at::Tensor & bins, const c10::optional<at::Tensor> & weight, bool density) {
return wrapper_bins_tensor_histogram_bins_tensor(self, bins, weight, density);
}

::std::tuple<at::Tensor &,at::Tensor &> histogram_out(at::Tensor & hist, at::Tensor & bin_edges, const at::Tensor & self, const at::Tensor & bins, const c10::optional<at::Tensor> & weight, bool density) {
return wrapper_bins_tensor_out_histogram_out_bins_tensor_out(self, bins, weight, density, hist, bin_edges);
}

::std::tuple<at::Tensor &,at::Tensor &> histogram_outf(const at::Tensor & self, const at::Tensor & bins, const c10::optional<at::Tensor> & weight, bool density, at::Tensor & hist, at::Tensor & bin_edges) {
return wrapper_bins_tensor_out_histogram_out_bins_tensor_out(self, bins, weight, density, hist, bin_edges);
}

::std::tuple<at::Tensor,at::Tensor> histogram(const at::Tensor & self, int64_t bins, c10::optional<at::ArrayRef<double>> range, const c10::optional<at::Tensor> & weight, bool density) {
return wrapper_bin_ct_histogram_bin_ct(self, bins, range, weight, density);
}

::std::tuple<at::Tensor &,at::Tensor &> histogram_out(at::Tensor & hist, at::Tensor & bin_edges, const at::Tensor & self, int64_t bins, c10::optional<at::ArrayRef<double>> range, const c10::optional<at::Tensor> & weight, bool density) {
return wrapper_bin_ct_out_histogram_out_bin_ct_out(self, bins, range, weight, density, hist, bin_edges);
}

::std::tuple<at::Tensor &,at::Tensor &> histogram_outf(const at::Tensor & self, int64_t bins, c10::optional<at::ArrayRef<double>> range, const c10::optional<at::Tensor> & weight, bool density, at::Tensor & hist, at::Tensor & bin_edges) {
return wrapper_bin_ct_out_histogram_out_bin_ct_out(self, bins, range, weight, density, hist, bin_edges);
}

at::Tensor fmod(const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmod_Tensor(self, other);
}

at::Tensor & fmod_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmod_out_Tensor_out(self, other, out);
}

at::Tensor & fmod_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_fmod_out_Tensor_out(self, other, out);
}

at::Tensor & fmod_(at::Tensor & self, const at::Tensor & other) {
return wrapper_fmod__Tensor(self, other);
}

at::Tensor hypot(const at::Tensor & self, const at::Tensor & other) {
return wrapper_hypot(self, other);
}

at::Tensor & hypot_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_hypot_out_out(self, other, out);
}

at::Tensor & hypot_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_hypot_out_out(self, other, out);
}

at::Tensor & hypot_(at::Tensor & self, const at::Tensor & other) {
return wrapper_hypot_(self, other);
}

at::Tensor igamma(const at::Tensor & self, const at::Tensor & other) {
return wrapper_igamma(self, other);
}

at::Tensor & igamma_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_igamma_out_out(self, other, out);
}

at::Tensor & igamma_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_igamma_out_out(self, other, out);
}

at::Tensor & igamma_(at::Tensor & self, const at::Tensor & other) {
return wrapper_igamma_(self, other);
}

at::Tensor igammac(const at::Tensor & self, const at::Tensor & other) {
return wrapper_igammac(self, other);
}

at::Tensor & igammac_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_igammac_out_out(self, other, out);
}

at::Tensor & igammac_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_igammac_out_out(self, other, out);
}

at::Tensor & igammac_(at::Tensor & self, const at::Tensor & other) {
return wrapper_igammac_(self, other);
}

at::Tensor nextafter(const at::Tensor & self, const at::Tensor & other) {
return wrapper_nextafter(self, other);
}

at::Tensor & nextafter_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_nextafter_out_out(self, other, out);
}

at::Tensor & nextafter_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_nextafter_out_out(self, other, out);
}

at::Tensor & nextafter_(at::Tensor & self, const at::Tensor & other) {
return wrapper_nextafter_(self, other);
}

at::Tensor remainder(const at::Tensor & self, const at::Tensor & other) {
return wrapper_remainder_Tensor(self, other);
}

at::Tensor & remainder_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_remainder_out_Tensor_out(self, other, out);
}

at::Tensor & remainder_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_remainder_out_Tensor_out(self, other, out);
}

at::Tensor & remainder_(at::Tensor & self, const at::Tensor & other) {
return wrapper_remainder__Tensor(self, other);
}

at::Tensor remainder(const at::Scalar & self, const at::Tensor & other) {
return wrapper_Scalar_Tensor_remainder_Scalar_Tensor(self, other);
}

at::Tensor min(const at::Tensor & self) {
return wrapper__min(self);
}

at::Tensor fmin(const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmin(self, other);
}

at::Tensor & fmin_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmin_out_out(self, other, out);
}

at::Tensor & fmin_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_fmin_out_out(self, other, out);
}

at::Tensor max(const at::Tensor & self) {
return wrapper__max(self);
}

at::Tensor fmax(const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmax(self, other);
}

at::Tensor & fmax_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmax_out_out(self, other, out);
}

at::Tensor & fmax_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_fmax_out_out(self, other, out);
}

at::Tensor maximum(const at::Tensor & self, const at::Tensor & other) {
return wrapper_maximum(self, other);
}

at::Tensor & maximum_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_maximum_out_out(self, other, out);
}

at::Tensor & maximum_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_maximum_out_out(self, other, out);
}

at::Tensor minimum(const at::Tensor & self, const at::Tensor & other) {
return wrapper_minimum(self, other);
}

at::Tensor & minimum_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_minimum_out_out(self, other, out);
}

at::Tensor & minimum_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_minimum_out_out(self, other, out);
}

::std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, int64_t dim, bool descending) {
return wrapper__sort(self, dim, descending);
}

::std::tuple<at::Tensor &,at::Tensor &> sort_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t dim, bool descending) {
return wrapper_values_sort_out_values(self, dim, descending, values, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> sort_outf(const at::Tensor & self, int64_t dim, bool descending, at::Tensor & values, at::Tensor & indices) {
return wrapper_values_sort_out_values(self, dim, descending, values, indices);
}

::std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending) {
return wrapper_stable_sort_stable(self, stable, dim, descending);
}

::std::tuple<at::Tensor &,at::Tensor &> sort_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending) {
return wrapper_values_stable_sort_out_values_stable(self, stable, dim, descending, values, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> sort_outf(const at::Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending, at::Tensor & values, at::Tensor & indices) {
return wrapper_values_stable_sort_out_values_stable(self, stable, dim, descending, values, indices);
}

::std::tuple<at::Tensor,at::Tensor> topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
return wrapper_topk(self, k, dim, largest, sorted);
}

::std::tuple<at::Tensor &,at::Tensor &> topk_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
return wrapper_topk_out_values(self, k, dim, largest, sorted, values, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> topk_outf(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, at::Tensor & values, at::Tensor & indices) {
return wrapper_topk_out_values(self, k, dim, largest, sorted, values, indices);
}

at::Tensor all(const at::Tensor & self) {
return wrapper_all(self);
}

at::Tensor & all_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_all_out_all_out(self, out);
}

at::Tensor & all_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_all_out_all_out(self, out);
}

at::Tensor any(const at::Tensor & self) {
return wrapper_any(self);
}

at::Tensor & any_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_any_out_all_out(self, out);
}

at::Tensor & any_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_any_out_all_out(self, out);
}

at::Tensor renorm(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
return wrapper_renorm(self, p, dim, maxnorm);
}

at::Tensor & renorm_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
return wrapper_renorm_out_out(self, p, dim, maxnorm, out);
}

at::Tensor & renorm_outf(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm, at::Tensor & out) {
return wrapper_renorm_out_out(self, p, dim, maxnorm, out);
}

at::Tensor & renorm_(at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
return wrapper_renorm_(self, p, dim, maxnorm);
}

at::Tensor unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step) {
return wrapper__unfold(self, dimension, size, step);
}

at::Tensor unfold_backward(const at::Tensor & grad_in, at::IntArrayRef input_sizes, int64_t dim, int64_t size, int64_t step) {
return wrapper__unfold_backward(grad_in, input_sizes, dim, size, step);
}

bool equal(const at::Tensor & self, const at::Tensor & other) {
return wrapper__equal(self, other);
}

at::Tensor pow(const at::Tensor & self, const at::Tensor & exponent) {
return wrapper_pow_Tensor_Tensor(self, exponent);
}

at::Tensor & pow_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & exponent) {
return wrapper_pow_out_Tensor_Tensor_out(self, exponent, out);
}

at::Tensor & pow_outf(const at::Tensor & self, const at::Tensor & exponent, at::Tensor & out) {
return wrapper_pow_out_Tensor_Tensor_out(self, exponent, out);
}

at::Tensor & pow_(at::Tensor & self, const at::Tensor & exponent) {
return wrapper_pow__Tensor(self, exponent);
}

at::Tensor pow(const at::Scalar & self, const at::Tensor & exponent) {
return wrapper_pow_Scalar(self, exponent);
}

at::Tensor & pow_out(at::Tensor & out, const at::Scalar & self, const at::Tensor & exponent) {
return wrapper_pow_out_Scalar_out(self, exponent, out);
}

at::Tensor & pow_outf(const at::Scalar & self, const at::Tensor & exponent, at::Tensor & out) {
return wrapper_pow_out_Scalar_out(self, exponent, out);
}

at::Tensor pow(const at::Tensor & self, const at::Scalar & exponent) {
return wrapper_pow_Tensor_Scalar(self, exponent);
}

at::Tensor & pow_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & exponent) {
return wrapper_pow_out_Tensor_Scalar_out(self, exponent, out);
}

at::Tensor & pow_outf(const at::Tensor & self, const at::Scalar & exponent, at::Tensor & out) {
return wrapper_pow_out_Tensor_Scalar_out(self, exponent, out);
}

at::Tensor & pow_(at::Tensor & self, const at::Scalar & exponent) {
return wrapper_pow__Scalar(self, exponent);
}

at::Tensor & normal_(at::Tensor & self, double mean, double std, c10::optional<at::Generator> generator) {
return wrapper__normal_(self, mean, std, generator);
}

at::Tensor normal(const at::Tensor & mean, double std, c10::optional<at::Generator> generator) {
return wrapper_Tensor_float_normal_Tensor_float(mean, std, generator);
}

at::Tensor & normal_out(at::Tensor & out, const at::Tensor & mean, double std, c10::optional<at::Generator> generator) {
return wrapper_Tensor_float_out_normal_out_Tensor_float_out(mean, std, generator, out);
}

at::Tensor & normal_outf(const at::Tensor & mean, double std, c10::optional<at::Generator> generator, at::Tensor & out) {
return wrapper_Tensor_float_out_normal_out_Tensor_float_out(mean, std, generator, out);
}

at::Tensor normal(double mean, const at::Tensor & std, c10::optional<at::Generator> generator) {
return wrapper_float_Tensor_normal_float_Tensor(mean, std, generator);
}

at::Tensor & normal_out(at::Tensor & out, double mean, const at::Tensor & std, c10::optional<at::Generator> generator) {
return wrapper_float_Tensor_out_normal_out_float_Tensor_out(mean, std, generator, out);
}

at::Tensor & normal_outf(double mean, const at::Tensor & std, c10::optional<at::Generator> generator, at::Tensor & out) {
return wrapper_float_Tensor_out_normal_out_float_Tensor_out(mean, std, generator, out);
}

at::Tensor normal(const at::Tensor & mean, const at::Tensor & std, c10::optional<at::Generator> generator) {
return wrapper_Tensor_Tensor_normal_Tensor_Tensor(mean, std, generator);
}

at::Tensor & normal_out(at::Tensor & out, const at::Tensor & mean, const at::Tensor & std, c10::optional<at::Generator> generator) {
return wrapper_Tensor_Tensor_out_normal_out_Tensor_Tensor_out(mean, std, generator, out);
}

at::Tensor & normal_outf(const at::Tensor & mean, const at::Tensor & std, c10::optional<at::Generator> generator, at::Tensor & out) {
return wrapper_Tensor_Tensor_out_normal_out_Tensor_Tensor_out(mean, std, generator, out);
}

at::Tensor & _index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
return wrapper___index_copy_(self, dim, index, source);
}

at::Tensor _cat(at::TensorList tensors, int64_t dim) {
return wrapper___cat(tensors, dim);
}

at::Tensor & _cat_out(at::Tensor & out, at::TensorList tensors, int64_t dim) {
return wrapper_out__cat_out_out(tensors, dim, out);
}

at::Tensor & _cat_outf(at::TensorList tensors, int64_t dim, at::Tensor & out) {
return wrapper_out__cat_out_out(tensors, dim, out);
}

::std::vector<at::Tensor> _foreach_add(at::TensorList tensors, const at::Scalar & scalar) {
return wrapper_Scalar__foreach_add_Scalar(tensors, scalar);
}

void _foreach_add_(at::TensorList self, const at::Scalar & scalar) {
return wrapper_Scalar__foreach_add__Scalar(self, scalar);
}

::std::vector<at::Tensor> _foreach_sub(at::TensorList tensors, const at::Scalar & scalar) {
return wrapper_Scalar__foreach_sub_Scalar(tensors, scalar);
}

void _foreach_sub_(at::TensorList self, const at::Scalar & scalar) {
return wrapper_Scalar__foreach_sub__Scalar(self, scalar);
}

::std::vector<at::Tensor> _foreach_mul(at::TensorList tensors, const at::Scalar & scalar) {
return wrapper_Scalar__foreach_mul_Scalar(tensors, scalar);
}

void _foreach_mul_(at::TensorList self, const at::Scalar & scalar) {
return wrapper_Scalar__foreach_mul__Scalar(self, scalar);
}

::std::vector<at::Tensor> _foreach_div(at::TensorList tensors, const at::Scalar & scalar) {
return wrapper_Scalar__foreach_div_Scalar(tensors, scalar);
}

void _foreach_div_(at::TensorList self, const at::Scalar & scalar) {
return wrapper_Scalar__foreach_div__Scalar(self, scalar);
}

::std::vector<at::Tensor> _foreach_add(at::TensorList tensors1, at::TensorList tensors2, const at::Scalar & alpha) {
return wrapper_List__foreach_add_List(tensors1, tensors2, alpha);
}

void _foreach_add_(at::TensorList self, at::TensorList other, const at::Scalar & alpha) {
return wrapper_List__foreach_add__List(self, other, alpha);
}

::std::vector<at::Tensor> _foreach_sub(at::TensorList tensors1, at::TensorList tensors2, const at::Scalar & alpha) {
return wrapper_List__foreach_sub_List(tensors1, tensors2, alpha);
}

void _foreach_sub_(at::TensorList self, at::TensorList other, const at::Scalar & alpha) {
return wrapper_List__foreach_sub__List(self, other, alpha);
}

::std::vector<at::Tensor> _foreach_mul(at::TensorList tensors1, at::TensorList tensors2) {
return wrapper_List__foreach_mul_List(tensors1, tensors2);
}

void _foreach_mul_(at::TensorList self, at::TensorList other) {
return wrapper_List__foreach_mul__List(self, other);
}

::std::vector<at::Tensor> _foreach_div(at::TensorList tensors1, at::TensorList tensors2) {
return wrapper_List__foreach_div_List(tensors1, tensors2);
}

void _foreach_div_(at::TensorList self, at::TensorList other) {
return wrapper_List__foreach_div__List(self, other);
}

::std::vector<at::Tensor> _foreach_add(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_add_ScalarList(tensors, scalars);
}

void _foreach_add_(at::TensorList self, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_add__ScalarList(self, scalars);
}

::std::vector<at::Tensor> _foreach_sub(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_sub_ScalarList(tensors, scalars);
}

void _foreach_sub_(at::TensorList self, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_sub__ScalarList(self, scalars);
}

::std::vector<at::Tensor> _foreach_div(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_div_ScalarList(tensors, scalars);
}

void _foreach_div_(at::TensorList self, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_div__ScalarList(self, scalars);
}

::std::vector<at::Tensor> _foreach_mul(at::TensorList tensors, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_mul_ScalarList(tensors, scalars);
}

void _foreach_mul_(at::TensorList self, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_mul__ScalarList(self, scalars);
}

::std::vector<at::Tensor> _foreach_exp(at::TensorList tensors) {
return wrapper___foreach_exp(tensors);
}

void _foreach_zero_(at::TensorList self) {
return wrapper___foreach_zero_(self);
}

void _foreach_exp_(at::TensorList self) {
return wrapper___foreach_exp_(self);
}

::std::vector<at::Tensor> _foreach_sqrt(at::TensorList tensors) {
return wrapper___foreach_sqrt(tensors);
}

void _foreach_sqrt_(at::TensorList self) {
return wrapper___foreach_sqrt_(self);
}

::std::vector<at::Tensor> _foreach_abs(at::TensorList tensors) {
return wrapper___foreach_abs(tensors);
}

void _foreach_abs_(at::TensorList self) {
return wrapper___foreach_abs_(self);
}

::std::vector<at::Tensor> _foreach_acos(at::TensorList tensors) {
return wrapper___foreach_acos(tensors);
}

void _foreach_acos_(at::TensorList self) {
return wrapper___foreach_acos_(self);
}

::std::vector<at::Tensor> _foreach_asin(at::TensorList tensors) {
return wrapper___foreach_asin(tensors);
}

void _foreach_asin_(at::TensorList self) {
return wrapper___foreach_asin_(self);
}

::std::vector<at::Tensor> _foreach_atan(at::TensorList tensors) {
return wrapper___foreach_atan(tensors);
}

void _foreach_atan_(at::TensorList self) {
return wrapper___foreach_atan_(self);
}

::std::vector<at::Tensor> _foreach_ceil(at::TensorList tensors) {
return wrapper___foreach_ceil(tensors);
}

void _foreach_ceil_(at::TensorList self) {
return wrapper___foreach_ceil_(self);
}

::std::vector<at::Tensor> _foreach_cos(at::TensorList tensors) {
return wrapper___foreach_cos(tensors);
}

void _foreach_cos_(at::TensorList self) {
return wrapper___foreach_cos_(self);
}

::std::vector<at::Tensor> _foreach_cosh(at::TensorList tensors) {
return wrapper___foreach_cosh(tensors);
}

void _foreach_cosh_(at::TensorList self) {
return wrapper___foreach_cosh_(self);
}

::std::vector<at::Tensor> _foreach_erf(at::TensorList tensors) {
return wrapper___foreach_erf(tensors);
}

void _foreach_erf_(at::TensorList self) {
return wrapper___foreach_erf_(self);
}

::std::vector<at::Tensor> _foreach_erfc(at::TensorList tensors) {
return wrapper___foreach_erfc(tensors);
}

void _foreach_erfc_(at::TensorList self) {
return wrapper___foreach_erfc_(self);
}

::std::vector<at::Tensor> _foreach_expm1(at::TensorList tensors) {
return wrapper___foreach_expm1(tensors);
}

void _foreach_expm1_(at::TensorList self) {
return wrapper___foreach_expm1_(self);
}

::std::vector<at::Tensor> _foreach_floor(at::TensorList tensors) {
return wrapper___foreach_floor(tensors);
}

void _foreach_floor_(at::TensorList self) {
return wrapper___foreach_floor_(self);
}

::std::vector<at::Tensor> _foreach_log(at::TensorList tensors) {
return wrapper___foreach_log(tensors);
}

void _foreach_log_(at::TensorList self) {
return wrapper___foreach_log_(self);
}

::std::vector<at::Tensor> _foreach_log10(at::TensorList tensors) {
return wrapper___foreach_log10(tensors);
}

void _foreach_log10_(at::TensorList self) {
return wrapper___foreach_log10_(self);
}

::std::vector<at::Tensor> _foreach_log1p(at::TensorList tensors) {
return wrapper___foreach_log1p(tensors);
}

void _foreach_log1p_(at::TensorList self) {
return wrapper___foreach_log1p_(self);
}

::std::vector<at::Tensor> _foreach_log2(at::TensorList tensors) {
return wrapper___foreach_log2(tensors);
}

void _foreach_log2_(at::TensorList self) {
return wrapper___foreach_log2_(self);
}

::std::vector<at::Tensor> _foreach_neg(at::TensorList tensors) {
return wrapper___foreach_neg(tensors);
}

void _foreach_neg_(at::TensorList self) {
return wrapper___foreach_neg_(self);
}

::std::vector<at::Tensor> _foreach_tan(at::TensorList tensors) {
return wrapper___foreach_tan(tensors);
}

void _foreach_tan_(at::TensorList self) {
return wrapper___foreach_tan_(self);
}

::std::vector<at::Tensor> _foreach_tanh(at::TensorList tensors) {
return wrapper___foreach_tanh(tensors);
}

void _foreach_tanh_(at::TensorList self) {
return wrapper___foreach_tanh_(self);
}

::std::vector<at::Tensor> _foreach_sin(at::TensorList tensors) {
return wrapper___foreach_sin(tensors);
}

void _foreach_sin_(at::TensorList self) {
return wrapper___foreach_sin_(self);
}

::std::vector<at::Tensor> _foreach_sinh(at::TensorList tensors) {
return wrapper___foreach_sinh(tensors);
}

void _foreach_sinh_(at::TensorList self) {
return wrapper___foreach_sinh_(self);
}

::std::vector<at::Tensor> _foreach_round(at::TensorList tensors) {
return wrapper___foreach_round(tensors);
}

void _foreach_round_(at::TensorList self) {
return wrapper___foreach_round_(self);
}

::std::vector<at::Tensor> _foreach_lgamma(at::TensorList tensors) {
return wrapper___foreach_lgamma(tensors);
}

void _foreach_lgamma_(at::TensorList self) {
return wrapper___foreach_lgamma_(self);
}

::std::vector<at::Tensor> _foreach_frac(at::TensorList tensors) {
return wrapper___foreach_frac(tensors);
}

void _foreach_frac_(at::TensorList self) {
return wrapper___foreach_frac_(self);
}

::std::vector<at::Tensor> _foreach_reciprocal(at::TensorList tensors) {
return wrapper___foreach_reciprocal(tensors);
}

void _foreach_reciprocal_(at::TensorList self) {
return wrapper___foreach_reciprocal_(self);
}

::std::vector<at::Tensor> _foreach_sigmoid(at::TensorList tensors) {
return wrapper___foreach_sigmoid(tensors);
}

void _foreach_sigmoid_(at::TensorList self) {
return wrapper___foreach_sigmoid_(self);
}

::std::vector<at::Tensor> _foreach_trunc(at::TensorList tensors) {
return wrapper___foreach_trunc(tensors);
}

void _foreach_trunc_(at::TensorList self) {
return wrapper___foreach_trunc_(self);
}

void _foreach_addcdiv_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value) {
return wrapper_Scalar__foreach_addcdiv__Scalar(self, tensor1, tensor2, value);
}

void _foreach_addcmul_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value) {
return wrapper_Scalar__foreach_addcmul__Scalar(self, tensor1, tensor2, value);
}

void _foreach_addcdiv_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_addcdiv__ScalarList(self, tensor1, tensor2, scalars);
}

void _foreach_addcmul_(at::TensorList self, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_addcmul__ScalarList(self, tensor1, tensor2, scalars);
}

::std::vector<at::Tensor> _foreach_addcdiv(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value) {
return wrapper_Scalar__foreach_addcdiv_Scalar(input, tensor1, tensor2, value);
}

::std::vector<at::Tensor> _foreach_addcmul(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, const at::Scalar & value) {
return wrapper_Scalar__foreach_addcmul_Scalar(input, tensor1, tensor2, value);
}

::std::vector<at::Tensor> _foreach_addcdiv(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_addcdiv_ScalarList(input, tensor1, tensor2, scalars);
}

::std::vector<at::Tensor> _foreach_addcmul(at::TensorList input, at::TensorList tensor1, at::TensorList tensor2, at::ArrayRef<at::Scalar> scalars) {
return wrapper_ScalarList__foreach_addcmul_ScalarList(input, tensor1, tensor2, scalars);
}

::std::vector<at::Tensor> _foreach_maximum(at::TensorList tensors1, at::TensorList tensors2) {
return wrapper_List__foreach_maximum_List(tensors1, tensors2);
}

::std::vector<at::Tensor> _foreach_minimum(at::TensorList tensors1, at::TensorList tensors2) {
return wrapper_List__foreach_minimum_List(tensors1, tensors2);
}

at::Tensor bucketize(const at::Tensor & self, const at::Tensor & boundaries, bool out_int32, bool right) {
return wrapper_Tensor_bucketize_Tensor(self, boundaries, out_int32, right);
}

at::Tensor & bucketize_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & boundaries, bool out_int32, bool right) {
return wrapper_Tensor_out_bucketize_out_Tensor_out(self, boundaries, out_int32, right, out);
}

at::Tensor & bucketize_outf(const at::Tensor & self, const at::Tensor & boundaries, bool out_int32, bool right, at::Tensor & out) {
return wrapper_Tensor_out_bucketize_out_Tensor_out(self, boundaries, out_int32, right, out);
}

at::Tensor bucketize(const at::Scalar & self, const at::Tensor & boundaries, bool out_int32, bool right) {
return wrapper_Scalar_bucketize_Scalar(self, boundaries, out_int32, right);
}

at::Tensor searchsorted(const at::Tensor & sorted_sequence, const at::Tensor & self, bool out_int32, bool right) {
return wrapper_Tensor_searchsorted_Tensor(sorted_sequence, self, out_int32, right);
}

at::Tensor & searchsorted_out(at::Tensor & out, const at::Tensor & sorted_sequence, const at::Tensor & self, bool out_int32, bool right) {
return wrapper_Tensor_out_searchsorted_out_Tensor_out(sorted_sequence, self, out_int32, right, out);
}

at::Tensor & searchsorted_outf(const at::Tensor & sorted_sequence, const at::Tensor & self, bool out_int32, bool right, at::Tensor & out) {
return wrapper_Tensor_out_searchsorted_out_Tensor_out(sorted_sequence, self, out_int32, right, out);
}

at::Tensor searchsorted(const at::Tensor & sorted_sequence, const at::Scalar & self, bool out_int32, bool right) {
return wrapper_Scalar_searchsorted_Scalar(sorted_sequence, self, out_int32, right);
}

at::Tensor _convert_indices_from_coo_to_csr(const at::Tensor & self, int64_t size, bool out_int32) {
return wrapper__convert_indices_from_coo_to_csr(self, size, out_int32);
}

at::Tensor & _convert_indices_from_coo_to_csr_out(at::Tensor & out, const at::Tensor & self, int64_t size, bool out_int32) {
return wrapper__convert_indices_from_coo_to_csr_out_out(self, size, out_int32, out);
}

at::Tensor & _convert_indices_from_coo_to_csr_outf(const at::Tensor & self, int64_t size, bool out_int32, at::Tensor & out) {
return wrapper__convert_indices_from_coo_to_csr_out_out(self, size, out_int32, out);
}

at::Tensor mse_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
return wrapper__mse_loss(self, target, reduction);
}

at::Tensor & mse_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
return wrapper_out_mse_loss_out_out(self, target, reduction, out);
}

at::Tensor & mse_loss_outf(const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & out) {
return wrapper_out_mse_loss_out_out(self, target, reduction, out);
}

at::Tensor mse_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
return wrapper__mse_loss_backward(grad_output, self, target, reduction);
}

at::Tensor & mse_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
return wrapper_grad_input_mse_loss_backward_out_grad_input(grad_output, self, target, reduction, grad_input);
}

at::Tensor & mse_loss_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & grad_input) {
return wrapper_grad_input_mse_loss_backward_out_grad_input(grad_output, self, target, reduction, grad_input);
}

at::Tensor & l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
return wrapper_grad_input_l1_loss_backward_out_grad_input(grad_output, self, target, reduction, grad_input);
}

at::Tensor & l1_loss_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & grad_input) {
return wrapper_grad_input_l1_loss_backward_out_grad_input(grad_output, self, target, reduction, grad_input);
}

at::Tensor multi_margin_loss(const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction) {
return wrapper__multi_margin_loss(self, target, p, margin, weight, reduction);
}

at::Tensor & multi_margin_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction) {
return wrapper_out_multi_margin_loss_out_out(self, target, p, margin, weight, reduction, out);
}

at::Tensor & multi_margin_loss_outf(const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & out) {
return wrapper_out_multi_margin_loss_out_out(self, target, p, margin, weight, reduction, out);
}

at::Tensor multi_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction) {
return wrapper__multi_margin_loss_backward(grad_output, self, target, p, margin, weight, reduction);
}

at::Tensor & multi_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction) {
return wrapper_grad_input_multi_margin_loss_backward_out_grad_input(grad_output, self, target, p, margin, weight, reduction, grad_input);
}

at::Tensor & multi_margin_loss_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const at::Scalar & p, const at::Scalar & margin, const c10::optional<at::Tensor> & weight, int64_t reduction, at::Tensor & grad_input) {
return wrapper_grad_input_multi_margin_loss_backward_out_grad_input(grad_output, self, target, p, margin, weight, reduction, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> multilabel_margin_loss_forward(const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
return wrapper__multilabel_margin_loss_forward(self, target, reduction);
}

::std::tuple<at::Tensor &,at::Tensor &> multilabel_margin_loss_forward_out(at::Tensor & output, at::Tensor & is_target, const at::Tensor & self, const at::Tensor & target, int64_t reduction) {
return wrapper_output_multilabel_margin_loss_forward_out_output(self, target, reduction, output, is_target);
}

::std::tuple<at::Tensor &,at::Tensor &> multilabel_margin_loss_forward_outf(const at::Tensor & self, const at::Tensor & target, int64_t reduction, at::Tensor & output, at::Tensor & is_target) {
return wrapper_output_multilabel_margin_loss_forward_out_output(self, target, reduction, output, is_target);
}

at::Tensor multilabel_margin_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) {
return wrapper__multilabel_margin_loss_backward(grad_output, self, target, reduction, is_target);
}

at::Tensor & multilabel_margin_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target) {
return wrapper_grad_input_multilabel_margin_loss_backward_out_grad_input(grad_output, self, target, reduction, is_target, grad_input);
}

at::Tensor & multilabel_margin_loss_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, const at::Tensor & is_target, at::Tensor & grad_input) {
return wrapper_grad_input_multilabel_margin_loss_backward_out_grad_input(grad_output, self, target, reduction, is_target, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index) {
return wrapper_nll_loss_forward(self, target, weight, reduction, ignore_index);
}

::std::tuple<at::Tensor &,at::Tensor &> nll_loss_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index) {
return wrapper_nll_loss_forward_out_output(self, target, weight, reduction, ignore_index, output, total_weight);
}

::std::tuple<at::Tensor &,at::Tensor &> nll_loss_forward_outf(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & output, at::Tensor & total_weight) {
return wrapper_nll_loss_forward_out_output(self, target, weight, reduction, ignore_index, output, total_weight);
}

at::Tensor nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
return wrapper_nll_loss_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}

at::Tensor & nll_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
return wrapper_nll_loss_backward_out_grad_input(grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
}

at::Tensor & nll_loss_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight, at::Tensor & grad_input) {
return wrapper_nll_loss_backward_out_grad_input(grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> nll_loss2d_forward(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index) {
return wrapper__nll_loss2d_forward(self, target, weight, reduction, ignore_index);
}

::std::tuple<at::Tensor &,at::Tensor &> nll_loss2d_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index) {
return wrapper_output_nll_loss2d_forward_out_output(self, target, weight, reduction, ignore_index, output, total_weight);
}

::std::tuple<at::Tensor &,at::Tensor &> nll_loss2d_forward_outf(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & output, at::Tensor & total_weight) {
return wrapper_output_nll_loss2d_forward_out_output(self, target, weight, reduction, ignore_index, output, total_weight);
}

at::Tensor nll_loss2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
return wrapper__nll_loss2d_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}

at::Tensor & nll_loss2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
return wrapper_grad_input_nll_loss2d_backward_out_grad_input(grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
}

at::Tensor & nll_loss2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight, at::Tensor & grad_input) {
return wrapper_grad_input_nll_loss2d_backward_out_grad_input(grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
}

at::Tensor smooth_l1_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta) {
return wrapper__smooth_l1_loss(self, target, reduction, beta);
}

at::Tensor & smooth_l1_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta) {
return wrapper_out_smooth_l1_loss_out_out(self, target, reduction, beta, out);
}

at::Tensor & smooth_l1_loss_outf(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta, at::Tensor & out) {
return wrapper_out_smooth_l1_loss_out_out(self, target, reduction, beta, out);
}

at::Tensor & smooth_l1_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta) {
return wrapper_grad_input_smooth_l1_loss_backward_out_grad_input(grad_output, self, target, reduction, beta, grad_input);
}

at::Tensor & smooth_l1_loss_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double beta, at::Tensor & grad_input) {
return wrapper_grad_input_smooth_l1_loss_backward_out_grad_input(grad_output, self, target, reduction, beta, grad_input);
}

at::Tensor huber_loss(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double delta) {
return wrapper__huber_loss(self, target, reduction, delta);
}

at::Tensor & huber_loss_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double delta) {
return wrapper_out_huber_loss_out_out(self, target, reduction, delta, out);
}

at::Tensor & huber_loss_outf(const at::Tensor & self, const at::Tensor & target, int64_t reduction, double delta, at::Tensor & out) {
return wrapper_out_huber_loss_out_out(self, target, reduction, delta, out);
}

at::Tensor & huber_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double delta) {
return wrapper_out_huber_loss_backward_out_out(grad_output, self, target, reduction, delta, grad_input);
}

at::Tensor & huber_loss_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, int64_t reduction, double delta, at::Tensor & grad_input) {
return wrapper_out_huber_loss_backward_out_out(grad_output, self, target, reduction, delta, grad_input);
}

at::Tensor elu(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
return wrapper_elu(self, alpha, scale, input_scale);
}

at::Tensor & elu_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
return wrapper_elu_out_out(self, alpha, scale, input_scale, out);
}

at::Tensor & elu_outf(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, at::Tensor & out) {
return wrapper_elu_out_out(self, alpha, scale, input_scale, out);
}

at::Tensor & elu_(at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
return wrapper_elu_(self, alpha, scale, input_scale);
}

at::Tensor elu_backward(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result) {
return wrapper_elu_backward(grad_output, alpha, scale, input_scale, is_result, self_or_result);
}

at::Tensor & elu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result) {
return wrapper_elu_backward_out_grad_input(grad_output, alpha, scale, input_scale, is_result, self_or_result, grad_input);
}

at::Tensor & elu_backward_outf(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result, at::Tensor & grad_input) {
return wrapper_elu_backward_out_grad_input(grad_output, alpha, scale, input_scale, is_result, self_or_result, grad_input);
}

at::Tensor glu(const at::Tensor & self, int64_t dim) {
return wrapper_glu(self, dim);
}

at::Tensor & glu_out(at::Tensor & out, const at::Tensor & self, int64_t dim) {
return wrapper_glu_out_out(self, dim, out);
}

at::Tensor & glu_outf(const at::Tensor & self, int64_t dim, at::Tensor & out) {
return wrapper_glu_out_out(self, dim, out);
}

at::Tensor glu_backward(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) {
return wrapper__glu_backward(grad_output, self, dim);
}

at::Tensor & glu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, int64_t dim) {
return wrapper_grad_input_glu_backward_out_grad_input(grad_output, self, dim, grad_input);
}

at::Tensor & glu_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, int64_t dim, at::Tensor & grad_input) {
return wrapper_grad_input_glu_backward_out_grad_input(grad_output, self, dim, grad_input);
}

at::Tensor hardsigmoid(const at::Tensor & self) {
return wrapper_hardsigmoid(self);
}

at::Tensor & hardsigmoid_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_hardsigmoid_out_out(self, out);
}

at::Tensor & hardsigmoid_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_hardsigmoid_out_out(self, out);
}

at::Tensor & hardsigmoid_(at::Tensor & self) {
return wrapper_hardsigmoid_(self);
}

at::Tensor hardsigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper_hardsigmoid_backward(grad_output, self);
}

at::Tensor & hardsigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper_hardsigmoid_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor & hardsigmoid_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
return wrapper_hardsigmoid_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor hardtanh(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
return wrapper__hardtanh(self, min_val, max_val);
}

at::Tensor & hardtanh_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
return wrapper_out_hardtanh_out_out(self, min_val, max_val, out);
}

at::Tensor & hardtanh_outf(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val, at::Tensor & out) {
return wrapper_out_hardtanh_out_out(self, min_val, max_val, out);
}

at::Tensor & hardtanh_(at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
return wrapper__hardtanh_(self, min_val, max_val);
}

at::Tensor hardtanh_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
return wrapper__hardtanh_backward(grad_output, self, min_val, max_val);
}

at::Tensor & hardtanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
return wrapper_grad_input_hardtanh_backward_out_grad_input(grad_output, self, min_val, max_val, grad_input);
}

at::Tensor & hardtanh_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val, at::Tensor & grad_input) {
return wrapper_grad_input_hardtanh_backward_out_grad_input(grad_output, self, min_val, max_val, grad_input);
}

at::Tensor hardswish(const at::Tensor & self) {
return wrapper__hardswish(self);
}

at::Tensor & hardswish_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_out_hardswish_out_out(self, out);
}

at::Tensor & hardswish_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_out_hardswish_out_out(self, out);
}

at::Tensor & hardswish_(at::Tensor & self) {
return wrapper__hardswish_(self);
}

at::Tensor hardswish_backward(const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper__hardswish_backward(grad_output, self);
}

at::Tensor leaky_relu(const at::Tensor & self, const at::Scalar & negative_slope) {
return wrapper_leaky_relu(self, negative_slope);
}

at::Tensor & leaky_relu_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & negative_slope) {
return wrapper_leaky_relu_out_out(self, negative_slope, out);
}

at::Tensor & leaky_relu_outf(const at::Tensor & self, const at::Scalar & negative_slope, at::Tensor & out) {
return wrapper_leaky_relu_out_out(self, negative_slope, out);
}

at::Tensor & leaky_relu_(at::Tensor & self, const at::Scalar & negative_slope) {
return wrapper_leaky_relu_(self, negative_slope);
}

at::Tensor leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result) {
return wrapper_leaky_relu_backward(grad_output, self, negative_slope, self_is_result);
}

at::Tensor & leaky_relu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result) {
return wrapper_leaky_relu_backward_out_grad_input(grad_output, self, negative_slope, self_is_result, grad_input);
}

at::Tensor & leaky_relu_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result, at::Tensor & grad_input) {
return wrapper_leaky_relu_backward_out_grad_input(grad_output, self, negative_slope, self_is_result, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> log_sigmoid_forward(const at::Tensor & self) {
return wrapper__log_sigmoid_forward(self);
}

::std::tuple<at::Tensor &,at::Tensor &> log_sigmoid_forward_out(at::Tensor & output, at::Tensor & buffer, const at::Tensor & self) {
return wrapper_output_log_sigmoid_forward_out_output(self, output, buffer);
}

::std::tuple<at::Tensor &,at::Tensor &> log_sigmoid_forward_outf(const at::Tensor & self, at::Tensor & output, at::Tensor & buffer) {
return wrapper_output_log_sigmoid_forward_out_output(self, output, buffer);
}

at::Tensor log_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) {
return wrapper__log_sigmoid_backward(grad_output, self, buffer);
}

at::Tensor & log_sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer) {
return wrapper_grad_input_log_sigmoid_backward_out_grad_input(grad_output, self, buffer, grad_input);
}

at::Tensor & log_sigmoid_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & buffer, at::Tensor & grad_input) {
return wrapper_grad_input_log_sigmoid_backward_out_grad_input(grad_output, self, buffer, grad_input);
}

at::Tensor rrelu_with_noise(const at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, c10::optional<at::Generator> generator) {
return wrapper__rrelu_with_noise(self, noise, lower, upper, training, generator);
}

at::Tensor & rrelu_with_noise_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, c10::optional<at::Generator> generator) {
return wrapper_out_rrelu_with_noise_out_out(self, noise, lower, upper, training, generator, out);
}

at::Tensor & rrelu_with_noise_outf(const at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, c10::optional<at::Generator> generator, at::Tensor & out) {
return wrapper_out_rrelu_with_noise_out_out(self, noise, lower, upper, training, generator, out);
}

at::Tensor & rrelu_with_noise_(at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, c10::optional<at::Generator> generator) {
return wrapper__rrelu_with_noise_(self, noise, lower, upper, training, generator);
}

at::Tensor softplus(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold) {
return wrapper_softplus(self, beta, threshold);
}

at::Tensor & softplus_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold) {
return wrapper_softplus_out_out(self, beta, threshold, out);
}

at::Tensor & softplus_outf(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, at::Tensor & out) {
return wrapper_softplus_out_out(self, beta, threshold, out);
}

at::Tensor softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output) {
return wrapper_softplus_backward(grad_output, self, beta, threshold, output);
}

at::Tensor & softplus_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output) {
return wrapper_softplus_backward_out_grad_input(grad_output, self, beta, threshold, output, grad_input);
}

at::Tensor & softplus_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output, at::Tensor & grad_input) {
return wrapper_softplus_backward_out_grad_input(grad_output, self, beta, threshold, output, grad_input);
}

at::Tensor softshrink(const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_softshrink(self, lambd);
}

at::Tensor & softshrink_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_softshrink_out_out(self, lambd, out);
}

at::Tensor & softshrink_outf(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out) {
return wrapper_softshrink_out_out(self, lambd, out);
}

at::Tensor softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_softshrink_backward(grad_output, self, lambd);
}

at::Tensor & softshrink_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_softshrink_backward_out_grad_input(grad_output, self, lambd, grad_input);
}

at::Tensor & softshrink_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input) {
return wrapper_softshrink_backward_out_grad_input(grad_output, self, lambd, grad_input);
}

at::Tensor & adaptive_avg_pool2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_out_adaptive_avg_pool2d_out_out(self, output_size, out);
}

at::Tensor & adaptive_avg_pool2d_outf(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out) {
return wrapper_out_adaptive_avg_pool2d_out_out(self, output_size, out);
}

at::Tensor _adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper___adaptive_avg_pool2d(self, output_size);
}

at::Tensor _adaptive_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper___adaptive_avg_pool2d_backward(grad_output, self);
}

at::Tensor & adaptive_avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_out_adaptive_avg_pool3d_out_out(self, output_size, out);
}

at::Tensor & adaptive_avg_pool3d_outf(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out) {
return wrapper_out_adaptive_avg_pool3d_out_out(self, output_size, out);
}

at::Tensor _adaptive_avg_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper___adaptive_avg_pool3d(self, output_size);
}

at::Tensor & adaptive_avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper_grad_input_adaptive_avg_pool3d_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor & adaptive_avg_pool3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
return wrapper_grad_input_adaptive_avg_pool3d_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor _adaptive_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper___adaptive_avg_pool3d_backward(grad_output, self);
}

::std::tuple<at::Tensor,at::Tensor> adaptive_max_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_adaptive_max_pool2d(self, output_size);
}

::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool2d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_adaptive_max_pool2d_out_out(self, output_size, out, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool2d_outf(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices) {
return wrapper_adaptive_max_pool2d_out_out(self, output_size, out, indices);
}

at::Tensor adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
return wrapper_adaptive_max_pool2d_backward(grad_output, self, indices);
}

at::Tensor & adaptive_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
return wrapper_adaptive_max_pool2d_backward_out_grad_input(grad_output, self, indices, grad_input);
}

at::Tensor & adaptive_max_pool2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input) {
return wrapper_adaptive_max_pool2d_backward_out_grad_input(grad_output, self, indices, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> adaptive_max_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_adaptive_max_pool3d(self, output_size);
}

::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool3d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_adaptive_max_pool3d_out_out(self, output_size, out, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool3d_outf(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices) {
return wrapper_adaptive_max_pool3d_out_out(self, output_size, out, indices);
}

at::Tensor adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
return wrapper_adaptive_max_pool3d_backward(grad_output, self, indices);
}

at::Tensor & adaptive_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
return wrapper_adaptive_max_pool3d_backward_out_grad_input(grad_output, self, indices, grad_input);
}

at::Tensor & adaptive_max_pool3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input) {
return wrapper_adaptive_max_pool3d_backward_out_grad_input(grad_output, self, indices, grad_input);
}

at::Tensor avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool2d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & avg_pool2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool2d_out_out(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
}

at::Tensor & avg_pool2d_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & out) {
return wrapper_avg_pool2d_out_out(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
}

at::Tensor avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool2d_backward(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & avg_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool2d_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
}

at::Tensor & avg_pool2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & grad_input) {
return wrapper_avg_pool2d_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
}

at::Tensor avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool3d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool3d_out_out(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
}

at::Tensor & avg_pool3d_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & out) {
return wrapper_avg_pool3d_out_out(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
}

at::Tensor avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool3d_backward(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool3d_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
}

at::Tensor & avg_pool3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & grad_input) {
return wrapper_avg_pool3d_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> fractional_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
return wrapper_fractional_max_pool2d(self, kernel_size, output_size, random_samples);
}

::std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool2d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
return wrapper_fractional_max_pool2d_out_output(self, kernel_size, output_size, random_samples, output, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool2d_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples, at::Tensor & output, at::Tensor & indices) {
return wrapper_fractional_max_pool2d_out_output(self, kernel_size, output_size, random_samples, output, indices);
}

at::Tensor fractional_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
return wrapper__fractional_max_pool2d_backward(grad_output, self, kernel_size, output_size, indices);
}

at::Tensor & fractional_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
return wrapper_grad_input_fractional_max_pool2d_backward_out_grad_input(grad_output, self, kernel_size, output_size, indices, grad_input);
}

at::Tensor & fractional_max_pool2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices, at::Tensor & grad_input) {
return wrapper_grad_input_fractional_max_pool2d_backward_out_grad_input(grad_output, self, kernel_size, output_size, indices, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> fractional_max_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
return wrapper__fractional_max_pool3d(self, kernel_size, output_size, random_samples);
}

::std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool3d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
return wrapper_output_fractional_max_pool3d_out_output(self, kernel_size, output_size, random_samples, output, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool3d_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples, at::Tensor & output, at::Tensor & indices) {
return wrapper_output_fractional_max_pool3d_out_output(self, kernel_size, output_size, random_samples, output, indices);
}

at::Tensor fractional_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
return wrapper__fractional_max_pool3d_backward(grad_output, self, kernel_size, output_size, indices);
}

at::Tensor & fractional_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices) {
return wrapper_grad_input_fractional_max_pool3d_backward_out_grad_input(grad_output, self, kernel_size, output_size, indices, grad_input);
}

at::Tensor & fractional_max_pool3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & indices, at::Tensor & grad_input) {
return wrapper_grad_input_fractional_max_pool3d_backward_out_grad_input(grad_output, self, kernel_size, output_size, indices, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> max_pool2d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
return wrapper_max_pool2d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
}

::std::tuple<at::Tensor &,at::Tensor &> max_pool2d_with_indices_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
return wrapper_max_pool2d_with_indices_out_out(self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> max_pool2d_with_indices_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, at::Tensor & out, at::Tensor & indices) {
return wrapper_max_pool2d_with_indices_out_out(self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
}

at::Tensor max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
return wrapper_max_pool2d_with_indices_backward(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}

at::Tensor & max_pool2d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
return wrapper_max_pool2d_with_indices_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
}

at::Tensor & max_pool2d_with_indices_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices, at::Tensor & grad_input) {
return wrapper_max_pool2d_with_indices_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> max_pool3d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
return wrapper__max_pool3d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
}

::std::tuple<at::Tensor &,at::Tensor &> max_pool3d_with_indices_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
return wrapper_out_max_pool3d_with_indices_out_out(self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> max_pool3d_with_indices_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, at::Tensor & out, at::Tensor & indices) {
return wrapper_out_max_pool3d_with_indices_out_out(self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
}

at::Tensor max_pool3d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
return wrapper__max_pool3d_with_indices_backward(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}

at::Tensor & max_pool3d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
return wrapper_grad_input_max_pool3d_with_indices_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
}

at::Tensor & max_pool3d_with_indices_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices, at::Tensor & grad_input) {
return wrapper_grad_input_max_pool3d_with_indices_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
}

at::Tensor max_unpool2d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
return wrapper__max_unpool2d(self, indices, output_size);
}

at::Tensor & max_unpool2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
return wrapper_out_max_unpool2d_out_out(self, indices, output_size, out);
}

at::Tensor & max_unpool2d_outf(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::Tensor & out) {
return wrapper_out_max_unpool2d_out_out(self, indices, output_size, out);
}

at::Tensor max_unpool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
return wrapper__max_unpool2d_backward(grad_output, self, indices, output_size);
}

at::Tensor & max_unpool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size) {
return wrapper_grad_input_max_unpool2d_backward_out_grad_input(grad_output, self, indices, output_size, grad_input);
}

at::Tensor & max_unpool2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::Tensor & grad_input) {
return wrapper_grad_input_max_unpool2d_backward_out_grad_input(grad_output, self, indices, output_size, grad_input);
}

at::Tensor max_unpool3d(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
return wrapper__max_unpool3d(self, indices, output_size, stride, padding);
}

at::Tensor & max_unpool3d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
return wrapper_out_max_unpool3d_out_out(self, indices, output_size, stride, padding, out);
}

at::Tensor & max_unpool3d_outf(const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_out_max_unpool3d_out_out(self, indices, output_size, stride, padding, out);
}

at::Tensor max_unpool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
return wrapper__max_unpool3d_backward(grad_output, self, indices, output_size, stride, padding);
}

at::Tensor & max_unpool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding) {
return wrapper_grad_input_max_unpool3d_backward_out_grad_input(grad_output, self, indices, output_size, stride, padding, grad_input);
}

at::Tensor & max_unpool3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::IntArrayRef output_size, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_grad_input_max_unpool3d_backward_out_grad_input(grad_output, self, indices, output_size, stride, padding, grad_input);
}

at::Tensor reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad1d(self, padding);
}

at::Tensor & reflection_pad1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad1d_out_out(self, padding, out);
}

at::Tensor & reflection_pad1d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_reflection_pad1d_out_out(self, padding, out);
}

at::Tensor reflection_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad1d_backward(grad_output, self, padding);
}

at::Tensor & reflection_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad1d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor & reflection_pad1d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_reflection_pad1d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor reflection_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper__reflection_pad2d(self, padding);
}

at::Tensor & reflection_pad2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_out_reflection_pad2d_out_out(self, padding, out);
}

at::Tensor & reflection_pad2d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_out_reflection_pad2d_out_out(self, padding, out);
}

at::Tensor reflection_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper__reflection_pad2d_backward(grad_output, self, padding);
}

at::Tensor & reflection_pad2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_grad_input_reflection_pad2d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor & reflection_pad2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_grad_input_reflection_pad2d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor reflection_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad3d(self, padding);
}

at::Tensor & reflection_pad3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad3d_out_out(self, padding, out);
}

at::Tensor & reflection_pad3d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_reflection_pad3d_out_out(self, padding, out);
}

at::Tensor reflection_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad3d_backward(grad_output, self, padding);
}

at::Tensor & reflection_pad3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad3d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor & reflection_pad3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_reflection_pad3d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor replication_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad1d(self, padding);
}

at::Tensor & replication_pad1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad1d_out_out(self, padding, out);
}

at::Tensor & replication_pad1d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_replication_pad1d_out_out(self, padding, out);
}

at::Tensor replication_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad1d_backward(grad_output, self, padding);
}

at::Tensor & replication_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad1d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor & replication_pad1d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_replication_pad1d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor replication_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad2d(self, padding);
}

at::Tensor & replication_pad2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad2d_out_out(self, padding, out);
}

at::Tensor & replication_pad2d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_replication_pad2d_out_out(self, padding, out);
}

at::Tensor replication_pad2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper__replication_pad2d_backward(grad_output, self, padding);
}

at::Tensor & replication_pad2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_grad_input_replication_pad2d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor & replication_pad2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_grad_input_replication_pad2d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor replication_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad3d(self, padding);
}

at::Tensor & replication_pad3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad3d_out_out(self, padding, out);
}

at::Tensor & replication_pad3d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_replication_pad3d_out_out(self, padding, out);
}

at::Tensor replication_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper__replication_pad3d_backward(grad_output, self, padding);
}

at::Tensor & replication_pad3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_grad_input_replication_pad3d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor & replication_pad3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_grad_input_replication_pad3d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor upsample_nearest3d(const at::Tensor & input, c10::optional<at::IntArrayRef> output_size, c10::optional<at::ArrayRef<double>> scale_factors) {
return wrapper_vec_upsample_nearest3d_vec(input, output_size, scale_factors);
}

at::Tensor upsample_nearest3d_backward(const at::Tensor & grad_output, c10::optional<at::IntArrayRef> output_size, at::IntArrayRef input_size, c10::optional<at::ArrayRef<double>> scale_factors) {
return wrapper_vec_upsample_nearest3d_backward_vec(grad_output, output_size, input_size, scale_factors);
}

at::Tensor upsample_linear1d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
return wrapper_upsample_linear1d(self, output_size, align_corners, scales);
}

at::Tensor & upsample_linear1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
return wrapper_upsample_linear1d_out_out(self, output_size, align_corners, scales, out);
}

at::Tensor & upsample_linear1d_outf(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales, at::Tensor & out) {
return wrapper_upsample_linear1d_out_out(self, output_size, align_corners, scales, out);
}

at::Tensor upsample_linear1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
return wrapper_upsample_linear1d_backward(grad_output, output_size, input_size, align_corners, scales);
}

at::Tensor & upsample_linear1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
return wrapper_upsample_linear1d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales, grad_input);
}

at::Tensor & upsample_linear1d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales, at::Tensor & grad_input) {
return wrapper_upsample_linear1d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales, grad_input);
}

at::Tensor upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bilinear2d(self, output_size, align_corners, scales_h, scales_w);
}

at::Tensor & upsample_bilinear2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bilinear2d_out_out(self, output_size, align_corners, scales_h, scales_w, out);
}

at::Tensor & upsample_bilinear2d_outf(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_bilinear2d_out_out(self, output_size, align_corners, scales_h, scales_w, out);
}

at::Tensor upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bilinear2d_backward(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}

at::Tensor & upsample_bilinear2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bilinear2d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_bilinear2d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_bilinear2d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
}

at::Tensor upsample_bicubic2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bicubic2d(self, output_size, align_corners, scales_h, scales_w);
}

at::Tensor & upsample_bicubic2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bicubic2d_out_out(self, output_size, align_corners, scales_h, scales_w, out);
}

at::Tensor & upsample_bicubic2d_outf(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_bicubic2d_out_out(self, output_size, align_corners, scales_h, scales_w, out);
}

at::Tensor upsample_bicubic2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bicubic2d_backward(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}

at::Tensor & upsample_bicubic2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bicubic2d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_bicubic2d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_bicubic2d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
}

at::Tensor upsample_trilinear3d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_trilinear3d(self, output_size, align_corners, scales_d, scales_h, scales_w);
}

at::Tensor & upsample_trilinear3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_trilinear3d_out_out(self, output_size, align_corners, scales_d, scales_h, scales_w, out);
}

at::Tensor & upsample_trilinear3d_outf(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_trilinear3d_out_out(self, output_size, align_corners, scales_d, scales_h, scales_w, out);
}

at::Tensor upsample_trilinear3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_trilinear3d_backward(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
}

at::Tensor & upsample_trilinear3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_trilinear3d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_trilinear3d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_trilinear3d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, grad_input);
}

at::Tensor upsample_nearest1d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales) {
return wrapper_upsample_nearest1d(self, output_size, scales);
}

at::Tensor & upsample_nearest1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales) {
return wrapper_upsample_nearest1d_out_out(self, output_size, scales, out);
}

at::Tensor & upsample_nearest1d_outf(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales, at::Tensor & out) {
return wrapper_upsample_nearest1d_out_out(self, output_size, scales, out);
}

at::Tensor upsample_nearest1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales) {
return wrapper_upsample_nearest1d_backward(grad_output, output_size, input_size, scales);
}

at::Tensor & upsample_nearest1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales) {
return wrapper_upsample_nearest1d_backward_out_grad_input(grad_output, output_size, input_size, scales, grad_input);
}

at::Tensor & upsample_nearest1d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales, at::Tensor & grad_input) {
return wrapper_upsample_nearest1d_backward_out_grad_input(grad_output, output_size, input_size, scales, grad_input);
}

at::Tensor upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest2d(self, output_size, scales_h, scales_w);
}

at::Tensor & upsample_nearest2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest2d_out_out(self, output_size, scales_h, scales_w, out);
}

at::Tensor & upsample_nearest2d_outf(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_nearest2d_out_out(self, output_size, scales_h, scales_w, out);
}

at::Tensor upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest2d_backward(grad_output, output_size, input_size, scales_h, scales_w);
}

at::Tensor & upsample_nearest2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest2d_backward_out_grad_input(grad_output, output_size, input_size, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_nearest2d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_nearest2d_backward_out_grad_input(grad_output, output_size, input_size, scales_h, scales_w, grad_input);
}

at::Tensor upsample_nearest3d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest3d(self, output_size, scales_d, scales_h, scales_w);
}

at::Tensor & upsample_nearest3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest3d_out_out(self, output_size, scales_d, scales_h, scales_w, out);
}

at::Tensor & upsample_nearest3d_outf(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_nearest3d_out_out(self, output_size, scales_d, scales_h, scales_w, out);
}

at::Tensor upsample_nearest3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest3d_backward(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
}

at::Tensor & upsample_nearest3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest3d_backward_out_grad_input(grad_output, output_size, input_size, scales_d, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_nearest3d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_nearest3d_backward_out_grad_input(grad_output, output_size, input_size, scales_d, scales_h, scales_w, grad_input);
}

at::Tensor sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output) {
return wrapper_sigmoid_backward(grad_output, output);
}

at::Tensor & sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) {
return wrapper_sigmoid_backward_out_grad_input(grad_output, output, grad_input);
}

at::Tensor & sigmoid_backward_outf(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input) {
return wrapper_sigmoid_backward_out_grad_input(grad_output, output, grad_input);
}

at::Tensor logit_backward(const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps) {
return wrapper_logit_backward(grad_output, self, eps);
}

at::Tensor & logit_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps) {
return wrapper_logit_backward_out_grad_input(grad_output, self, eps, grad_input);
}

at::Tensor & logit_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps, at::Tensor & grad_input) {
return wrapper_logit_backward_out_grad_input(grad_output, self, eps, grad_input);
}

at::Tensor tanh_backward(const at::Tensor & grad_output, const at::Tensor & output) {
return wrapper_tanh_backward(grad_output, output);
}

at::Tensor & tanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) {
return wrapper_tanh_backward_out_grad_input(grad_output, output, grad_input);
}

at::Tensor & tanh_backward_outf(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input) {
return wrapper_tanh_backward_out_grad_input(grad_output, output, grad_input);
}

at::Tensor slow_conv_transpose2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
return wrapper_slow_conv_transpose2d(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}

at::Tensor & slow_conv_transpose2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
return wrapper_slow_conv_transpose2d_out_out(self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
}

at::Tensor & slow_conv_transpose2d_outf(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, at::Tensor & out) {
return wrapper_slow_conv_transpose2d_out_out(self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> slow_conv_transpose2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & columns, const at::Tensor & ones) {
return wrapper_grad_output_slow_conv_transpose2d_backward_out_grad_output(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, grad_input, grad_weight, grad_bias);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> slow_conv_transpose2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & columns, const at::Tensor & ones, at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias) {
return wrapper_grad_output_slow_conv_transpose2d_backward_out_grad_output(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, grad_input, grad_weight, grad_bias);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> slow_conv_transpose2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & columns, const at::Tensor & ones, ::std::array<bool,3> output_mask) {
return wrapper_output_mask_slow_conv_transpose2d_backward_output_mask(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
}

at::Tensor slow_conv_transpose3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
return wrapper__slow_conv_transpose3d(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}

at::Tensor & slow_conv_transpose3d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
return wrapper_out_slow_conv_transpose3d_out_out(self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
}

at::Tensor & slow_conv_transpose3d_outf(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, at::Tensor & out) {
return wrapper_out_slow_conv_transpose3d_out_out(self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> slow_conv_transpose3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & finput, const at::Tensor & fgrad_input) {
return wrapper_grad_output_slow_conv_transpose3d_backward_out_grad_output(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, grad_input, grad_weight, grad_bias);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> slow_conv_transpose3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & finput, const at::Tensor & fgrad_input, at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias) {
return wrapper_grad_output_slow_conv_transpose3d_backward_out_grad_output(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, grad_input, grad_weight, grad_bias);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> slow_conv_transpose3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, const at::Tensor & finput, const at::Tensor & fgrad_input, ::std::array<bool,3> output_mask) {
return wrapper_output_mask_slow_conv_transpose3d_backward_output_mask(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv2d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
return wrapper__thnn_conv2d_forward(self, weight, kernel_size, bias, stride, padding);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv2d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
return wrapper_output_thnn_conv2d_forward_out_output(self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv2d_forward_outf(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input) {
return wrapper_output_thnn_conv2d_forward_out_output(self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv2d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input) {
return wrapper_grad_input_thnn_conv2d_backward_out_grad_input(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> thnn_conv2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias) {
return wrapper_grad_input_thnn_conv2d_backward_out_grad_input(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> thnn_conv2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, ::std::array<bool,3> output_mask) {
return wrapper_output_mask_thnn_conv2d_backward_output_mask(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> slow_conv3d_forward(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
return wrapper__slow_conv3d_forward(self, weight, kernel_size, bias, stride, padding);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> slow_conv3d_forward_out(at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding) {
return wrapper_output_slow_conv3d_forward_out_output(self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> slow_conv3d_forward_outf(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::Tensor & output, at::Tensor & finput, at::Tensor & fgrad_input) {
return wrapper_output_slow_conv3d_forward_out_output(self, weight, kernel_size, bias, stride, padding, output, finput, fgrad_input);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> slow_conv3d_backward_out(at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input) {
return wrapper_grad_input_slow_conv3d_backward_out_grad_input(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &> slow_conv3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, at::Tensor & grad_input, at::Tensor & grad_weight, at::Tensor & grad_bias) {
return wrapper_grad_input_slow_conv3d_backward_out_grad_input(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, grad_input, grad_weight, grad_bias);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> slow_conv3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, const at::Tensor & finput, const at::Tensor & fgrad_input, ::std::array<bool,3> output_mask) {
return wrapper_output_mask_slow_conv3d_backward_output_mask(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}

at::Tensor slow_conv_dilated2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
return wrapper__slow_conv_dilated2d(self, weight, kernel_size, bias, stride, padding, dilation);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> slow_conv_dilated2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, ::std::array<bool,3> output_mask) {
return wrapper__slow_conv_dilated2d_backward(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}

at::Tensor slow_conv_dilated3d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation) {
return wrapper__slow_conv_dilated3d(self, weight, kernel_size, bias, stride, padding, dilation);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> slow_conv_dilated3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, ::std::array<bool,3> output_mask) {
return wrapper__slow_conv_dilated3d_backward(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}

at::Tensor col2im(const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
return wrapper__col2im(self, output_size, kernel_size, dilation, padding, stride);
}

at::Tensor & col2im_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
return wrapper_out_col2im_out_out(self, output_size, kernel_size, dilation, padding, stride, out);
}

at::Tensor & col2im_outf(const at::Tensor & self, at::IntArrayRef output_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & out) {
return wrapper_out_col2im_out_out(self, output_size, kernel_size, dilation, padding, stride, out);
}

at::Tensor col2im_backward(const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
return wrapper__col2im_backward(grad_output, kernel_size, dilation, padding, stride);
}

at::Tensor & col2im_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
return wrapper_grad_input_col2im_backward_out_grad_input(grad_output, kernel_size, dilation, padding, stride, grad_input);
}

at::Tensor & col2im_backward_outf(const at::Tensor & grad_output, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & grad_input) {
return wrapper_grad_input_col2im_backward_out_grad_input(grad_output, kernel_size, dilation, padding, stride, grad_input);
}

at::Tensor im2col(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
return wrapper__im2col(self, kernel_size, dilation, padding, stride);
}

at::Tensor & im2col_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
return wrapper_out_im2col_out_out(self, kernel_size, dilation, padding, stride, out);
}

at::Tensor & im2col_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & out) {
return wrapper_out_im2col_out_out(self, kernel_size, dilation, padding, stride, out);
}

at::Tensor im2col_backward(const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
return wrapper__im2col_backward(grad_output, input_size, kernel_size, dilation, padding, stride);
}

at::Tensor & im2col_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride) {
return wrapper_grad_input_im2col_backward_out_grad_input(grad_output, input_size, kernel_size, dilation, padding, stride, grad_input);
}

at::Tensor & im2col_backward_outf(const at::Tensor & grad_output, at::IntArrayRef input_size, at::IntArrayRef kernel_size, at::IntArrayRef dilation, at::IntArrayRef padding, at::IntArrayRef stride, at::Tensor & grad_input) {
return wrapper_grad_input_im2col_backward_out_grad_input(grad_output, input_size, kernel_size, dilation, padding, stride, grad_input);
}

at::Tensor isposinf(const at::Tensor & self) {
return wrapper_isposinf(self);
}

at::Tensor & isposinf_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_isposinf_out_out(self, out);
}

at::Tensor & isposinf_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_isposinf_out_out(self, out);
}

at::Tensor isneginf(const at::Tensor & self) {
return wrapper_isneginf(self);
}

at::Tensor & isneginf_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_isneginf_out_out(self, out);
}

at::Tensor & isneginf_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_isneginf_out_out(self, out);
}

at::Tensor special_entr(const at::Tensor & self) {
return wrapper_special_entr(self);
}

at::Tensor & special_entr_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_entr_out_out(self, out);
}

at::Tensor & special_entr_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_entr_out_out(self, out);
}

at::Tensor special_ndtri(const at::Tensor & self) {
return wrapper_special_ndtri(self);
}

at::Tensor & special_ndtri_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_ndtri_out_out(self, out);
}

at::Tensor & special_ndtri_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_ndtri_out_out(self, out);
}

at::Tensor special_erfcx(const at::Tensor & self) {
return wrapper_special_erfcx(self);
}

at::Tensor & special_erfcx_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_erfcx_out_out(self, out);
}

at::Tensor & special_erfcx_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_erfcx_out_out(self, out);
}

at::Tensor special_xlog1py(const at::Tensor & self, const at::Tensor & other) {
return wrapper_special_xlog1py(self, other);
}

at::Tensor & special_xlog1py_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_special_xlog1py_out_out(self, other, out);
}

at::Tensor & special_xlog1py_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_special_xlog1py_out_out(self, other, out);
}

at::Tensor special_zeta(const at::Tensor & self, const at::Tensor & other) {
return wrapper_special_zeta(self, other);
}

at::Tensor & special_zeta_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_special_zeta_out_out(self, other, out);
}

at::Tensor & special_zeta_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_special_zeta_out_out(self, other, out);
}

at::Tensor special_i0e(const at::Tensor & self) {
return wrapper_special_i0e(self);
}

at::Tensor & special_i0e_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_i0e_out_out(self, out);
}

at::Tensor & special_i0e_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_i0e_out_out(self, out);
}

at::Tensor special_i1(const at::Tensor & self) {
return wrapper_special_i1(self);
}

at::Tensor & special_i1_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_i1_out_out(self, out);
}

at::Tensor & special_i1_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_i1_out_out(self, out);
}

at::Tensor special_i1e(const at::Tensor & self) {
return wrapper_special_i1e(self);
}

at::Tensor & special_i1e_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_i1e_out_out(self, out);
}

at::Tensor & special_i1e_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_i1e_out_out(self, out);
}

::std::tuple<at::Tensor,at::Tensor> linalg_cholesky_ex(const at::Tensor & self, bool upper, bool check_errors) {
return wrapper__linalg_cholesky_ex(self, upper, check_errors);
}

::std::tuple<at::Tensor &,at::Tensor &> linalg_cholesky_ex_out(at::Tensor & L, at::Tensor & info, const at::Tensor & self, bool upper, bool check_errors) {
return wrapper_L_linalg_cholesky_ex_out_L(self, upper, check_errors, L, info);
}

::std::tuple<at::Tensor &,at::Tensor &> linalg_cholesky_ex_outf(const at::Tensor & self, bool upper, bool check_errors, at::Tensor & L, at::Tensor & info) {
return wrapper_L_linalg_cholesky_ex_out_L(self, upper, check_errors, L, info);
}

::std::tuple<at::Tensor,at::Tensor,at::Tensor> _det_lu_based_helper(const at::Tensor & self) {
return wrapper___det_lu_based_helper(self);
}

at::Tensor _det_lu_based_helper_backward_helper(const at::Tensor & det_grad, const at::Tensor & det, const at::Tensor & self, const at::Tensor & lu, const at::Tensor & pivs) {
return wrapper___det_lu_based_helper_backward_helper(det_grad, det, self, lu, pivs);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &,at::Tensor &> linalg_lstsq_out(at::Tensor & solution, at::Tensor & residuals, at::Tensor & rank, at::Tensor & singular_values, const at::Tensor & self, const at::Tensor & b, c10::optional<double> rcond, c10::optional<c10::string_view> driver) {
return wrapper_out_linalg_lstsq_out_out(self, b, rcond, driver, solution, residuals, rank, singular_values);
}

::std::tuple<at::Tensor &,at::Tensor &,at::Tensor &,at::Tensor &> linalg_lstsq_outf(const at::Tensor & self, const at::Tensor & b, c10::optional<double> rcond, c10::optional<c10::string_view> driver, at::Tensor & solution, at::Tensor & residuals, at::Tensor & rank, at::Tensor & singular_values) {
return wrapper_out_linalg_lstsq_out_out(self, b, rcond, driver, solution, residuals, rank, singular_values);
}

::std::tuple<at::Tensor,at::Tensor> linalg_slogdet(const at::Tensor & self) {
return wrapper__linalg_slogdet(self);
}

::std::tuple<at::Tensor &,at::Tensor &> linalg_slogdet_out(at::Tensor & sign, at::Tensor & logabsdet, const at::Tensor & self) {
return wrapper_out_linalg_slogdet_out_out(self, sign, logabsdet);
}

::std::tuple<at::Tensor &,at::Tensor &> linalg_slogdet_outf(const at::Tensor & self, at::Tensor & sign, at::Tensor & logabsdet) {
return wrapper_out_linalg_slogdet_out_out(self, sign, logabsdet);
}

::std::tuple<at::Tensor,at::Tensor> linalg_eig(const at::Tensor & self) {
return wrapper__linalg_eig(self);
}

::std::tuple<at::Tensor &,at::Tensor &> linalg_eig_out(at::Tensor & eigenvalues, at::Tensor & eigenvectors, const at::Tensor & self) {
return wrapper_out_linalg_eig_out_out(self, eigenvalues, eigenvectors);
}

::std::tuple<at::Tensor &,at::Tensor &> linalg_eig_outf(const at::Tensor & self, at::Tensor & eigenvalues, at::Tensor & eigenvectors) {
return wrapper_out_linalg_eig_out_out(self, eigenvalues, eigenvectors);
}

::std::tuple<at::Tensor,at::Tensor> linalg_eigh(const at::Tensor & self, c10::string_view UPLO) {
return wrapper__linalg_eigh(self, UPLO);
}

::std::tuple<at::Tensor &,at::Tensor &> linalg_eigh_out(at::Tensor & eigvals, at::Tensor & eigvecs, const at::Tensor & self, c10::string_view UPLO) {
return wrapper_eigvals_linalg_eigh_out_eigvals(self, UPLO, eigvals, eigvecs);
}

::std::tuple<at::Tensor &,at::Tensor &> linalg_eigh_outf(const at::Tensor & self, c10::string_view UPLO, at::Tensor & eigvals, at::Tensor & eigvecs) {
return wrapper_eigvals_linalg_eigh_out_eigvals(self, UPLO, eigvals, eigvecs);
}

at::Tensor & linalg_eigvalsh_out(at::Tensor & out, const at::Tensor & self, c10::string_view UPLO) {
return wrapper_out_linalg_eigvalsh_out_out(self, UPLO, out);
}

at::Tensor & linalg_eigvalsh_outf(const at::Tensor & self, c10::string_view UPLO, at::Tensor & out) {
return wrapper_out_linalg_eigvalsh_out_out(self, UPLO, out);
}

at::Tensor linalg_householder_product(const at::Tensor & input, const at::Tensor & tau) {
return wrapper__linalg_householder_product(input, tau);
}

at::Tensor & linalg_householder_product_out(at::Tensor & out, const at::Tensor & input, const at::Tensor & tau) {
return wrapper_out_linalg_householder_product_out_out(input, tau, out);
}

at::Tensor & linalg_householder_product_outf(const at::Tensor & input, const at::Tensor & tau, at::Tensor & out) {
return wrapper_out_linalg_householder_product_out_out(input, tau, out);
}

at::Tensor & _linalg_inv_out_helper_(at::Tensor & self, at::Tensor & infos_lu, at::Tensor & infos_getri) {
return wrapper___linalg_inv_out_helper_(self, infos_lu, infos_getri);
}

at::Tensor linalg_vector_norm(const at::Tensor & self, const at::Scalar & ord, c10::optional<at::IntArrayRef> dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper__linalg_vector_norm(self, ord, dim, keepdim, dtype);
}

at::Tensor & linalg_vector_norm_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & ord, c10::optional<at::IntArrayRef> dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_out_linalg_vector_norm_out_out(self, ord, dim, keepdim, dtype, out);
}

at::Tensor & linalg_vector_norm_outf(const at::Tensor & self, const at::Scalar & ord, c10::optional<at::IntArrayRef> dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_out_linalg_vector_norm_out_out(self, ord, dim, keepdim, dtype, out);
}

at::Tensor linalg_solve(const at::Tensor & input, const at::Tensor & other) {
return wrapper__linalg_solve(input, other);
}

at::Tensor & linalg_solve_out(at::Tensor & out, const at::Tensor & input, const at::Tensor & other) {
return wrapper_out_linalg_solve_out_out(input, other, out);
}

at::Tensor & linalg_solve_outf(const at::Tensor & input, const at::Tensor & other, at::Tensor & out) {
return wrapper_out_linalg_solve_out_out(input, other, out);
}

::std::tuple<at::Tensor,at::Tensor> _linalg_qr_helper(const at::Tensor & self, c10::string_view mode) {
return wrapper___linalg_qr_helper(self, mode);
}

at::Tensor _test_optional_intlist(const at::Tensor & values, c10::optional<at::IntArrayRef> addends) {
return wrapper___test_optional_intlist(values, addends);
}

at::Tensor _test_optional_filled_intlist(const at::Tensor & values, c10::optional<at::IntArrayRef> addends) {
return wrapper___test_optional_filled_intlist(values, addends);
}

at::Tensor _test_optional_floatlist(const at::Tensor & values, c10::optional<at::ArrayRef<double>> addends) {
return wrapper___test_optional_floatlist(values, addends);
}

at::Tensor segment_reduce(const at::Tensor & data, c10::string_view reduce, const c10::optional<at::Tensor> & lengths, const c10::optional<at::Tensor> & indices, int64_t axis, bool unsafe, const c10::optional<at::Scalar> & initial) {
return wrapper__segment_reduce(data, reduce, lengths, indices, axis, unsafe, initial);
}

at::Tensor _segment_reduce_backward(const at::Tensor & grad, const at::Tensor & output, const at::Tensor & data, c10::string_view reduce, const c10::optional<at::Tensor> & lengths, int64_t axis) {
return wrapper___segment_reduce_backward(grad, output, data, reduce, lengths, axis);
}

} // namespace cpu

} // namespace at
