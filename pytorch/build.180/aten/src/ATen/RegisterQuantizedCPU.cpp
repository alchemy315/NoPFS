// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif

// @generated by tools/codegen/gen.py from RegisterDispatchKey.cpp

#include <c10/core/TensorImpl.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/ExclusivelyOwned.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>
#include <ATen/Tensor.h>
#include <ATen/Functions.h>
#include <ATen/native/Resize.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/core/op_registration/adaption.h>
#include <torch/library.h>




namespace at {

// NB: TORCH_LIBRARY_IMPL must be in an anonymous namespace to avoid
// ambiguity with conflicting identifiers that may have been defined in
// at namespace already.
namespace {


void resize_out(const Tensor &out, IntArrayRef sizes, IntArrayRef strides, const TensorOptions &options) {
  TORCH_CHECK(options.dtype() == out.dtype(),
      "Expected out tensor to have dtype ", options.dtype(), ", but got ", out.dtype(), " instead");
  TORCH_CHECK(options.device() == out.device(),
      "Expected out tensor to have device ", options.device(), ", but got ", out.device(), " instead");
  const bool resized = at::native::resize_output(out, sizes);
  // Only restride if a resize occurred; otherwise we ignore the (advisory)
  // strides from the meta function and directly use the output tensor's
  // preexisting strides
  if (resized) {
    if (!strides.empty()) {
      TORCH_INTERNAL_ASSERT(!options.memory_format_opt().has_value());
      at::native::as_strided_(out, sizes, strides);
    } else if (options.memory_format_opt().has_value()) {
      out.unsafeGetTensorImpl()->empty_tensor_restride(*options.memory_format_opt());
    }
  }
}

namespace {

at::Tensor wrapper__as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
    // No device check


  // DeviceGuard omitted
  return at::native::as_strided_qtensorimpl(self, size, stride, storage_offset);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__quantized_batch_norm(const at::Tensor & input, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, const at::Tensor & mean, const at::Tensor & var, double eps, double output_scale, int64_t output_zero_point) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantized_batch_norm(input, weight, bias, mean, var, eps, output_scale, output_zero_point);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__clamp(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
    // No device check


  // DeviceGuard omitted
  return at::native::clamp_quantized_cpu(self, min, max);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___empty_affine_quantized(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, double scale, int64_t zero_point, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::empty_affine_quantized(size, dtype, layout, device, pin_memory, scale, zero_point, memory_format);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___empty_per_channel_affine_quantized(at::IntArrayRef size, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::empty_per_channel_affine_quantized(size, scales, zero_points, axis, dtype, layout, device, pin_memory, memory_format);
}

} // anonymous namespace
namespace {

const at::Tensor & wrapper__resize_(const at::Tensor & self, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantized_resize_cpu_(self, size, memory_format);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__empty_quantized(at::IntArrayRef size, const at::Tensor & qtensor, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::empty_quantized(size, qtensor, dtype, layout, device, pin_memory, memory_format);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_fill__Scalar(at::Tensor & self, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::fill_(self, value);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_fill__Tensor(at::Tensor & self, const at::Tensor & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::fill_(self, value);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_index_Tensor(const at::Tensor & self, const c10::List<c10::optional<at::Tensor>> & indices) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantized_index(self, indices);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_dim_max_dim(const at::Tensor & self, int64_t dim, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::max(self, dim, keepdim);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__quantized_max_pool1d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantized_max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__quantized_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantized_max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_dim_mean_dim(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
    // No device check


  // DeviceGuard omitted
  return at::native::mean_quantized_cpu(self, dim, keepdim, dtype);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_mean_out_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::mean_out_quantized_cpu(self, dim, keepdim, dtype, out);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_dim_min_dim(const at::Tensor & self, int64_t dim, bool keepdim) {
    // No device check


  // DeviceGuard omitted
  return at::native::min(self, dim, keepdim);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__channel_shuffle(const at::Tensor & self, int64_t groups) {
    // No device check


  // DeviceGuard omitted
  return at::native::channel_shuffle_quantized_cpu(self, groups);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___reshape_alias(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride) {
    // No device check


  // DeviceGuard omitted
  return at::native::_reshape_alias(self, size, stride);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__relu(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::relu_quantized_cpu(self);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__relu_(at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::relu_quantized_cpu_(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__sigmoid(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::sigmoid_quantized_cpu(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__tanh(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::tanh_quantized_cpu(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__threshold(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::threshold_quantized_cpu(self, threshold, value);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__flip(const at::Tensor & self, at::IntArrayRef dims) {
    // No device check


  // DeviceGuard omitted
  return at::native::flip(self, dims);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__clone(const at::Tensor & self, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::quantized_clone(self, memory_format);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_self_dequantize_self(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::dequantize_quantized(self);
}

} // anonymous namespace
namespace {

::std::vector<at::Tensor> wrapper_tensors_dequantize_tensors(at::TensorList tensors) {
    // No device check


  // DeviceGuard omitted
  return at::native::dequantize_tensors_quantized_cpu(tensors);
}

} // anonymous namespace
namespace {

double wrapper__q_scale(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::q_scale_quant(self);
}

} // anonymous namespace
namespace {

int64_t wrapper__q_zero_point(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::q_zero_point_quant(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__q_per_channel_scales(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::q_per_channel_scales(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__q_per_channel_zero_points(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::q_per_channel_zero_points(self);
}

} // anonymous namespace
namespace {

int64_t wrapper__q_per_channel_axis(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::q_per_channel_axis(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__int_repr(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::int_repr_quantized_cpu(self);
}

} // anonymous namespace
namespace {

at::QScheme wrapper__qscheme(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::qscheme_quant(self);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_source_Storage_storage_offset_set__source_Storage_storage_offset(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride) {
    // No device check


  // DeviceGuard omitted
  return at::native::set_storage_quantized_(self, source, storage_offset, size, stride);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__view(const at::Tensor & self, at::IntArrayRef size) {
    // No device check


  // DeviceGuard omitted
  return at::native::view(self, size);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_eq_Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::eq_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_out_eq_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::eq_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_eq_Tensor(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::eq_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_eq_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::eq_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_ne_Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::ne_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_out_ne_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::ne_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_ne_Tensor(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::ne_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_ne_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::ne_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_ge_Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::ge_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_out_ge_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::ge_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_ge_Tensor(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::ge_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_ge_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::ge_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_le_Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::le_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_out_le_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::le_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_le_Tensor(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::le_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_le_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::le_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_gt_Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::gt_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_out_gt_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::gt_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_gt_Tensor(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::gt_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_gt_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::gt_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Scalar_lt_Scalar(const at::Tensor & self, const at::Scalar & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::lt_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Scalar_out_lt_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::lt_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_Tensor_lt_Tensor(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::lt_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_out_lt_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::lt_out_quantized_cpu(self, other, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index) {
    // No device check


  // DeviceGuard omitted
  return at::native::index_select_cpu_(self, dim, index);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_index_select_out_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::index_select_out_cpu_(self, dim, index, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__min(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::min_quantized_cpu(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__max(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::max_quantized_cpu(self);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__sort(const at::Tensor & self, int64_t dim, bool descending) {
    // No device check


  // DeviceGuard omitted
  return at::native::sort_quantized_cpu(self, dim, descending);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper_stable_sort_stable(const at::Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending) {
    // No device check


  // DeviceGuard omitted
  return at::native::sort_quantized_cpu_stable(self, stable, dim, descending);
}

} // anonymous namespace
namespace {

::std::tuple<at::Tensor,at::Tensor> wrapper__topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
    // No device check


  // DeviceGuard omitted
  return at::native::topk_quantized_cpu(self, k, dim, largest, sorted);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step) {
    // No device check


  // DeviceGuard omitted
  return at::native::unfold(self, dimension, size, step);
}

} // anonymous namespace
namespace {

bool wrapper__equal(const at::Tensor & self, const at::Tensor & other) {
    // No device check


  // DeviceGuard omitted
  return at::native::equal_quantized_cpu(self, other);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___cat(at::TensorList tensors, int64_t dim) {
    // No device check


  // DeviceGuard omitted
  return at::native::cat_quantized_cpu(tensors, dim);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out__cat_out_out(at::TensorList tensors, int64_t dim, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::cat_out_quantized_cpu(tensors, dim, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__hardsigmoid(const at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardsigmoid_quantized_cpu(self);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__hardtanh(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardtanh_quantized_cpu(self, min_val, max_val);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_hardtanh_out_out(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardtanh_out_quantized_cpu(self, min_val, max_val, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__hardtanh_(at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
    // No device check


  // DeviceGuard omitted
  return at::native::hardtanh_quantized_cpu_(self, min_val, max_val);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__leaky_relu(const at::Tensor & self, const at::Scalar & negative_slope) {
    // No device check


  // DeviceGuard omitted
  return at::native::leaky_relu_quantized_cpu(self, negative_slope);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_leaky_relu_out_out(const at::Tensor & self, const at::Scalar & negative_slope, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::leaky_relu_out_quantized_cpu(self, negative_slope, out);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__leaky_relu_(at::Tensor & self, const at::Scalar & negative_slope) {
    // No device check


  // DeviceGuard omitted
  return at::native::leaky_relu_quantized_cpu_(self, negative_slope);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool2d_quantized_cpu(self, output_size);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_adaptive_avg_pool3d_out_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool3d_out_quantized_cpu(self, output_size, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper___adaptive_avg_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
    // No device check


  // DeviceGuard omitted
  return at::native::adaptive_avg_pool3d_quantized_cpu(self, output_size);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    // No device check


  // DeviceGuard omitted
  return at::native::avg_pool2d_quantized_cpu(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    // No device check


  // DeviceGuard omitted
  return at::native::avg_pool3d_quantized_cpu(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::reflection_pad1d_cpu(self, padding);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_reflection_pad1d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::reflection_pad1d_out_cpu(self, padding, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__reflection_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
    // No device check


  // DeviceGuard omitted
  return at::native::reflection_pad2d_cpu(self, padding);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_out_reflection_pad2d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
    // No device check


  // DeviceGuard omitted
  return at::native::reflection_pad2d_out_cpu(self, padding, out);
}

} // anonymous namespace
namespace {

at::Tensor wrapper_vec_upsample_nearest3d_vec(const at::Tensor & input, c10::optional<at::IntArrayRef> output_size, c10::optional<at::ArrayRef<double>> scale_factors) {
    // No device check


  // DeviceGuard omitted
  return at::native::upsample_nearest3d_quantized_cpu(input, output_size, scale_factors);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    // No device check


  // DeviceGuard omitted
  return at::native::upsample_bilinear2d_quantized_cpu(self, output_size, align_corners, scales_h, scales_w);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    // No device check


  // DeviceGuard omitted
  return at::native::upsample_nearest2d_quantized_cpu(self, output_size, scales_h, scales_w);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__upsample_nearest3d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    // No device check


  // DeviceGuard omitted
  return at::native::upsample_nearest3d_quantized_cpu(self, output_size, scales_d, scales_h, scales_w);
}

} // anonymous namespace

TORCH_LIBRARY_IMPL(aten, QuantizedCPU, m) {
  m.impl("as_strided",
  TORCH_FN(wrapper__as_strided));
  m.impl("quantized_batch_norm",
  TORCH_FN(wrapper__quantized_batch_norm));
  m.impl("clamp",
  TORCH_FN(wrapper__clamp));
  m.impl("_empty_affine_quantized",
  TORCH_FN(wrapper___empty_affine_quantized));
  m.impl("_empty_per_channel_affine_quantized",
  TORCH_FN(wrapper___empty_per_channel_affine_quantized));
  m.impl("resize_",
  TORCH_FN(wrapper__resize_));
  m.impl("empty_quantized",
  TORCH_FN(wrapper__empty_quantized));
  m.impl("fill_.Scalar",
  TORCH_FN(wrapper_Scalar_fill__Scalar));
  m.impl("fill_.Tensor",
  TORCH_FN(wrapper_Tensor_fill__Tensor));
  m.impl("index.Tensor",
  TORCH_FN(wrapper_Tensor_index_Tensor));
  m.impl("max.dim",
  TORCH_FN(wrapper_dim_max_dim));
  m.impl("quantized_max_pool1d",
  TORCH_FN(wrapper__quantized_max_pool1d));
  m.impl("quantized_max_pool2d",
  TORCH_FN(wrapper__quantized_max_pool2d));
  m.impl("mean.dim",
  TORCH_FN(wrapper_dim_mean_dim));
  m.impl("mean.out",
  TORCH_FN(wrapper_out_mean_out_out));
  m.impl("min.dim",
  TORCH_FN(wrapper_dim_min_dim));
  m.impl("channel_shuffle",
  TORCH_FN(wrapper__channel_shuffle));
  m.impl("_reshape_alias",
  TORCH_FN(wrapper___reshape_alias));
  m.impl("relu",
  TORCH_FN(wrapper__relu));
  m.impl("relu_",
  TORCH_FN(wrapper__relu_));
  m.impl("sigmoid",
  TORCH_FN(wrapper__sigmoid));
  m.impl("tanh",
  TORCH_FN(wrapper__tanh));
  m.impl("threshold",
  TORCH_FN(wrapper__threshold));
  m.impl("flip",
  TORCH_FN(wrapper__flip));
  m.impl("clone",
  TORCH_FN(wrapper__clone));
  m.impl("dequantize.self",
  TORCH_FN(wrapper_self_dequantize_self));
  m.impl("dequantize.tensors",
  TORCH_FN(wrapper_tensors_dequantize_tensors));
  m.impl("q_scale",
  TORCH_FN(wrapper__q_scale));
  m.impl("q_zero_point",
  TORCH_FN(wrapper__q_zero_point));
  m.impl("q_per_channel_scales",
  TORCH_FN(wrapper__q_per_channel_scales));
  m.impl("q_per_channel_zero_points",
  TORCH_FN(wrapper__q_per_channel_zero_points));
  m.impl("q_per_channel_axis",
  TORCH_FN(wrapper__q_per_channel_axis));
  m.impl("int_repr",
  TORCH_FN(wrapper__int_repr));
  m.impl("qscheme",
  TORCH_FN(wrapper__qscheme));
  m.impl("set_.source_Storage_storage_offset",
  TORCH_FN(wrapper_source_Storage_storage_offset_set__source_Storage_storage_offset));
  m.impl("view",
  TORCH_FN(wrapper__view));
  m.impl("eq.Scalar",
  TORCH_FN(wrapper_Scalar_eq_Scalar));
  m.impl("eq.Scalar_out",
  TORCH_FN(wrapper_Scalar_out_eq_out_Scalar_out));
  m.impl("eq.Tensor",
  TORCH_FN(wrapper_Tensor_eq_Tensor));
  m.impl("eq.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_eq_out_Tensor_out));
  m.impl("ne.Scalar",
  TORCH_FN(wrapper_Scalar_ne_Scalar));
  m.impl("ne.Scalar_out",
  TORCH_FN(wrapper_Scalar_out_ne_out_Scalar_out));
  m.impl("ne.Tensor",
  TORCH_FN(wrapper_Tensor_ne_Tensor));
  m.impl("ne.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_ne_out_Tensor_out));
  m.impl("ge.Scalar",
  TORCH_FN(wrapper_Scalar_ge_Scalar));
  m.impl("ge.Scalar_out",
  TORCH_FN(wrapper_Scalar_out_ge_out_Scalar_out));
  m.impl("ge.Tensor",
  TORCH_FN(wrapper_Tensor_ge_Tensor));
  m.impl("ge.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_ge_out_Tensor_out));
  m.impl("le.Scalar",
  TORCH_FN(wrapper_Scalar_le_Scalar));
  m.impl("le.Scalar_out",
  TORCH_FN(wrapper_Scalar_out_le_out_Scalar_out));
  m.impl("le.Tensor",
  TORCH_FN(wrapper_Tensor_le_Tensor));
  m.impl("le.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_le_out_Tensor_out));
  m.impl("gt.Scalar",
  TORCH_FN(wrapper_Scalar_gt_Scalar));
  m.impl("gt.Scalar_out",
  TORCH_FN(wrapper_Scalar_out_gt_out_Scalar_out));
  m.impl("gt.Tensor",
  TORCH_FN(wrapper_Tensor_gt_Tensor));
  m.impl("gt.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_gt_out_Tensor_out));
  m.impl("lt.Scalar",
  TORCH_FN(wrapper_Scalar_lt_Scalar));
  m.impl("lt.Scalar_out",
  TORCH_FN(wrapper_Scalar_out_lt_out_Scalar_out));
  m.impl("lt.Tensor",
  TORCH_FN(wrapper_Tensor_lt_Tensor));
  m.impl("lt.Tensor_out",
  TORCH_FN(wrapper_Tensor_out_lt_out_Tensor_out));
  m.impl("index_select",
  TORCH_FN(wrapper__index_select));
  m.impl("index_select.out",
  TORCH_FN(wrapper_out_index_select_out_out));
  m.impl("min",
  TORCH_FN(wrapper__min));
  m.impl("max",
  TORCH_FN(wrapper__max));
  m.impl("sort",
  TORCH_FN(wrapper__sort));
  m.impl("sort.stable",
  TORCH_FN(wrapper_stable_sort_stable));
  m.impl("topk",
  TORCH_FN(wrapper__topk));
  m.impl("unfold",
  TORCH_FN(wrapper__unfold));
  m.impl("equal",
  TORCH_FN(wrapper__equal));
  m.impl("_cat",
  TORCH_FN(wrapper___cat));
  m.impl("_cat.out",
  TORCH_FN(wrapper_out__cat_out_out));
  m.impl("hardsigmoid",
  TORCH_FN(wrapper__hardsigmoid));
  m.impl("hardtanh",
  TORCH_FN(wrapper__hardtanh));
  m.impl("hardtanh.out",
  TORCH_FN(wrapper_out_hardtanh_out_out));
  m.impl("hardtanh_",
  TORCH_FN(wrapper__hardtanh_));
  m.impl("leaky_relu",
  TORCH_FN(wrapper__leaky_relu));
  m.impl("leaky_relu.out",
  TORCH_FN(wrapper_out_leaky_relu_out_out));
  m.impl("leaky_relu_",
  TORCH_FN(wrapper__leaky_relu_));
  m.impl("_adaptive_avg_pool2d",
  TORCH_FN(wrapper___adaptive_avg_pool2d));
  m.impl("adaptive_avg_pool3d.out",
  TORCH_FN(wrapper_out_adaptive_avg_pool3d_out_out));
  m.impl("_adaptive_avg_pool3d",
  TORCH_FN(wrapper___adaptive_avg_pool3d));
  m.impl("avg_pool2d",
  TORCH_FN(wrapper__avg_pool2d));
  m.impl("avg_pool3d",
  TORCH_FN(wrapper__avg_pool3d));
  m.impl("reflection_pad1d",
  TORCH_FN(wrapper__reflection_pad1d));
  m.impl("reflection_pad1d.out",
  TORCH_FN(wrapper_out_reflection_pad1d_out_out));
  m.impl("reflection_pad2d",
  TORCH_FN(wrapper__reflection_pad2d));
  m.impl("reflection_pad2d.out",
  TORCH_FN(wrapper_out_reflection_pad2d_out_out));
  m.impl("upsample_nearest3d.vec",
  TORCH_FN(wrapper_vec_upsample_nearest3d_vec));
  m.impl("upsample_bilinear2d",
  TORCH_FN(wrapper__upsample_bilinear2d));
  m.impl("upsample_nearest2d",
  TORCH_FN(wrapper__upsample_nearest2d));
  m.impl("upsample_nearest3d",
  TORCH_FN(wrapper__upsample_nearest3d));
}

} // anonymous namespace

namespace quantizedcpu {


at::Tensor as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
return wrapper__as_strided(self, size, stride, storage_offset);
}

at::Tensor quantized_batch_norm(const at::Tensor & input, const c10::optional<at::Tensor> & weight, const c10::optional<at::Tensor> & bias, const at::Tensor & mean, const at::Tensor & var, double eps, double output_scale, int64_t output_zero_point) {
return wrapper__quantized_batch_norm(input, weight, bias, mean, var, eps, output_scale, output_zero_point);
}

at::Tensor clamp(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
return wrapper__clamp(self, min, max);
}

at::Tensor _empty_affine_quantized(at::IntArrayRef size, at::TensorOptions options, double scale, int64_t zero_point, c10::optional<at::MemoryFormat> memory_format) {
return wrapper___empty_affine_quantized(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), scale, zero_point, c10::impl::check_tensor_options_and_extract_memory_format(options, memory_format));
}

at::Tensor _empty_affine_quantized(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, double scale, int64_t zero_point, c10::optional<at::MemoryFormat> memory_format) {
return wrapper___empty_affine_quantized(size, dtype, layout, device, pin_memory, scale, zero_point, memory_format);
}

at::Tensor _empty_per_channel_affine_quantized(at::IntArrayRef size, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, at::TensorOptions options, c10::optional<at::MemoryFormat> memory_format) {
return wrapper___empty_per_channel_affine_quantized(size, scales, zero_points, axis, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::check_tensor_options_and_extract_memory_format(options, memory_format));
}

at::Tensor _empty_per_channel_affine_quantized(at::IntArrayRef size, const at::Tensor & scales, const at::Tensor & zero_points, int64_t axis, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
return wrapper___empty_per_channel_affine_quantized(size, scales, zero_points, axis, dtype, layout, device, pin_memory, memory_format);
}

const at::Tensor & resize_(const at::Tensor & self, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format) {
return wrapper__resize_(self, size, memory_format);
}

at::Tensor empty_quantized(at::IntArrayRef size, const at::Tensor & qtensor, at::TensorOptions options, c10::optional<at::MemoryFormat> memory_format) {
return wrapper__empty_quantized(size, qtensor, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::check_tensor_options_and_extract_memory_format(options, memory_format));
}

at::Tensor empty_quantized(at::IntArrayRef size, const at::Tensor & qtensor, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
return wrapper__empty_quantized(size, qtensor, dtype, layout, device, pin_memory, memory_format);
}

at::Tensor & fill_(at::Tensor & self, const at::Scalar & value) {
return wrapper_Scalar_fill__Scalar(self, value);
}

at::Tensor & fill_(at::Tensor & self, const at::Tensor & value) {
return wrapper_Tensor_fill__Tensor(self, value);
}

at::Tensor index(const at::Tensor & self, const c10::List<c10::optional<at::Tensor>> & indices) {
return wrapper_Tensor_index_Tensor(self, indices);
}

::std::tuple<at::Tensor,at::Tensor> max(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_dim_max_dim(self, dim, keepdim);
}

at::Tensor quantized_max_pool1d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
return wrapper__quantized_max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode);
}

at::Tensor quantized_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
return wrapper__quantized_max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);
}

at::Tensor mean(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_dim_mean_dim(self, dim, keepdim, dtype);
}

at::Tensor & mean_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_out_mean_out_out(self, dim, keepdim, dtype, out);
}

at::Tensor & mean_outf(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_out_mean_out_out(self, dim, keepdim, dtype, out);
}

::std::tuple<at::Tensor,at::Tensor> min(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_dim_min_dim(self, dim, keepdim);
}

at::Tensor channel_shuffle(const at::Tensor & self, int64_t groups) {
return wrapper__channel_shuffle(self, groups);
}

at::Tensor _reshape_alias(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride) {
return wrapper___reshape_alias(self, size, stride);
}

at::Tensor relu(const at::Tensor & self) {
return wrapper__relu(self);
}

at::Tensor & relu_(at::Tensor & self) {
return wrapper__relu_(self);
}

at::Tensor sigmoid(const at::Tensor & self) {
return wrapper__sigmoid(self);
}

at::Tensor tanh(const at::Tensor & self) {
return wrapper__tanh(self);
}

at::Tensor threshold(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
return wrapper__threshold(self, threshold, value);
}

at::Tensor flip(const at::Tensor & self, at::IntArrayRef dims) {
return wrapper__flip(self, dims);
}

at::Tensor clone(const at::Tensor & self, c10::optional<at::MemoryFormat> memory_format) {
return wrapper__clone(self, memory_format);
}

at::Tensor dequantize(const at::Tensor & self) {
return wrapper_self_dequantize_self(self);
}

::std::vector<at::Tensor> dequantize(at::TensorList tensors) {
return wrapper_tensors_dequantize_tensors(tensors);
}

double q_scale(const at::Tensor & self) {
return wrapper__q_scale(self);
}

int64_t q_zero_point(const at::Tensor & self) {
return wrapper__q_zero_point(self);
}

at::Tensor q_per_channel_scales(const at::Tensor & self) {
return wrapper__q_per_channel_scales(self);
}

at::Tensor q_per_channel_zero_points(const at::Tensor & self) {
return wrapper__q_per_channel_zero_points(self);
}

int64_t q_per_channel_axis(const at::Tensor & self) {
return wrapper__q_per_channel_axis(self);
}

at::Tensor int_repr(const at::Tensor & self) {
return wrapper__int_repr(self);
}

at::QScheme qscheme(const at::Tensor & self) {
return wrapper__qscheme(self);
}

at::Tensor & set_(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride) {
return wrapper_source_Storage_storage_offset_set__source_Storage_storage_offset(self, source, storage_offset, size, stride);
}

at::Tensor view(const at::Tensor & self, at::IntArrayRef size) {
return wrapper__view(self, size);
}

at::Tensor eq(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_eq_Scalar(self, other);
}

at::Tensor & eq_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_out_eq_out_Scalar_out(self, other, out);
}

at::Tensor & eq_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_Scalar_out_eq_out_Scalar_out(self, other, out);
}

at::Tensor eq(const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_eq_Tensor(self, other);
}

at::Tensor & eq_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_out_eq_out_Tensor_out(self, other, out);
}

at::Tensor & eq_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_Tensor_out_eq_out_Tensor_out(self, other, out);
}

at::Tensor ne(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_ne_Scalar(self, other);
}

at::Tensor & ne_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_out_ne_out_Scalar_out(self, other, out);
}

at::Tensor & ne_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_Scalar_out_ne_out_Scalar_out(self, other, out);
}

at::Tensor ne(const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_ne_Tensor(self, other);
}

at::Tensor & ne_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_out_ne_out_Tensor_out(self, other, out);
}

at::Tensor & ne_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_Tensor_out_ne_out_Tensor_out(self, other, out);
}

at::Tensor ge(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_ge_Scalar(self, other);
}

at::Tensor & ge_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_out_ge_out_Scalar_out(self, other, out);
}

at::Tensor & ge_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_Scalar_out_ge_out_Scalar_out(self, other, out);
}

at::Tensor ge(const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_ge_Tensor(self, other);
}

at::Tensor & ge_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_out_ge_out_Tensor_out(self, other, out);
}

at::Tensor & ge_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_Tensor_out_ge_out_Tensor_out(self, other, out);
}

at::Tensor le(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_le_Scalar(self, other);
}

at::Tensor & le_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_out_le_out_Scalar_out(self, other, out);
}

at::Tensor & le_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_Scalar_out_le_out_Scalar_out(self, other, out);
}

at::Tensor le(const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_le_Tensor(self, other);
}

at::Tensor & le_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_out_le_out_Tensor_out(self, other, out);
}

at::Tensor & le_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_Tensor_out_le_out_Tensor_out(self, other, out);
}

at::Tensor gt(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_gt_Scalar(self, other);
}

at::Tensor & gt_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_out_gt_out_Scalar_out(self, other, out);
}

at::Tensor & gt_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_Scalar_out_gt_out_Scalar_out(self, other, out);
}

at::Tensor gt(const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_gt_Tensor(self, other);
}

at::Tensor & gt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_out_gt_out_Tensor_out(self, other, out);
}

at::Tensor & gt_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_Tensor_out_gt_out_Tensor_out(self, other, out);
}

at::Tensor lt(const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_lt_Scalar(self, other);
}

at::Tensor & lt_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar_out_lt_out_Scalar_out(self, other, out);
}

at::Tensor & lt_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_Scalar_out_lt_out_Scalar_out(self, other, out);
}

at::Tensor lt(const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_lt_Tensor(self, other);
}

at::Tensor & lt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_out_lt_out_Tensor_out(self, other, out);
}

at::Tensor & lt_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_Tensor_out_lt_out_Tensor_out(self, other, out);
}

at::Tensor index_select(const at::Tensor & self, int64_t dim, const at::Tensor & index) {
return wrapper__index_select(self, dim, index);
}

at::Tensor & index_select_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index) {
return wrapper_out_index_select_out_out(self, dim, index, out);
}

at::Tensor & index_select_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, at::Tensor & out) {
return wrapper_out_index_select_out_out(self, dim, index, out);
}

at::Tensor min(const at::Tensor & self) {
return wrapper__min(self);
}

at::Tensor max(const at::Tensor & self) {
return wrapper__max(self);
}

::std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, int64_t dim, bool descending) {
return wrapper__sort(self, dim, descending);
}

::std::tuple<at::Tensor,at::Tensor> sort(const at::Tensor & self, c10::optional<bool> stable, int64_t dim, bool descending) {
return wrapper_stable_sort_stable(self, stable, dim, descending);
}

::std::tuple<at::Tensor,at::Tensor> topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
return wrapper__topk(self, k, dim, largest, sorted);
}

at::Tensor unfold(const at::Tensor & self, int64_t dimension, int64_t size, int64_t step) {
return wrapper__unfold(self, dimension, size, step);
}

bool equal(const at::Tensor & self, const at::Tensor & other) {
return wrapper__equal(self, other);
}

at::Tensor _cat(at::TensorList tensors, int64_t dim) {
return wrapper___cat(tensors, dim);
}

at::Tensor & _cat_out(at::Tensor & out, at::TensorList tensors, int64_t dim) {
return wrapper_out__cat_out_out(tensors, dim, out);
}

at::Tensor & _cat_outf(at::TensorList tensors, int64_t dim, at::Tensor & out) {
return wrapper_out__cat_out_out(tensors, dim, out);
}

at::Tensor hardsigmoid(const at::Tensor & self) {
return wrapper__hardsigmoid(self);
}

at::Tensor hardtanh(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
return wrapper__hardtanh(self, min_val, max_val);
}

at::Tensor & hardtanh_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
return wrapper_out_hardtanh_out_out(self, min_val, max_val, out);
}

at::Tensor & hardtanh_outf(const at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val, at::Tensor & out) {
return wrapper_out_hardtanh_out_out(self, min_val, max_val, out);
}

at::Tensor & hardtanh_(at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
return wrapper__hardtanh_(self, min_val, max_val);
}

at::Tensor leaky_relu(const at::Tensor & self, const at::Scalar & negative_slope) {
return wrapper__leaky_relu(self, negative_slope);
}

at::Tensor & leaky_relu_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & negative_slope) {
return wrapper_out_leaky_relu_out_out(self, negative_slope, out);
}

at::Tensor & leaky_relu_outf(const at::Tensor & self, const at::Scalar & negative_slope, at::Tensor & out) {
return wrapper_out_leaky_relu_out_out(self, negative_slope, out);
}

at::Tensor & leaky_relu_(at::Tensor & self, const at::Scalar & negative_slope) {
return wrapper__leaky_relu_(self, negative_slope);
}

at::Tensor _adaptive_avg_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper___adaptive_avg_pool2d(self, output_size);
}

at::Tensor & adaptive_avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_out_adaptive_avg_pool3d_out_out(self, output_size, out);
}

at::Tensor & adaptive_avg_pool3d_outf(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out) {
return wrapper_out_adaptive_avg_pool3d_out_out(self, output_size, out);
}

at::Tensor _adaptive_avg_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper___adaptive_avg_pool3d(self, output_size);
}

at::Tensor avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper__avg_pool2d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper__avg_pool3d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper__reflection_pad1d(self, padding);
}

at::Tensor & reflection_pad1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_out_reflection_pad1d_out_out(self, padding, out);
}

at::Tensor & reflection_pad1d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_out_reflection_pad1d_out_out(self, padding, out);
}

at::Tensor reflection_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper__reflection_pad2d(self, padding);
}

at::Tensor & reflection_pad2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_out_reflection_pad2d_out_out(self, padding, out);
}

at::Tensor & reflection_pad2d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_out_reflection_pad2d_out_out(self, padding, out);
}

at::Tensor upsample_nearest3d(const at::Tensor & input, c10::optional<at::IntArrayRef> output_size, c10::optional<at::ArrayRef<double>> scale_factors) {
return wrapper_vec_upsample_nearest3d_vec(input, output_size, scale_factors);
}

at::Tensor upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper__upsample_bilinear2d(self, output_size, align_corners, scales_h, scales_w);
}

at::Tensor upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper__upsample_nearest2d(self, output_size, scales_h, scales_w);
}

at::Tensor upsample_nearest3d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper__upsample_nearest3d(self, output_size, scales_d, scales_h, scales_w);
}

} // namespace quantizedcpu

} // namespace at
