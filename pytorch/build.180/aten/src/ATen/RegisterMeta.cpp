// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif

// @generated by tools/codegen/gen.py from RegisterDispatchKey.cpp

#include <c10/core/TensorImpl.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/ExclusivelyOwned.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>
#include <ATen/Tensor.h>
#include <ATen/Functions.h>
#include <ATen/native/Resize.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/core/op_registration/adaption.h>
#include <torch/library.h>


#include <ATen/MetaFunctions.h>

namespace at {

// NB: TORCH_LIBRARY_IMPL must be in an anonymous namespace to avoid
// ambiguity with conflicting identifiers that may have been defined in
// at namespace already.
namespace {


Tensor create_out(IntArrayRef sizes, IntArrayRef strides, const TensorOptions &options) {

if (strides.empty()) {
    return at::empty(sizes, options.device(at::kMeta));
} else {
    return at::empty_strided(sizes, strides, options.device(at::kMeta));
}

}

void resize_out(const Tensor &out, IntArrayRef sizes, IntArrayRef strides, const TensorOptions &options) {
  TORCH_CHECK(options.dtype() == out.dtype(),
      "Expected out tensor to have dtype ", options.dtype(), ", but got ", out.dtype(), " instead");
  TORCH_CHECK(options.device() == out.device(),
      "Expected out tensor to have device ", options.device(), ", but got ", out.device(), " instead");
  const bool resized = at::native::resize_output(out, sizes);
  // Only restride if a resize occurred; otherwise we ignore the (advisory)
  // strides from the meta function and directly use the output tensor's
  // preexisting strides
  if (resized) {
    if (!strides.empty()) {
      TORCH_INTERNAL_ASSERT(!options.memory_format_opt().has_value());
      at::native::as_strided_(out, sizes, strides);
    } else if (options.memory_format_opt().has_value()) {
      out.unsafeGetTensorImpl()->empty_tensor_restride(*options.memory_format_opt());
    }
  }
}

struct structured_sgn_meta_functional final : public at::meta::structured_sgn {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sgn::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sgn(const at::Tensor & self) {
structured_sgn_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_sgn_meta_out final : public at::meta::structured_sgn {
    structured_sgn_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sgn::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sgn_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sgn_meta_out op(out);
op.meta(self);
return out;
}
struct structured_sgn_meta_inplace final : public at::meta::structured_sgn {
    structured_sgn_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sgn::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sgn_(at::Tensor & self) {
structured_sgn_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_acos_meta_functional final : public at::meta::structured_acos {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_acos::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_acos(const at::Tensor & self) {
structured_acos_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_acos_meta_out final : public at::meta::structured_acos {
    structured_acos_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_acos::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_acos_out_out(const at::Tensor & self, at::Tensor & out) {
structured_acos_meta_out op(out);
op.meta(self);
return out;
}
struct structured_acos_meta_inplace final : public at::meta::structured_acos {
    structured_acos_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_acos::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_acos_(at::Tensor & self) {
structured_acos_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_add_Tensor_meta_functional final : public at::meta::structured_add_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_add_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_add_Tensor(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
structured_add_Tensor_meta_functional op;
op.meta(self, other, alpha);
return std::move(op.outputs_[0]).take();
}
struct structured_add_Tensor_meta_out final : public at::meta::structured_add_Tensor {
    structured_add_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_add_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_add_out_out(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
structured_add_Tensor_meta_out op(out);
op.meta(self, other, alpha);
return out;
}
struct structured_add_Tensor_meta_inplace final : public at::meta::structured_add_Tensor {
    structured_add_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_add_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_add__Tensor(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
structured_add_Tensor_meta_inplace op(self);
op.meta(self, other, alpha);
return self;
}

at::Tensor & wrapper_Tensor__add_relu__Tensor(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_Scalar__add_relu__Scalar(at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_addmv_meta_functional final : public at::meta::structured_addmv {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
structured_addmv_meta_functional op;
op.meta(self, mat, vec, beta, alpha);
return std::move(op.outputs_[0]).take();
}
struct structured_addmv_meta_out final : public at::meta::structured_addmv {
    structured_addmv_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addmv_out_out(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
structured_addmv_meta_out op(out);
op.meta(self, mat, vec, beta, alpha);
return out;
}
struct structured_addmv_meta_inplace final : public at::meta::structured_addmv {
    structured_addmv_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addmv_(at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
structured_addmv_meta_inplace op(self);
op.meta(self, mat, vec, beta, alpha);
return self;
}
struct structured_all_dim_meta_functional final : public at::meta::structured_all_dim {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_all_dim(const at::Tensor & self, int64_t dim, bool keepdim) {
structured_all_dim_meta_functional op;
auto precompute = op.meta(self, dim, keepdim);
(void)precompute;
return std::move(op.outputs_[0]).take();
}
struct structured_all_dim_meta_out final : public at::meta::structured_all_dim {
    structured_all_dim_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_all_out_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out) {
structured_all_dim_meta_out op(out);
auto precompute = op.meta(self, dim, keepdim);
(void)precompute;
return out;
}
struct structured_any_dim_meta_functional final : public at::meta::structured_any_dim {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_any_dim(const at::Tensor & self, int64_t dim, bool keepdim) {
structured_any_dim_meta_functional op;
auto precompute = op.meta(self, dim, keepdim);
(void)precompute;
return std::move(op.outputs_[0]).take();
}
struct structured_any_dim_meta_out final : public at::meta::structured_any_dim {
    structured_any_dim_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_any_out_out(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out) {
structured_any_dim_meta_out op(out);
auto precompute = op.meta(self, dim, keepdim);
(void)precompute;
return out;
}
struct structured_argmax_meta_functional final : public at::meta::structured_argmax {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_argmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
structured_argmax_meta_functional op;
op.meta(self, dim, keepdim);
return std::move(op.outputs_[0]).take();
}
struct structured_argmax_meta_out final : public at::meta::structured_argmax {
    structured_argmax_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_argmax_out_out(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & out) {
structured_argmax_meta_out op(out);
op.meta(self, dim, keepdim);
return out;
}
struct structured_argmin_meta_functional final : public at::meta::structured_argmin {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_argmin(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
structured_argmin_meta_functional op;
op.meta(self, dim, keepdim);
return std::move(op.outputs_[0]).take();
}
struct structured_argmin_meta_out final : public at::meta::structured_argmin {
    structured_argmin_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_argmin_out_out(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & out) {
structured_argmin_meta_out op(out);
op.meta(self, dim, keepdim);
return out;
}
struct structured_acosh_meta_functional final : public at::meta::structured_acosh {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_acosh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_acosh(const at::Tensor & self) {
structured_acosh_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_acosh_meta_out final : public at::meta::structured_acosh {
    structured_acosh_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_acosh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_acosh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_acosh_meta_out op(out);
op.meta(self);
return out;
}
struct structured_acosh_meta_inplace final : public at::meta::structured_acosh {
    structured_acosh_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_acosh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_acosh_(at::Tensor & self) {
structured_acosh_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_asinh_meta_functional final : public at::meta::structured_asinh {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_asinh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_asinh(const at::Tensor & self) {
structured_asinh_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_asinh_meta_out final : public at::meta::structured_asinh {
    structured_asinh_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_asinh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_asinh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_asinh_meta_out op(out);
op.meta(self);
return out;
}
struct structured_asinh_meta_inplace final : public at::meta::structured_asinh {
    structured_asinh_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_asinh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_asinh_(at::Tensor & self) {
structured_asinh_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_atanh_meta_functional final : public at::meta::structured_atanh {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_atanh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_atanh(const at::Tensor & self) {
structured_atanh_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_atanh_meta_out final : public at::meta::structured_atanh {
    structured_atanh_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_atanh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atanh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_atanh_meta_out op(out);
op.meta(self);
return out;
}
struct structured_atanh_meta_inplace final : public at::meta::structured_atanh {
    structured_atanh_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_atanh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atanh_(at::Tensor & self) {
structured_atanh_meta_inplace op(self);
op.meta(self);
return self;
}
namespace {

at::Tensor wrapper__as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
    // No device check


  // DeviceGuard omitted
  return at::native::as_strided_tensorimpl(self, size, stride, storage_offset);
}

} // anonymous namespace
struct structured_asin_meta_functional final : public at::meta::structured_asin {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_asin::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_asin(const at::Tensor & self) {
structured_asin_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_asin_meta_out final : public at::meta::structured_asin {
    structured_asin_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_asin::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_asin_out_out(const at::Tensor & self, at::Tensor & out) {
structured_asin_meta_out op(out);
op.meta(self);
return out;
}
struct structured_asin_meta_inplace final : public at::meta::structured_asin {
    structured_asin_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_asin::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_asin_(at::Tensor & self) {
structured_asin_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_atan_meta_functional final : public at::meta::structured_atan {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_atan::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_atan(const at::Tensor & self) {
structured_atan_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_atan_meta_out final : public at::meta::structured_atan {
    structured_atan_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_atan::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atan_out_out(const at::Tensor & self, at::Tensor & out) {
structured_atan_meta_out op(out);
op.meta(self);
return out;
}
struct structured_atan_meta_inplace final : public at::meta::structured_atan {
    structured_atan_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_atan::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atan_(at::Tensor & self) {
structured_atan_meta_inplace op(self);
op.meta(self);
return self;
}

at::Tensor & wrapper__baddbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_Tensor_bernoulli__Tensor(at::Tensor & self, const at::Tensor & p, c10::optional<at::Generator> generator) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_float_bernoulli__float(at::Tensor & self, double p, c10::optional<at::Generator> generator) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_bitwise_not_meta_functional final : public at::meta::structured_bitwise_not {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_not::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_not(const at::Tensor & self) {
structured_bitwise_not_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_not_meta_out final : public at::meta::structured_bitwise_not {
    structured_bitwise_not_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_not::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_not_out_out(const at::Tensor & self, at::Tensor & out) {
structured_bitwise_not_meta_out op(out);
op.meta(self);
return out;
}
struct structured_bitwise_not_meta_inplace final : public at::meta::structured_bitwise_not {
    structured_bitwise_not_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_not::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_not_(at::Tensor & self) {
structured_bitwise_not_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_copysign_Tensor_meta_functional final : public at::meta::structured_copysign_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_copysign_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_copysign_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_copysign_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_copysign_Tensor_meta_out final : public at::meta::structured_copysign_Tensor {
    structured_copysign_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_copysign_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_copysign_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_copysign_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_copysign_Tensor_meta_inplace final : public at::meta::structured_copysign_Tensor {
    structured_copysign_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_copysign_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_copysign__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_copysign_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_ceil_meta_functional final : public at::meta::structured_ceil {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ceil::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ceil(const at::Tensor & self) {
structured_ceil_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_ceil_meta_out final : public at::meta::structured_ceil {
    structured_ceil_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ceil::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ceil_out_out(const at::Tensor & self, at::Tensor & out) {
structured_ceil_meta_out op(out);
op.meta(self);
return out;
}
struct structured_ceil_meta_inplace final : public at::meta::structured_ceil {
    structured_ceil_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ceil::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ceil_(at::Tensor & self) {
structured_ceil_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_clamp_meta_functional final : public at::meta::structured_clamp {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_clamp::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_clamp(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
structured_clamp_meta_functional op;
op.meta(self, (min.has_value() ? at::OptionalScalarRef(&(min.value())) : at::OptionalScalarRef()), (max.has_value() ? at::OptionalScalarRef(&(max.value())) : at::OptionalScalarRef()));
return std::move(op.outputs_[0]).take();
}
struct structured_clamp_meta_out final : public at::meta::structured_clamp {
    structured_clamp_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_clamp::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_clamp_out_out(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max, at::Tensor & out) {
structured_clamp_meta_out op(out);
op.meta(self, (min.has_value() ? at::OptionalScalarRef(&(min.value())) : at::OptionalScalarRef()), (max.has_value() ? at::OptionalScalarRef(&(max.value())) : at::OptionalScalarRef()));
return out;
}
struct structured_clamp_meta_inplace final : public at::meta::structured_clamp {
    structured_clamp_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_clamp::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_clamp_(at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
structured_clamp_meta_inplace op(self);
op.meta(self, (min.has_value() ? at::OptionalScalarRef(&(min.value())) : at::OptionalScalarRef()), (max.has_value() ? at::OptionalScalarRef(&(max.value())) : at::OptionalScalarRef()));
return self;
}
struct structured_cos_meta_functional final : public at::meta::structured_cos {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_cos::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_cos(const at::Tensor & self) {
structured_cos_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_cos_meta_out final : public at::meta::structured_cos {
    structured_cos_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_cos::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cos_out_out(const at::Tensor & self, at::Tensor & out) {
structured_cos_meta_out op(out);
op.meta(self);
return out;
}
struct structured_cos_meta_inplace final : public at::meta::structured_cos {
    structured_cos_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_cos::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cos_(at::Tensor & self) {
structured_cos_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_cosh_meta_functional final : public at::meta::structured_cosh {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_cosh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_cosh(const at::Tensor & self) {
structured_cosh_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_cosh_meta_out final : public at::meta::structured_cosh {
    structured_cosh_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_cosh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cosh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_cosh_meta_out op(out);
op.meta(self);
return out;
}
struct structured_cosh_meta_inplace final : public at::meta::structured_cosh {
    structured_cosh_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_cosh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cosh_(at::Tensor & self) {
structured_cosh_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_cumprod_meta_functional final : public at::meta::structured_cumprod {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_cumprod(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
structured_cumprod_meta_functional op;
op.meta(self, dim, dtype);
return std::move(op.outputs_[0]).take();
}
struct structured_cumprod_meta_out final : public at::meta::structured_cumprod {
    structured_cumprod_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cumprod_out_out(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_cumprod_meta_out op(out);
op.meta(self, dim, dtype);
return out;
}
struct structured_cumprod_meta_inplace final : public at::meta::structured_cumprod {
    structured_cumprod_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cumprod_(at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
structured_cumprod_meta_inplace op(self);
op.meta(self, dim, dtype);
return self;
}
struct structured_cumsum_meta_functional final : public at::meta::structured_cumsum {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_cumsum(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
structured_cumsum_meta_functional op;
op.meta(self, dim, dtype);
return std::move(op.outputs_[0]).take();
}
struct structured_cumsum_meta_out final : public at::meta::structured_cumsum {
    structured_cumsum_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cumsum_out_out(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_cumsum_meta_out op(out);
op.meta(self, dim, dtype);
return out;
}
struct structured_cumsum_meta_inplace final : public at::meta::structured_cumsum {
    structured_cumsum_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_cumsum_(at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
structured_cumsum_meta_inplace op(self);
op.meta(self, dim, dtype);
return self;
}
struct structured_div_Tensor_meta_functional final : public at::meta::structured_div_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_div_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_div_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_div_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_div_Tensor_meta_out final : public at::meta::structured_div_Tensor {
    structured_div_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_div_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_div_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_div_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_div_Tensor_meta_inplace final : public at::meta::structured_div_Tensor {
    structured_div_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_div_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_div__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_div_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_div_Tensor_mode_meta_functional final : public at::meta::structured_div_Tensor_mode {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_div_Tensor_mode::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_div_Tensor_mode(const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
structured_div_Tensor_mode_meta_functional op;
op.meta(self, other, rounding_mode);
return std::move(op.outputs_[0]).take();
}
struct structured_div_Tensor_mode_meta_out final : public at::meta::structured_div_Tensor_mode {
    structured_div_Tensor_mode_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_div_Tensor_mode::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_div_out_out_mode(const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode, at::Tensor & out) {
structured_div_Tensor_mode_meta_out op(out);
op.meta(self, other, rounding_mode);
return out;
}
struct structured_div_Tensor_mode_meta_inplace final : public at::meta::structured_div_Tensor_mode {
    structured_div_Tensor_mode_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_div_Tensor_mode::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_div__Tensor_mode(at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
structured_div_Tensor_mode_meta_inplace op(self);
op.meta(self, other, rounding_mode);
return self;
}

at::Tensor & wrapper__embedding_renorm_(at::Tensor & self, const at::Tensor & indices, double max_norm, double norm_type) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
namespace {

at::Tensor wrapper_memory_format_empty_memory_format(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::empty_meta(size, dtype, layout, device, pin_memory, memory_format);
}

} // anonymous namespace
namespace {

const at::Tensor & wrapper__resize_(const at::Tensor & self, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format) {
    // No device check


  // DeviceGuard omitted
  return at::native::resize_(self, size, memory_format);
}

} // anonymous namespace
namespace {

at::Tensor wrapper__empty_strided(at::IntArrayRef size, at::IntArrayRef stride, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
    // No device check


  // DeviceGuard omitted
  return at::native::empty_strided_meta(size, stride, dtype, layout, device, pin_memory);
}

} // anonymous namespace
struct structured_erf_meta_functional final : public at::meta::structured_erf {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_erf::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_erf(const at::Tensor & self) {
structured_erf_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_erf_meta_out final : public at::meta::structured_erf {
    structured_erf_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_erf::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erf_out_out(const at::Tensor & self, at::Tensor & out) {
structured_erf_meta_out op(out);
op.meta(self);
return out;
}
struct structured_erf_meta_inplace final : public at::meta::structured_erf {
    structured_erf_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_erf::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erf_(at::Tensor & self) {
structured_erf_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_erfc_meta_functional final : public at::meta::structured_erfc {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_erfc::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_erfc(const at::Tensor & self) {
structured_erfc_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_erfc_meta_out final : public at::meta::structured_erfc {
    structured_erfc_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_erfc::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erfc_out_out(const at::Tensor & self, at::Tensor & out) {
structured_erfc_meta_out op(out);
op.meta(self);
return out;
}
struct structured_erfc_meta_inplace final : public at::meta::structured_erfc {
    structured_erfc_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_erfc::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erfc_(at::Tensor & self) {
structured_erfc_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_exp_meta_functional final : public at::meta::structured_exp {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_exp::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_exp(const at::Tensor & self) {
structured_exp_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_exp_meta_out final : public at::meta::structured_exp {
    structured_exp_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_exp::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_exp_out_out(const at::Tensor & self, at::Tensor & out) {
structured_exp_meta_out op(out);
op.meta(self);
return out;
}
struct structured_exp_meta_inplace final : public at::meta::structured_exp {
    structured_exp_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_exp::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_exp_(at::Tensor & self) {
structured_exp_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_exp2_meta_functional final : public at::meta::structured_exp2 {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_exp2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_exp2(const at::Tensor & self) {
structured_exp2_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_exp2_meta_out final : public at::meta::structured_exp2 {
    structured_exp2_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_exp2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_exp2_out_out(const at::Tensor & self, at::Tensor & out) {
structured_exp2_meta_out op(out);
op.meta(self);
return out;
}
struct structured_exp2_meta_inplace final : public at::meta::structured_exp2 {
    structured_exp2_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_exp2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_exp2_(at::Tensor & self) {
structured_exp2_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_expm1_meta_functional final : public at::meta::structured_expm1 {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_expm1::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_expm1(const at::Tensor & self) {
structured_expm1_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_expm1_meta_out final : public at::meta::structured_expm1 {
    structured_expm1_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_expm1::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_expm1_out_out(const at::Tensor & self, at::Tensor & out) {
structured_expm1_meta_out op(out);
op.meta(self);
return out;
}
struct structured_expm1_meta_inplace final : public at::meta::structured_expm1 {
    structured_expm1_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_expm1::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_expm1_(at::Tensor & self) {
structured_expm1_meta_inplace op(self);
op.meta(self);
return self;
}
namespace {

at::Tensor & wrapper_Scalar_fill__Scalar(at::Tensor & self, const at::Scalar & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::fill_meta_(self, value);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_Tensor_fill__Tensor(at::Tensor & self, const at::Tensor & value) {
    // No device check


  // DeviceGuard omitted
  return at::native::fill_meta_(self, value);
}

} // anonymous namespace
struct structured_floor_meta_functional final : public at::meta::structured_floor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_floor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_floor(const at::Tensor & self) {
structured_floor_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_floor_meta_out final : public at::meta::structured_floor {
    structured_floor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_floor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_floor_out_out(const at::Tensor & self, at::Tensor & out) {
structured_floor_meta_out op(out);
op.meta(self);
return out;
}
struct structured_floor_meta_inplace final : public at::meta::structured_floor {
    structured_floor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_floor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_floor_(at::Tensor & self) {
structured_floor_meta_inplace op(self);
op.meta(self);
return self;
}

at::Tensor & wrapper_Tensor_floor_divide__Tensor(at::Tensor & self, const at::Tensor & other) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_frac_meta_functional final : public at::meta::structured_frac {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_frac::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_frac(const at::Tensor & self) {
structured_frac_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_frac_meta_out final : public at::meta::structured_frac {
    structured_frac_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_frac::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_frac_out_out(const at::Tensor & self, at::Tensor & out) {
structured_frac_meta_out op(out);
op.meta(self);
return out;
}
struct structured_frac_meta_inplace final : public at::meta::structured_frac {
    structured_frac_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_frac::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_frac_(at::Tensor & self) {
structured_frac_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_gcd_meta_functional final : public at::meta::structured_gcd {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gcd::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gcd(const at::Tensor & self, const at::Tensor & other) {
structured_gcd_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_gcd_meta_out final : public at::meta::structured_gcd {
    structured_gcd_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gcd::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gcd_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_gcd_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_gcd_meta_inplace final : public at::meta::structured_gcd {
    structured_gcd_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gcd::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gcd_(at::Tensor & self, const at::Tensor & other) {
structured_gcd_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_lcm_meta_functional final : public at::meta::structured_lcm {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lcm::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_lcm(const at::Tensor & self, const at::Tensor & other) {
structured_lcm_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_lcm_meta_out final : public at::meta::structured_lcm {
    structured_lcm_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lcm::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lcm_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_lcm_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_lcm_meta_inplace final : public at::meta::structured_lcm {
    structured_lcm_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lcm::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lcm_(at::Tensor & self, const at::Tensor & other) {
structured_lcm_meta_inplace op(self);
op.meta(self, other);
return self;
}

at::Tensor & wrapper___index_put_impl_(at::Tensor & self, const c10::List<c10::optional<at::Tensor>> & indices, const at::Tensor & values, bool accumulate, bool unsafe) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_isin_Tensor_Tensor_meta_functional final : public at::meta::structured_isin_Tensor_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isin_Tensor_Tensor(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert) {
structured_isin_Tensor_Tensor_meta_functional op;
op.meta(elements, test_elements, assume_unique, invert);
return std::move(op.outputs_[0]).take();
}
struct structured_isin_Tensor_Tensor_meta_out final : public at::meta::structured_isin_Tensor_Tensor {
    structured_isin_Tensor_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isin_out_Tensor_Tensor_out(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out) {
structured_isin_Tensor_Tensor_meta_out op(out);
op.meta(elements, test_elements, assume_unique, invert);
return out;
}
struct structured_isin_Tensor_Scalar_meta_functional final : public at::meta::structured_isin_Tensor_Scalar {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isin_Tensor_Scalar(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert) {
structured_isin_Tensor_Scalar_meta_functional op;
op.meta(elements, test_element, assume_unique, invert);
return std::move(op.outputs_[0]).take();
}
struct structured_isin_Tensor_Scalar_meta_out final : public at::meta::structured_isin_Tensor_Scalar {
    structured_isin_Tensor_Scalar_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isin_out_Tensor_Scalar_out(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert, at::Tensor & out) {
structured_isin_Tensor_Scalar_meta_out op(out);
op.meta(elements, test_element, assume_unique, invert);
return out;
}
struct structured_isin_Scalar_Tensor_meta_functional final : public at::meta::structured_isin_Scalar_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isin_Scalar_Tensor(const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert) {
structured_isin_Scalar_Tensor_meta_functional op;
op.meta(element, test_elements, assume_unique, invert);
return std::move(op.outputs_[0]).take();
}
struct structured_isin_Scalar_Tensor_meta_out final : public at::meta::structured_isin_Scalar_Tensor {
    structured_isin_Scalar_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isin_out_Scalar_Tensor_out(const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out) {
structured_isin_Scalar_Tensor_meta_out op(out);
op.meta(element, test_elements, assume_unique, invert);
return out;
}
struct structured_log_meta_functional final : public at::meta::structured_log {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_log(const at::Tensor & self) {
structured_log_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_log_meta_out final : public at::meta::structured_log {
    structured_log_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log_out_out(const at::Tensor & self, at::Tensor & out) {
structured_log_meta_out op(out);
op.meta(self);
return out;
}
struct structured_log_meta_inplace final : public at::meta::structured_log {
    structured_log_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log_(at::Tensor & self) {
structured_log_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_log10_meta_functional final : public at::meta::structured_log10 {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log10::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_log10(const at::Tensor & self) {
structured_log10_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_log10_meta_out final : public at::meta::structured_log10 {
    structured_log10_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log10::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log10_out_out(const at::Tensor & self, at::Tensor & out) {
structured_log10_meta_out op(out);
op.meta(self);
return out;
}
struct structured_log10_meta_inplace final : public at::meta::structured_log10 {
    structured_log10_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log10::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log10_(at::Tensor & self) {
structured_log10_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_log1p_meta_functional final : public at::meta::structured_log1p {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log1p::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_log1p(const at::Tensor & self) {
structured_log1p_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_log1p_meta_out final : public at::meta::structured_log1p {
    structured_log1p_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log1p::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log1p_out_out(const at::Tensor & self, at::Tensor & out) {
structured_log1p_meta_out op(out);
op.meta(self);
return out;
}
struct structured_log1p_meta_inplace final : public at::meta::structured_log1p {
    structured_log1p_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log1p::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log1p_(at::Tensor & self) {
structured_log1p_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_log2_meta_functional final : public at::meta::structured_log2 {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_log2(const at::Tensor & self) {
structured_log2_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_log2_meta_out final : public at::meta::structured_log2 {
    structured_log2_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log2_out_out(const at::Tensor & self, at::Tensor & out) {
structured_log2_meta_out op(out);
op.meta(self);
return out;
}
struct structured_log2_meta_inplace final : public at::meta::structured_log2 {
    structured_log2_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_log2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_log2_(at::Tensor & self) {
structured_log2_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_logaddexp_meta_functional final : public at::meta::structured_logaddexp {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_logaddexp::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_logaddexp(const at::Tensor & self, const at::Tensor & other) {
structured_logaddexp_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_logaddexp_meta_out final : public at::meta::structured_logaddexp {
    structured_logaddexp_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_logaddexp::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_logaddexp_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_logaddexp_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_logaddexp2_meta_functional final : public at::meta::structured_logaddexp2 {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_logaddexp2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_logaddexp2(const at::Tensor & self, const at::Tensor & other) {
structured_logaddexp2_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_logaddexp2_meta_out final : public at::meta::structured_logaddexp2 {
    structured_logaddexp2_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_logaddexp2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_logaddexp2_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_logaddexp2_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_xlogy_Tensor_meta_functional final : public at::meta::structured_xlogy_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_xlogy_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_xlogy_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_xlogy_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_xlogy_Tensor_meta_out final : public at::meta::structured_xlogy_Tensor {
    structured_xlogy_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_xlogy_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_xlogy_out_OutTensor(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_xlogy_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_xlogy_Tensor_meta_inplace final : public at::meta::structured_xlogy_Tensor {
    structured_xlogy_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_xlogy_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_xlogy__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_xlogy_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured__log_softmax_meta_functional final : public at::meta::structured__log_softmax {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
structured__log_softmax_meta_functional op;
op.meta(self, dim, half_to_float);
return std::move(op.outputs_[0]).take();
}
struct structured__log_softmax_meta_out final : public at::meta::structured__log_softmax {
    structured__log_softmax_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__log_softmax_out_out(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out) {
structured__log_softmax_meta_out op(out);
op.meta(self, dim, half_to_float);
return out;
}
struct structured__log_softmax_backward_data_meta_functional final : public at::meta::structured__log_softmax_backward_data {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
structured__log_softmax_backward_data_meta_functional op;
op.meta(grad_output, output, dim, self);
return std::move(op.outputs_[0]).take();
}
struct structured__log_softmax_backward_data_meta_out final : public at::meta::structured__log_softmax_backward_data {
    structured__log_softmax_backward_data_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__log_softmax_backward_data_out_out(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self, at::Tensor & out) {
structured__log_softmax_backward_data_meta_out op(out);
op.meta(grad_output, output, dim, self);
return out;
}
struct structured_aminmax_meta_functional final : public at::meta::structured_aminmax {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_aminmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
structured_aminmax_meta_functional op;
op.meta(self, dim, keepdim);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_aminmax_meta_out final : public at::meta::structured_aminmax {
    structured_aminmax_meta_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_aminmax_out_out(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & min, at::Tensor & max) {
structured_aminmax_meta_out op(min, max);
op.meta(self, dim, keepdim);
return std::forward_as_tuple(min, max);
}
struct structured_mean_dim_meta_functional final : public at::meta::structured_mean_dim {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_mean_dim(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
structured_mean_dim_meta_functional op;
op.meta(self, dim, keepdim, dtype);
return std::move(op.outputs_[0]).take();
}
struct structured_mean_dim_meta_out final : public at::meta::structured_mean_dim {
    structured_mean_dim_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mean_out_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_mean_dim_meta_out op(out);
op.meta(self, dim, keepdim, dtype);
return out;
}
struct structured_mm_meta_functional final : public at::meta::structured_mm {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_mm(const at::Tensor & self, const at::Tensor & mat2) {
structured_mm_meta_functional op;
op.meta(self, mat2);
return std::move(op.outputs_[0]).take();
}
struct structured_mm_meta_out final : public at::meta::structured_mm {
    structured_mm_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mm_out_out(const at::Tensor & self, const at::Tensor & mat2, at::Tensor & out) {
structured_mm_meta_out op(out);
op.meta(self, mat2);
return out;
}
struct structured_mul_Tensor_meta_functional final : public at::meta::structured_mul_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_mul_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_mul_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_mul_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_mul_Tensor_meta_out final : public at::meta::structured_mul_Tensor {
    structured_mul_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_mul_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mul_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_mul_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_mul_Tensor_meta_inplace final : public at::meta::structured_mul_Tensor {
    structured_mul_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_mul_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mul__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_mul_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_reciprocal_meta_functional final : public at::meta::structured_reciprocal {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_reciprocal::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reciprocal(const at::Tensor & self) {
structured_reciprocal_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_reciprocal_meta_out final : public at::meta::structured_reciprocal {
    structured_reciprocal_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_reciprocal::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reciprocal_out_out(const at::Tensor & self, at::Tensor & out) {
structured_reciprocal_meta_out op(out);
op.meta(self);
return out;
}
struct structured_reciprocal_meta_inplace final : public at::meta::structured_reciprocal {
    structured_reciprocal_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_reciprocal::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reciprocal_(at::Tensor & self) {
structured_reciprocal_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_neg_meta_functional final : public at::meta::structured_neg {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_neg::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_neg(const at::Tensor & self) {
structured_neg_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_neg_meta_out final : public at::meta::structured_neg {
    structured_neg_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_neg::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_neg_out_out(const at::Tensor & self, at::Tensor & out) {
structured_neg_meta_out op(out);
op.meta(self);
return out;
}
struct structured_neg_meta_inplace final : public at::meta::structured_neg {
    structured_neg_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_neg::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_neg_(at::Tensor & self) {
structured_neg_meta_inplace op(self);
op.meta(self);
return self;
}
namespace {

at::Tensor wrapper___reshape_alias(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride) {
    // No device check


  // DeviceGuard omitted
  return at::native::_reshape_alias(self, size, stride);
}

} // anonymous namespace
struct structured_round_meta_functional final : public at::meta::structured_round {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_round::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_round(const at::Tensor & self) {
structured_round_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_round_meta_out final : public at::meta::structured_round {
    structured_round_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_round::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_round_out_out(const at::Tensor & self, at::Tensor & out) {
structured_round_meta_out op(out);
op.meta(self);
return out;
}
struct structured_round_meta_inplace final : public at::meta::structured_round {
    structured_round_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_round::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_round_(at::Tensor & self) {
structured_round_meta_inplace op(self);
op.meta(self);
return self;
}

at::Tensor & wrapper__relu_(at::Tensor & self) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_gelu_meta_functional final : public at::meta::structured_gelu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gelu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gelu(const at::Tensor & self) {
structured_gelu_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_gelu_meta_out final : public at::meta::structured_gelu {
    structured_gelu_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gelu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gelu_out_out(const at::Tensor & self, at::Tensor & out) {
structured_gelu_meta_out op(out);
op.meta(self);
return out;
}
struct structured_gelu_backward_meta_functional final : public at::meta::structured_gelu_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gelu_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gelu_backward(const at::Tensor & grad, const at::Tensor & self) {
structured_gelu_backward_meta_functional op;
op.meta(grad, self);
return std::move(op.outputs_[0]).take();
}
struct structured_gelu_backward_meta_out final : public at::meta::structured_gelu_backward {
    structured_gelu_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gelu_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gelu_backward_out_grad_input(const at::Tensor & grad, const at::Tensor & self, at::Tensor & grad_input) {
structured_gelu_backward_meta_out op(grad_input);
op.meta(grad, self);
return grad_input;
}
struct structured_hardshrink_meta_functional final : public at::meta::structured_hardshrink {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hardshrink::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hardshrink(const at::Tensor & self, const at::Scalar & lambd) {
structured_hardshrink_meta_functional op;
op.meta(self, lambd);
return std::move(op.outputs_[0]).take();
}
struct structured_hardshrink_meta_out final : public at::meta::structured_hardshrink {
    structured_hardshrink_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hardshrink::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardshrink_out_out(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out) {
structured_hardshrink_meta_out op(out);
op.meta(self, lambd);
return out;
}
struct structured_hardshrink_backward_meta_functional final : public at::meta::structured_hardshrink_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hardshrink_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd) {
structured_hardshrink_backward_meta_functional op;
op.meta(grad_out, self, lambd);
return std::move(op.outputs_[0]).take();
}
struct structured_hardshrink_backward_meta_out final : public at::meta::structured_hardshrink_backward {
    structured_hardshrink_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hardshrink_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardshrink_backward_out_grad_input(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input) {
structured_hardshrink_backward_meta_out op(grad_input);
op.meta(grad_out, self, lambd);
return grad_input;
}
struct structured_rsqrt_meta_functional final : public at::meta::structured_rsqrt {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_rsqrt::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_rsqrt(const at::Tensor & self) {
structured_rsqrt_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_rsqrt_meta_out final : public at::meta::structured_rsqrt {
    structured_rsqrt_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_rsqrt::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_rsqrt_out_out(const at::Tensor & self, at::Tensor & out) {
structured_rsqrt_meta_out op(out);
op.meta(self);
return out;
}
struct structured_rsqrt_meta_inplace final : public at::meta::structured_rsqrt {
    structured_rsqrt_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_rsqrt::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_rsqrt_(at::Tensor & self) {
structured_rsqrt_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_silu_meta_functional final : public at::meta::structured_silu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_silu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_silu(const at::Tensor & self) {
structured_silu_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_silu_meta_out final : public at::meta::structured_silu {
    structured_silu_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_silu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_silu_out_out(const at::Tensor & self, at::Tensor & out) {
structured_silu_meta_out op(out);
op.meta(self);
return out;
}
struct structured_silu_meta_inplace final : public at::meta::structured_silu {
    structured_silu_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_silu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_silu_(at::Tensor & self) {
structured_silu_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_silu_backward_meta_functional final : public at::meta::structured_silu_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_silu_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_silu_backward(const at::Tensor & grad_output, const at::Tensor & self) {
structured_silu_backward_meta_functional op;
op.meta(grad_output, self);
return std::move(op.outputs_[0]).take();
}
struct structured_silu_backward_meta_out final : public at::meta::structured_silu_backward {
    structured_silu_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_silu_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_silu_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
structured_silu_backward_meta_out op(grad_input);
op.meta(grad_output, self);
return grad_input;
}
struct structured_mish_meta_functional final : public at::meta::structured_mish {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_mish::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_mish(const at::Tensor & self) {
structured_mish_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_mish_meta_out final : public at::meta::structured_mish {
    structured_mish_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_mish::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mish_out_out(const at::Tensor & self, at::Tensor & out) {
structured_mish_meta_out op(out);
op.meta(self);
return out;
}
struct structured_mish_meta_inplace final : public at::meta::structured_mish {
    structured_mish_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_mish::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_mish_(at::Tensor & self) {
structured_mish_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_sigmoid_meta_functional final : public at::meta::structured_sigmoid {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sigmoid::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sigmoid(const at::Tensor & self) {
structured_sigmoid_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_sigmoid_meta_out final : public at::meta::structured_sigmoid {
    structured_sigmoid_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sigmoid::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sigmoid_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sigmoid_meta_out op(out);
op.meta(self);
return out;
}
struct structured_sigmoid_meta_inplace final : public at::meta::structured_sigmoid {
    structured_sigmoid_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sigmoid::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sigmoid_(at::Tensor & self) {
structured_sigmoid_meta_inplace op(self);
op.meta(self);
return self;
}

at::Tensor & wrapper__logit_(at::Tensor & self, c10::optional<double> eps) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_sin_meta_functional final : public at::meta::structured_sin {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sin::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sin(const at::Tensor & self) {
structured_sin_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_sin_meta_out final : public at::meta::structured_sin {
    structured_sin_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sin::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sin_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sin_meta_out op(out);
op.meta(self);
return out;
}
struct structured_sin_meta_inplace final : public at::meta::structured_sin {
    structured_sin_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sin::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sin_(at::Tensor & self) {
structured_sin_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_sinc_meta_functional final : public at::meta::structured_sinc {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sinc::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sinc(const at::Tensor & self) {
structured_sinc_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_sinc_meta_out final : public at::meta::structured_sinc {
    structured_sinc_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sinc::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sinc_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sinc_meta_out op(out);
op.meta(self);
return out;
}
struct structured_sinc_meta_inplace final : public at::meta::structured_sinc {
    structured_sinc_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sinc::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sinc_(at::Tensor & self) {
structured_sinc_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_sinh_meta_functional final : public at::meta::structured_sinh {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sinh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sinh(const at::Tensor & self) {
structured_sinh_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_sinh_meta_out final : public at::meta::structured_sinh {
    structured_sinh_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sinh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sinh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sinh_meta_out op(out);
op.meta(self);
return out;
}
struct structured_sinh_meta_inplace final : public at::meta::structured_sinh {
    structured_sinh_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sinh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sinh_(at::Tensor & self) {
structured_sinh_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured__softmax_meta_functional final : public at::meta::structured__softmax {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
structured__softmax_meta_functional op;
op.meta(self, dim, half_to_float);
return std::move(op.outputs_[0]).take();
}
struct structured__softmax_meta_out final : public at::meta::structured__softmax {
    structured__softmax_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__softmax_out_out(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out) {
structured__softmax_meta_out op(out);
op.meta(self, dim, half_to_float);
return out;
}
struct structured__softmax_backward_data_meta_functional final : public at::meta::structured__softmax_backward_data {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
structured__softmax_backward_data_meta_functional op;
op.meta(grad_output, output, dim, self);
return std::move(op.outputs_[0]).take();
}
struct structured__softmax_backward_data_meta_out final : public at::meta::structured__softmax_backward_data {
    structured__softmax_backward_data_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__softmax_backward_data_out_out(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self, at::Tensor & grad_input) {
structured__softmax_backward_data_meta_out op(grad_input);
op.meta(grad_output, output, dim, self);
return grad_input;
}
struct structured_sum_dim_IntList_meta_functional final : public at::meta::structured_sum_dim_IntList {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sum_dim_IntList(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
structured_sum_dim_IntList_meta_functional op;
op.meta(self, dim, keepdim, dtype);
return std::move(op.outputs_[0]).take();
}
struct structured_sum_dim_IntList_meta_out final : public at::meta::structured_sum_dim_IntList {
    structured_sum_dim_IntList_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sum_out_IntList_out(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_sum_dim_IntList_meta_out op(out);
op.meta(self, dim, keepdim, dtype);
return out;
}
struct structured_sqrt_meta_functional final : public at::meta::structured_sqrt {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sqrt::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sqrt(const at::Tensor & self) {
structured_sqrt_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_sqrt_meta_out final : public at::meta::structured_sqrt {
    structured_sqrt_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sqrt::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sqrt_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sqrt_meta_out op(out);
op.meta(self);
return out;
}
struct structured_sqrt_meta_inplace final : public at::meta::structured_sqrt {
    structured_sqrt_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sqrt::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sqrt_(at::Tensor & self) {
structured_sqrt_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_prod_dim_int_meta_functional final : public at::meta::structured_prod_dim_int {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_prod_dim_int(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
structured_prod_dim_int_meta_functional op;
op.meta(self, dim, keepdim, dtype);
return std::move(op.outputs_[0]).take();
}
struct structured_prod_dim_int_meta_out final : public at::meta::structured_prod_dim_int {
    structured_prod_dim_int_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_prod_out_int_out(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
structured_prod_dim_int_meta_out op(out);
op.meta(self, dim, keepdim, dtype);
return out;
}
struct structured_tan_meta_functional final : public at::meta::structured_tan {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_tan::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_tan(const at::Tensor & self) {
structured_tan_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_tan_meta_out final : public at::meta::structured_tan {
    structured_tan_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_tan::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tan_out_out(const at::Tensor & self, at::Tensor & out) {
structured_tan_meta_out op(out);
op.meta(self);
return out;
}
struct structured_tan_meta_inplace final : public at::meta::structured_tan {
    structured_tan_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_tan::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tan_(at::Tensor & self) {
structured_tan_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_tanh_meta_functional final : public at::meta::structured_tanh {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_tanh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_tanh(const at::Tensor & self) {
structured_tanh_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_tanh_meta_out final : public at::meta::structured_tanh {
    structured_tanh_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_tanh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tanh_out_out(const at::Tensor & self, at::Tensor & out) {
structured_tanh_meta_out op(out);
op.meta(self);
return out;
}
struct structured_tanh_meta_inplace final : public at::meta::structured_tanh {
    structured_tanh_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_tanh::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tanh_(at::Tensor & self) {
structured_tanh_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_threshold_meta_functional final : public at::meta::structured_threshold {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_threshold::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_threshold(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
structured_threshold_meta_functional op;
op.meta(self, threshold, value);
return std::move(op.outputs_[0]).take();
}
struct structured_threshold_meta_out final : public at::meta::structured_threshold {
    structured_threshold_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_threshold::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_threshold_out_out(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value, at::Tensor & out) {
structured_threshold_meta_out op(out);
op.meta(self, threshold, value);
return out;
}
struct structured_threshold_meta_inplace final : public at::meta::structured_threshold {
    structured_threshold_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_threshold::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_threshold_(at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
structured_threshold_meta_inplace op(self);
op.meta(self, threshold, value);
return self;
}
struct structured_threshold_backward_meta_functional final : public at::meta::structured_threshold_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_threshold_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold) {
structured_threshold_backward_meta_functional op;
op.meta(grad_output, self, threshold);
return std::move(op.outputs_[0]).take();
}
struct structured_threshold_backward_meta_out final : public at::meta::structured_threshold_backward {
    structured_threshold_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_threshold_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_threshold_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold, at::Tensor & grad_input) {
structured_threshold_backward_meta_out op(grad_input);
op.meta(grad_output, self, threshold);
return grad_input;
}

at::Tensor & wrapper___mkldnn_transpose_(at::Tensor & self, int64_t dim0, int64_t dim1) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_trunc_meta_functional final : public at::meta::structured_trunc {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_trunc::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_trunc(const at::Tensor & self) {
structured_trunc_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_trunc_meta_out final : public at::meta::structured_trunc {
    structured_trunc_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_trunc::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_trunc_out_out(const at::Tensor & self, at::Tensor & out) {
structured_trunc_meta_out op(out);
op.meta(self);
return out;
}
struct structured_trunc_meta_inplace final : public at::meta::structured_trunc {
    structured_trunc_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_trunc::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_trunc_(at::Tensor & self) {
structured_trunc_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_norm_ScalarOpt_dim_dtype_meta_functional final : public at::meta::structured_norm_ScalarOpt_dim_dtype {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_norm_ScalarOpt_dim_dtype(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
structured_norm_ScalarOpt_dim_dtype_meta_functional op;
op.meta(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim, dtype);
return std::move(op.outputs_[0]).take();
}
struct structured_norm_ScalarOpt_dim_dtype_meta_out final : public at::meta::structured_norm_ScalarOpt_dim_dtype {
    structured_norm_ScalarOpt_dim_dtype_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_norm_out_dtype_out(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype, at::Tensor & out) {
structured_norm_ScalarOpt_dim_dtype_meta_out op(out);
op.meta(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim, dtype);
return out;
}
struct structured_norm_ScalarOpt_dim_meta_functional final : public at::meta::structured_norm_ScalarOpt_dim {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_norm_ScalarOpt_dim(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim) {
structured_norm_ScalarOpt_dim_meta_functional op;
op.meta(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim);
return std::move(op.outputs_[0]).take();
}
struct structured_norm_ScalarOpt_dim_meta_out final : public at::meta::structured_norm_ScalarOpt_dim {
    structured_norm_ScalarOpt_dim_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_norm_out_out(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::Tensor & out) {
structured_norm_ScalarOpt_dim_meta_out op(out);
op.meta(self, (p.has_value() ? at::OptionalScalarRef(&(p.value())) : at::OptionalScalarRef()), dim, keepdim);
return out;
}

const at::Tensor & wrapper__resize_as_sparse_(const at::Tensor & self, const at::Tensor & the_template) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
namespace {

at::Tensor & wrapper__zero_(at::Tensor & self) {
    // No device check


  // DeviceGuard omitted
  return at::native::zero_meta_(self);
}

} // anonymous namespace
struct structured_sub_Tensor_meta_functional final : public at::meta::structured_sub_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sub_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sub_Tensor(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
structured_sub_Tensor_meta_functional op;
op.meta(self, other, alpha);
return std::move(op.outputs_[0]).take();
}
struct structured_sub_Tensor_meta_out final : public at::meta::structured_sub_Tensor {
    structured_sub_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sub_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sub_out_out(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
structured_sub_Tensor_meta_out op(out);
op.meta(self, other, alpha);
return out;
}
struct structured_sub_Tensor_meta_inplace final : public at::meta::structured_sub_Tensor {
    structured_sub_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sub_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sub__Tensor(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
structured_sub_Tensor_meta_inplace op(self);
op.meta(self, other, alpha);
return self;
}
struct structured_heaviside_meta_functional final : public at::meta::structured_heaviside {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_heaviside::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_heaviside(const at::Tensor & self, const at::Tensor & values) {
structured_heaviside_meta_functional op;
op.meta(self, values);
return std::move(op.outputs_[0]).take();
}
struct structured_heaviside_meta_out final : public at::meta::structured_heaviside {
    structured_heaviside_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_heaviside::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_heaviside_out_out(const at::Tensor & self, const at::Tensor & values, at::Tensor & out) {
structured_heaviside_meta_out op(out);
op.meta(self, values);
return out;
}
struct structured_heaviside_meta_inplace final : public at::meta::structured_heaviside {
    structured_heaviside_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_heaviside::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_heaviside_(at::Tensor & self, const at::Tensor & values) {
structured_heaviside_meta_inplace op(self);
op.meta(self, values);
return self;
}
struct structured_addmm_meta_functional final : public at::meta::structured_addmm {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
structured_addmm_meta_functional op;
op.meta(self, mat1, mat2, beta, alpha);
return std::move(op.outputs_[0]).take();
}
struct structured_addmm_meta_out final : public at::meta::structured_addmm {
    structured_addmm_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addmm_out_out(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
structured_addmm_meta_out op(out);
op.meta(self, mat1, mat2, beta, alpha);
return out;
}
struct structured_addmm_meta_inplace final : public at::meta::structured_addmm {
    structured_addmm_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
structured_addmm_meta_inplace op(self);
op.meta(self, mat1, mat2, beta, alpha);
return self;
}

const at::Tensor & wrapper__sparse_resize_(const at::Tensor & self, at::IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

const at::Tensor & wrapper__sparse_resize_and_clear_(const at::Tensor & self, at::IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper___coalesced_(at::Tensor & self, bool coalesced) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__copy_sparse_to_sparse_(at::Tensor & self, const at::Tensor & src, bool non_blocking) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_source_Storage_set__source_Storage(at::Tensor & self, at::Storage source) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_source_Storage_storage_offset_set__source_Storage_storage_offset(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_source_Tensor_set__source_Tensor(at::Tensor & self, const at::Tensor & source) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__set_(at::Tensor & self) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_Scalar_masked_fill__Scalar(at::Tensor & self, const at::Tensor & mask, const at::Scalar & value) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_Tensor_masked_fill__Tensor(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
namespace {

at::Tensor wrapper__view(const at::Tensor & self, at::IntArrayRef size) {
    // No device check


  // DeviceGuard omitted
  return at::native::view(self, size);
}

} // anonymous namespace

at::Tensor & wrapper__put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_alpha_index_add__alpha(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source, const at::Scalar & alpha) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_int_Scalar_index_fill__int_Scalar(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_int_Tensor_index_fill__int_Tensor(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_scatter_src_meta_functional final : public at::meta::structured_scatter_src {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_src(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
structured_scatter_src_meta_functional op;
op.meta(self, dim, index, src);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_src_meta_out final : public at::meta::structured_scatter_src {
    structured_scatter_src_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_out_src_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, at::Tensor & out) {
structured_scatter_src_meta_out op(out);
op.meta(self, dim, index, src);
return out;
}
struct structured_scatter_src_meta_inplace final : public at::meta::structured_scatter_src {
    structured_scatter_src_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter__src(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
structured_scatter_src_meta_inplace op(self);
op.meta(self, dim, index, src);
return self;
}
struct structured_scatter_value_meta_functional final : public at::meta::structured_scatter_value {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_value(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
structured_scatter_value_meta_functional op;
op.meta(self, dim, index, value);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_value_meta_out final : public at::meta::structured_scatter_value {
    structured_scatter_value_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_out_value_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, at::Tensor & out) {
structured_scatter_value_meta_out op(out);
op.meta(self, dim, index, value);
return out;
}
struct structured_scatter_value_meta_inplace final : public at::meta::structured_scatter_value {
    structured_scatter_value_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter__value(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
structured_scatter_value_meta_inplace op(self);
op.meta(self, dim, index, value);
return self;
}
struct structured_scatter_reduce_meta_functional final : public at::meta::structured_scatter_reduce {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_reduce(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
structured_scatter_reduce_meta_functional op;
op.meta(self, dim, index, src, reduce);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_reduce_meta_out final : public at::meta::structured_scatter_reduce {
    structured_scatter_reduce_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_out_reduce_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce, at::Tensor & out) {
structured_scatter_reduce_meta_out op(out);
op.meta(self, dim, index, src, reduce);
return out;
}
struct structured_scatter_reduce_meta_inplace final : public at::meta::structured_scatter_reduce {
    structured_scatter_reduce_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter__reduce(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
structured_scatter_reduce_meta_inplace op(self);
op.meta(self, dim, index, src, reduce);
return self;
}
struct structured_scatter_value_reduce_meta_functional final : public at::meta::structured_scatter_value_reduce {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_value_reduce(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
structured_scatter_value_reduce_meta_functional op;
op.meta(self, dim, index, value, reduce);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_value_reduce_meta_out final : public at::meta::structured_scatter_value_reduce {
    structured_scatter_value_reduce_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_out_value_reduce_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce, at::Tensor & out) {
structured_scatter_value_reduce_meta_out op(out);
op.meta(self, dim, index, value, reduce);
return out;
}
struct structured_scatter_value_reduce_meta_inplace final : public at::meta::structured_scatter_value_reduce {
    structured_scatter_value_reduce_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter__value_reduce(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
structured_scatter_value_reduce_meta_inplace op(self);
op.meta(self, dim, index, value, reduce);
return self;
}
struct structured_scatter_add_meta_functional final : public at::meta::structured_scatter_add {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_scatter_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
structured_scatter_add_meta_functional op;
op.meta(self, dim, index, src);
return std::move(op.outputs_[0]).take();
}
struct structured_scatter_add_meta_out final : public at::meta::structured_scatter_add {
    structured_scatter_add_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_add_out_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, at::Tensor & out) {
structured_scatter_add_meta_out op(out);
op.meta(self, dim, index, src);
return out;
}
struct structured_scatter_add_meta_inplace final : public at::meta::structured_scatter_add {
    structured_scatter_add_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
structured_scatter_add_meta_inplace op(self);
op.meta(self, dim, index, src);
return self;
}
struct structured_eq_Scalar_meta_functional final : public at::meta::structured_eq_Scalar {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_eq_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_eq_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_eq_Scalar_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_eq_Scalar_meta_out final : public at::meta::structured_eq_Scalar {
    structured_eq_Scalar_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_eq_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_eq_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_eq_Scalar_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_eq_Scalar_meta_inplace final : public at::meta::structured_eq_Scalar {
    structured_eq_Scalar_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_eq_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_eq__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_eq_Scalar_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_eq_Tensor_meta_functional final : public at::meta::structured_eq_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_eq_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_eq_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_eq_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_eq_Tensor_meta_out final : public at::meta::structured_eq_Tensor {
    structured_eq_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_eq_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_eq_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_eq_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_eq_Tensor_meta_inplace final : public at::meta::structured_eq_Tensor {
    structured_eq_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_eq_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_eq__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_eq_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_bitwise_and_Tensor_meta_functional final : public at::meta::structured_bitwise_and_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_and_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_and_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_and_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_and_Tensor_meta_out final : public at::meta::structured_bitwise_and_Tensor {
    structured_bitwise_and_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_and_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_and_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_and_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_bitwise_and_Tensor_meta_inplace final : public at::meta::structured_bitwise_and_Tensor {
    structured_bitwise_and_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_and_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_and__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_and_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_bitwise_or_Tensor_meta_functional final : public at::meta::structured_bitwise_or_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_or_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_or_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_or_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_or_Tensor_meta_out final : public at::meta::structured_bitwise_or_Tensor {
    structured_bitwise_or_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_or_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_or_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_or_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_bitwise_or_Tensor_meta_inplace final : public at::meta::structured_bitwise_or_Tensor {
    structured_bitwise_or_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_or_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_or__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_or_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_bitwise_xor_Tensor_meta_functional final : public at::meta::structured_bitwise_xor_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_xor_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_xor_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_xor_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_xor_Tensor_meta_out final : public at::meta::structured_bitwise_xor_Tensor {
    structured_bitwise_xor_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_xor_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_xor_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_xor_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_bitwise_xor_Tensor_meta_inplace final : public at::meta::structured_bitwise_xor_Tensor {
    structured_bitwise_xor_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_xor_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_xor__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_xor_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}

at::Tensor & wrapper_Scalar___ilshift___Scalar(at::Tensor & self, const at::Scalar & other) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_Tensor___ilshift___Tensor(at::Tensor & self, const at::Tensor & other) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_bitwise_left_shift_Tensor_meta_functional final : public at::meta::structured_bitwise_left_shift_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_left_shift_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_left_shift_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_left_shift_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_left_shift_Tensor_meta_out final : public at::meta::structured_bitwise_left_shift_Tensor {
    structured_bitwise_left_shift_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_left_shift_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_left_shift_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_left_shift_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_bitwise_left_shift_Tensor_meta_inplace final : public at::meta::structured_bitwise_left_shift_Tensor {
    structured_bitwise_left_shift_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_left_shift_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_left_shift__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_left_shift_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}

at::Tensor & wrapper_Tensor_Scalar_bitwise_left_shift__Tensor_Scalar(at::Tensor & self, const at::Scalar & other) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_Scalar___irshift___Scalar(at::Tensor & self, const at::Scalar & other) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_Tensor___irshift___Tensor(at::Tensor & self, const at::Tensor & other) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_bitwise_right_shift_Tensor_meta_functional final : public at::meta::structured_bitwise_right_shift_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_right_shift_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_bitwise_right_shift_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_bitwise_right_shift_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_bitwise_right_shift_Tensor_meta_out final : public at::meta::structured_bitwise_right_shift_Tensor {
    structured_bitwise_right_shift_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_right_shift_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_right_shift_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_bitwise_right_shift_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_bitwise_right_shift_Tensor_meta_inplace final : public at::meta::structured_bitwise_right_shift_Tensor {
    structured_bitwise_right_shift_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_bitwise_right_shift_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_bitwise_right_shift__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_bitwise_right_shift_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}

at::Tensor & wrapper_Tensor_Scalar_bitwise_right_shift__Tensor_Scalar(at::Tensor & self, const at::Scalar & other) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__tril_(at::Tensor & self, int64_t diagonal) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__triu_(at::Tensor & self, int64_t diagonal) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_digamma_meta_functional final : public at::meta::structured_digamma {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_digamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_digamma(const at::Tensor & self) {
structured_digamma_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_digamma_meta_out final : public at::meta::structured_digamma {
    structured_digamma_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_digamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_digamma_out_out(const at::Tensor & self, at::Tensor & out) {
structured_digamma_meta_out op(out);
op.meta(self);
return out;
}
struct structured_digamma_meta_inplace final : public at::meta::structured_digamma {
    structured_digamma_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_digamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_digamma_(at::Tensor & self) {
structured_digamma_meta_inplace op(self);
op.meta(self);
return self;
}

at::Tensor & wrapper_Scalar_lerp__Scalar(at::Tensor & self, const at::Tensor & end, const at::Scalar & weight) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper_Tensor_lerp__Tensor(at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__addbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
namespace {

at::Tensor & wrapper_from_random__from(at::Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::random_meta_(self, from, to, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper_to_random__to(at::Tensor & self, int64_t to, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::random_meta_(self, to, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__random_(at::Tensor & self, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::random_meta_(self, generator);
}

} // anonymous namespace
namespace {

at::Tensor & wrapper__uniform_(at::Tensor & self, double from, double to, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::uniform_meta_(self, from, to, generator);
}

} // anonymous namespace

at::Tensor & wrapper__cauchy_(at::Tensor & self, double median, double sigma, c10::optional<at::Generator> generator) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__log_normal_(at::Tensor & self, double mean, double std, c10::optional<at::Generator> generator) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__exponential_(at::Tensor & self, double lambd, c10::optional<at::Generator> generator) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__geometric_(at::Tensor & self, double p, c10::optional<at::Generator> generator) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_ne_Scalar_meta_functional final : public at::meta::structured_ne_Scalar {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ne_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ne_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_ne_Scalar_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_ne_Scalar_meta_out final : public at::meta::structured_ne_Scalar {
    structured_ne_Scalar_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ne_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ne_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_ne_Scalar_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_ne_Scalar_meta_inplace final : public at::meta::structured_ne_Scalar {
    structured_ne_Scalar_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ne_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ne__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_ne_Scalar_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_ne_Tensor_meta_functional final : public at::meta::structured_ne_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ne_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ne_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_ne_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_ne_Tensor_meta_out final : public at::meta::structured_ne_Tensor {
    structured_ne_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ne_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ne_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_ne_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_ne_Tensor_meta_inplace final : public at::meta::structured_ne_Tensor {
    structured_ne_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ne_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ne__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_ne_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_ge_Scalar_meta_functional final : public at::meta::structured_ge_Scalar {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ge_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ge_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_ge_Scalar_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_ge_Scalar_meta_out final : public at::meta::structured_ge_Scalar {
    structured_ge_Scalar_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ge_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ge_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_ge_Scalar_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_ge_Scalar_meta_inplace final : public at::meta::structured_ge_Scalar {
    structured_ge_Scalar_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ge_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ge__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_ge_Scalar_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_ge_Tensor_meta_functional final : public at::meta::structured_ge_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ge_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_ge_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_ge_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_ge_Tensor_meta_out final : public at::meta::structured_ge_Tensor {
    structured_ge_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ge_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ge_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_ge_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_ge_Tensor_meta_inplace final : public at::meta::structured_ge_Tensor {
    structured_ge_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_ge_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_ge__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_ge_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_le_Scalar_meta_functional final : public at::meta::structured_le_Scalar {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_le_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_le_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_le_Scalar_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_le_Scalar_meta_out final : public at::meta::structured_le_Scalar {
    structured_le_Scalar_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_le_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_le_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_le_Scalar_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_le_Scalar_meta_inplace final : public at::meta::structured_le_Scalar {
    structured_le_Scalar_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_le_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_le__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_le_Scalar_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_le_Tensor_meta_functional final : public at::meta::structured_le_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_le_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_le_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_le_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_le_Tensor_meta_out final : public at::meta::structured_le_Tensor {
    structured_le_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_le_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_le_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_le_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_le_Tensor_meta_inplace final : public at::meta::structured_le_Tensor {
    structured_le_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_le_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_le__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_le_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_gt_Scalar_meta_functional final : public at::meta::structured_gt_Scalar {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gt_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gt_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_gt_Scalar_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_gt_Scalar_meta_out final : public at::meta::structured_gt_Scalar {
    structured_gt_Scalar_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gt_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gt_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_gt_Scalar_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_gt_Scalar_meta_inplace final : public at::meta::structured_gt_Scalar {
    structured_gt_Scalar_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gt_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gt__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_gt_Scalar_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_gt_Tensor_meta_functional final : public at::meta::structured_gt_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gt_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gt_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_gt_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_gt_Tensor_meta_out final : public at::meta::structured_gt_Tensor {
    structured_gt_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gt_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gt_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_gt_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_gt_Tensor_meta_inplace final : public at::meta::structured_gt_Tensor {
    structured_gt_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_gt_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gt__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_gt_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_lt_Scalar_meta_functional final : public at::meta::structured_lt_Scalar {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lt_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_lt_Scalar(const at::Tensor & self, const at::Scalar & other) {
structured_lt_Scalar_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_lt_Scalar_meta_out final : public at::meta::structured_lt_Scalar {
    structured_lt_Scalar_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lt_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lt_out_Scalar_out(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
structured_lt_Scalar_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_lt_Scalar_meta_inplace final : public at::meta::structured_lt_Scalar {
    structured_lt_Scalar_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lt_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lt__Scalar(at::Tensor & self, const at::Scalar & other) {
structured_lt_Scalar_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_lt_Tensor_meta_functional final : public at::meta::structured_lt_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lt_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_lt_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_lt_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_lt_Tensor_meta_out final : public at::meta::structured_lt_Tensor {
    structured_lt_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lt_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lt_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_lt_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_lt_Tensor_meta_inplace final : public at::meta::structured_lt_Tensor {
    structured_lt_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lt_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lt__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_lt_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_gather_meta_functional final : public at::meta::structured_gather {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_gather(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
structured_gather_meta_functional op;
op.meta(self, dim, index, sparse_grad);
return std::move(op.outputs_[0]).take();
}
struct structured_gather_meta_out final : public at::meta::structured_gather {
    structured_gather_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_gather_out_out(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad, at::Tensor & out) {
structured_gather_meta_out op(out);
op.meta(self, dim, index, sparse_grad);
return out;
}
struct structured_addcmul_meta_functional final : public at::meta::structured_addcmul {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_addcmul::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
structured_addcmul_meta_functional op;
op.meta(self, tensor1, tensor2, value);
return std::move(op.outputs_[0]).take();
}
struct structured_addcmul_meta_out final : public at::meta::structured_addcmul {
    structured_addcmul_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_addcmul::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addcmul_out_out(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out) {
structured_addcmul_meta_out op(out);
op.meta(self, tensor1, tensor2, value);
return out;
}
struct structured_addcmul_meta_inplace final : public at::meta::structured_addcmul {
    structured_addcmul_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_addcmul::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
structured_addcmul_meta_inplace op(self);
op.meta(self, tensor1, tensor2, value);
return self;
}
struct structured_addcdiv_meta_functional final : public at::meta::structured_addcdiv {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_addcdiv::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
structured_addcdiv_meta_functional op;
op.meta(self, tensor1, tensor2, value);
return std::move(op.outputs_[0]).take();
}
struct structured_addcdiv_meta_out final : public at::meta::structured_addcdiv {
    structured_addcdiv_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_addcdiv::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addcdiv_out_out(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out) {
structured_addcdiv_meta_out op(out);
op.meta(self, tensor1, tensor2, value);
return out;
}
struct structured_addcdiv_meta_inplace final : public at::meta::structured_addcdiv {
    structured_addcdiv_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_addcdiv::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
structured_addcdiv_meta_inplace op(self);
op.meta(self, tensor1, tensor2, value);
return self;
}
struct structured_lgamma_meta_functional final : public at::meta::structured_lgamma {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lgamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_lgamma(const at::Tensor & self) {
structured_lgamma_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_lgamma_meta_out final : public at::meta::structured_lgamma {
    structured_lgamma_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lgamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lgamma_out_out(const at::Tensor & self, at::Tensor & out) {
structured_lgamma_meta_out op(out);
op.meta(self);
return out;
}
struct structured_lgamma_meta_inplace final : public at::meta::structured_lgamma {
    structured_lgamma_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_lgamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_lgamma_(at::Tensor & self) {
structured_lgamma_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_polygamma_meta_functional final : public at::meta::structured_polygamma {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_polygamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_polygamma(int64_t n, const at::Tensor & self) {
structured_polygamma_meta_functional op;
op.meta(n, self);
return std::move(op.outputs_[0]).take();
}
struct structured_polygamma_meta_out final : public at::meta::structured_polygamma {
    structured_polygamma_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_polygamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_polygamma_out_out(int64_t n, const at::Tensor & self, at::Tensor & out) {
structured_polygamma_meta_out op(out);
op.meta(n, self);
return out;
}
struct structured_erfinv_meta_functional final : public at::meta::structured_erfinv {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_erfinv::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_erfinv(const at::Tensor & self) {
structured_erfinv_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_erfinv_meta_out final : public at::meta::structured_erfinv {
    structured_erfinv_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_erfinv::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erfinv_out_out(const at::Tensor & self, at::Tensor & out) {
structured_erfinv_meta_out op(out);
op.meta(self);
return out;
}
struct structured_erfinv_meta_inplace final : public at::meta::structured_erfinv {
    structured_erfinv_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_erfinv::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_erfinv_(at::Tensor & self) {
structured_erfinv_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_i0_meta_functional final : public at::meta::structured_i0 {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_i0::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_i0(const at::Tensor & self) {
structured_i0_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_i0_meta_out final : public at::meta::structured_i0 {
    structured_i0_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_i0::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_i0_out_out(const at::Tensor & self, at::Tensor & out) {
structured_i0_meta_out op(out);
op.meta(self);
return out;
}
struct structured_i0_meta_inplace final : public at::meta::structured_i0 {
    structured_i0_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_i0::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_i0_(at::Tensor & self) {
structured_i0_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_sign_meta_functional final : public at::meta::structured_sign {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sign::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sign(const at::Tensor & self) {
structured_sign_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_sign_meta_out final : public at::meta::structured_sign {
    structured_sign_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sign::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sign_out_out(const at::Tensor & self, at::Tensor & out) {
structured_sign_meta_out op(out);
op.meta(self);
return out;
}
struct structured_sign_meta_inplace final : public at::meta::structured_sign {
    structured_sign_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sign::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sign_(at::Tensor & self) {
structured_sign_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_signbit_meta_functional final : public at::meta::structured_signbit {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_signbit::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_signbit(const at::Tensor & self) {
structured_signbit_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_signbit_meta_out final : public at::meta::structured_signbit {
    structured_signbit_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_signbit::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_signbit_out_out(const at::Tensor & self, at::Tensor & out) {
structured_signbit_meta_out op(out);
op.meta(self);
return out;
}
struct structured_atan2_meta_functional final : public at::meta::structured_atan2 {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_atan2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_atan2(const at::Tensor & self, const at::Tensor & other) {
structured_atan2_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_atan2_meta_out final : public at::meta::structured_atan2 {
    structured_atan2_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_atan2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atan2_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_atan2_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_atan2_meta_inplace final : public at::meta::structured_atan2 {
    structured_atan2_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_atan2::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_atan2_(at::Tensor & self, const at::Tensor & other) {
structured_atan2_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_fmod_Tensor_meta_functional final : public at::meta::structured_fmod_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_fmod_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_fmod_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_fmod_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_fmod_Tensor_meta_out final : public at::meta::structured_fmod_Tensor {
    structured_fmod_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_fmod_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_fmod_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_fmod_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_fmod_Tensor_meta_inplace final : public at::meta::structured_fmod_Tensor {
    structured_fmod_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_fmod_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_fmod__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_fmod_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_hypot_meta_functional final : public at::meta::structured_hypot {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hypot::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hypot(const at::Tensor & self, const at::Tensor & other) {
structured_hypot_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_hypot_meta_out final : public at::meta::structured_hypot {
    structured_hypot_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hypot::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hypot_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_hypot_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_hypot_meta_inplace final : public at::meta::structured_hypot {
    structured_hypot_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hypot::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hypot_(at::Tensor & self, const at::Tensor & other) {
structured_hypot_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_igamma_meta_functional final : public at::meta::structured_igamma {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_igamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_igamma(const at::Tensor & self, const at::Tensor & other) {
structured_igamma_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_igamma_meta_out final : public at::meta::structured_igamma {
    structured_igamma_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_igamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_igamma_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_igamma_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_igamma_meta_inplace final : public at::meta::structured_igamma {
    structured_igamma_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_igamma::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_igamma_(at::Tensor & self, const at::Tensor & other) {
structured_igamma_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_igammac_meta_functional final : public at::meta::structured_igammac {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_igammac::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_igammac(const at::Tensor & self, const at::Tensor & other) {
structured_igammac_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_igammac_meta_out final : public at::meta::structured_igammac {
    structured_igammac_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_igammac::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_igammac_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_igammac_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_igammac_meta_inplace final : public at::meta::structured_igammac {
    structured_igammac_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_igammac::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_igammac_(at::Tensor & self, const at::Tensor & other) {
structured_igammac_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_nextafter_meta_functional final : public at::meta::structured_nextafter {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_nextafter::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_nextafter(const at::Tensor & self, const at::Tensor & other) {
structured_nextafter_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_nextafter_meta_out final : public at::meta::structured_nextafter {
    structured_nextafter_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_nextafter::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_nextafter_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_nextafter_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_nextafter_meta_inplace final : public at::meta::structured_nextafter {
    structured_nextafter_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_nextafter::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_nextafter_(at::Tensor & self, const at::Tensor & other) {
structured_nextafter_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_remainder_Tensor_meta_functional final : public at::meta::structured_remainder_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_remainder_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_remainder_Tensor(const at::Tensor & self, const at::Tensor & other) {
structured_remainder_Tensor_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_remainder_Tensor_meta_out final : public at::meta::structured_remainder_Tensor {
    structured_remainder_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_remainder_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_remainder_out_Tensor_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_remainder_Tensor_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_remainder_Tensor_meta_inplace final : public at::meta::structured_remainder_Tensor {
    structured_remainder_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_remainder_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_remainder__Tensor(at::Tensor & self, const at::Tensor & other) {
structured_remainder_Tensor_meta_inplace op(self);
op.meta(self, other);
return self;
}
struct structured_fmin_meta_functional final : public at::meta::structured_fmin {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_fmin::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_fmin(const at::Tensor & self, const at::Tensor & other) {
structured_fmin_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_fmin_meta_out final : public at::meta::structured_fmin {
    structured_fmin_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_fmin::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_fmin_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_fmin_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_fmax_meta_functional final : public at::meta::structured_fmax {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_fmax::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_fmax(const at::Tensor & self, const at::Tensor & other) {
structured_fmax_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_fmax_meta_out final : public at::meta::structured_fmax {
    structured_fmax_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_fmax::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_fmax_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_fmax_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_maximum_meta_functional final : public at::meta::structured_maximum {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_maximum::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_maximum(const at::Tensor & self, const at::Tensor & other) {
structured_maximum_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_maximum_meta_out final : public at::meta::structured_maximum {
    structured_maximum_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_maximum::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_maximum_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_maximum_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_minimum_meta_functional final : public at::meta::structured_minimum {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_minimum::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_minimum(const at::Tensor & self, const at::Tensor & other) {
structured_minimum_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_minimum_meta_out final : public at::meta::structured_minimum {
    structured_minimum_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_minimum::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_minimum_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_minimum_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_topk_meta_functional final : public at::meta::structured_topk {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
structured_topk_meta_functional op;
op.meta(self, k, dim, largest, sorted);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_topk_meta_out final : public at::meta::structured_topk {
    structured_topk_meta_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_topk_out_values(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, at::Tensor & values, at::Tensor & indices) {
structured_topk_meta_out op(values, indices);
op.meta(self, k, dim, largest, sorted);
return std::forward_as_tuple(values, indices);
}
struct structured_all_meta_functional final : public at::meta::structured_all {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_all(const at::Tensor & self) {
structured_all_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_all_meta_out final : public at::meta::structured_all {
    structured_all_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_all_out_all_out(const at::Tensor & self, at::Tensor & out) {
structured_all_meta_out op(out);
op.meta(self);
return out;
}
struct structured_any_meta_functional final : public at::meta::structured_any {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_any(const at::Tensor & self) {
structured_any_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_any_meta_out final : public at::meta::structured_any {
    structured_any_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_any_out_all_out(const at::Tensor & self, at::Tensor & out) {
structured_any_meta_out op(out);
op.meta(self);
return out;
}
struct structured_renorm_meta_functional final : public at::meta::structured_renorm {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_renorm(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
structured_renorm_meta_functional op;
op.meta(self, p, dim, maxnorm);
return std::move(op.outputs_[0]).take();
}
struct structured_renorm_meta_out final : public at::meta::structured_renorm {
    structured_renorm_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_renorm_out_out(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm, at::Tensor & out) {
structured_renorm_meta_out op(out);
op.meta(self, p, dim, maxnorm);
return out;
}
struct structured_renorm_meta_inplace final : public at::meta::structured_renorm {
    structured_renorm_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_renorm_(at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
structured_renorm_meta_inplace op(self);
op.meta(self, p, dim, maxnorm);
return self;
}
struct structured_pow_Tensor_Tensor_meta_functional final : public at::meta::structured_pow_Tensor_Tensor {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_pow_Tensor_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_pow_Tensor_Tensor(const at::Tensor & self, const at::Tensor & exponent) {
structured_pow_Tensor_Tensor_meta_functional op;
op.meta(self, exponent);
return std::move(op.outputs_[0]).take();
}
struct structured_pow_Tensor_Tensor_meta_out final : public at::meta::structured_pow_Tensor_Tensor {
    structured_pow_Tensor_Tensor_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_pow_Tensor_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow_out_Tensor_Tensor_out(const at::Tensor & self, const at::Tensor & exponent, at::Tensor & out) {
structured_pow_Tensor_Tensor_meta_out op(out);
op.meta(self, exponent);
return out;
}
struct structured_pow_Tensor_Tensor_meta_inplace final : public at::meta::structured_pow_Tensor_Tensor {
    structured_pow_Tensor_Tensor_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_pow_Tensor_Tensor::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow__Tensor(at::Tensor & self, const at::Tensor & exponent) {
structured_pow_Tensor_Tensor_meta_inplace op(self);
op.meta(self, exponent);
return self;
}
struct structured_pow_Scalar_meta_functional final : public at::meta::structured_pow_Scalar {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_pow_Scalar(const at::Scalar & self, const at::Tensor & exponent) {
structured_pow_Scalar_meta_functional op;
op.meta(self, exponent);
return std::move(op.outputs_[0]).take();
}
struct structured_pow_Scalar_meta_out final : public at::meta::structured_pow_Scalar {
    structured_pow_Scalar_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow_out_Scalar_out(const at::Scalar & self, const at::Tensor & exponent, at::Tensor & out) {
structured_pow_Scalar_meta_out op(out);
op.meta(self, exponent);
return out;
}
struct structured_pow_Tensor_Scalar_meta_functional final : public at::meta::structured_pow_Tensor_Scalar {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_pow_Tensor_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_pow_Tensor_Scalar(const at::Tensor & self, const at::Scalar & exponent) {
structured_pow_Tensor_Scalar_meta_functional op;
op.meta(self, exponent);
return std::move(op.outputs_[0]).take();
}
struct structured_pow_Tensor_Scalar_meta_out final : public at::meta::structured_pow_Tensor_Scalar {
    structured_pow_Tensor_Scalar_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_pow_Tensor_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow_out_Tensor_Scalar_out(const at::Tensor & self, const at::Scalar & exponent, at::Tensor & out) {
structured_pow_Tensor_Scalar_meta_out op(out);
op.meta(self, exponent);
return out;
}
struct structured_pow_Tensor_Scalar_meta_inplace final : public at::meta::structured_pow_Tensor_Scalar {
    structured_pow_Tensor_Scalar_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_pow_Tensor_Scalar::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_pow__Scalar(at::Tensor & self, const at::Scalar & exponent) {
structured_pow_Tensor_Scalar_meta_inplace op(self);
op.meta(self, exponent);
return self;
}
namespace {

at::Tensor & wrapper__normal_(at::Tensor & self, double mean, double std, c10::optional<at::Generator> generator) {
    // No device check


  // DeviceGuard omitted
  return at::native::normal_meta_(self, mean, std, generator);
}

} // anonymous namespace

at::Tensor & wrapper___index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper___amp_update_scale_(at::Tensor & self, at::Tensor & growth_tracker, const at::Tensor & found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured__convert_indices_from_coo_to_csr_meta_functional final : public at::meta::structured__convert_indices_from_coo_to_csr {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper__convert_indices_from_coo_to_csr(const at::Tensor & self, int64_t size, bool out_int32) {
structured__convert_indices_from_coo_to_csr_meta_functional op;
op.meta(self, size, out_int32);
return std::move(op.outputs_[0]).take();
}
struct structured__convert_indices_from_coo_to_csr_meta_out final : public at::meta::structured__convert_indices_from_coo_to_csr {
    structured__convert_indices_from_coo_to_csr_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper__convert_indices_from_coo_to_csr_out_out(const at::Tensor & self, int64_t size, bool out_int32, at::Tensor & out) {
structured__convert_indices_from_coo_to_csr_meta_out op(out);
op.meta(self, size, out_int32);
return out;
}
struct structured_nll_loss_forward_meta_functional final : public at::meta::structured_nll_loss_forward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index) {
structured_nll_loss_forward_meta_functional op;
op.meta(self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_nll_loss_forward_meta_out final : public at::meta::structured_nll_loss_forward {
    structured_nll_loss_forward_meta_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_nll_loss_forward_out_output(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & output, at::Tensor & total_weight) {
structured_nll_loss_forward_meta_out op(output, total_weight);
op.meta(self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index);
return std::forward_as_tuple(output, total_weight);
}
struct structured_nll_loss_backward_meta_functional final : public at::meta::structured_nll_loss_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
structured_nll_loss_backward_meta_functional op;
op.meta(grad_output, self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index, total_weight);
return std::move(op.outputs_[0]).take();
}
struct structured_nll_loss_backward_meta_out final : public at::meta::structured_nll_loss_backward {
    structured_nll_loss_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_nll_loss_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight, at::Tensor & grad_input) {
structured_nll_loss_backward_meta_out op(grad_input);
op.meta(grad_output, self, target, ((weight.has_value() && (*weight).defined()) ? at::OptionalTensorRef(*weight) : at::OptionalTensorRef()), reduction, ignore_index, total_weight);
return grad_input;
}
struct structured_elu_meta_functional final : public at::meta::structured_elu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_elu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_elu(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
structured_elu_meta_functional op;
op.meta(self, alpha, scale, input_scale);
return std::move(op.outputs_[0]).take();
}
struct structured_elu_meta_out final : public at::meta::structured_elu {
    structured_elu_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_elu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_elu_out_out(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, at::Tensor & out) {
structured_elu_meta_out op(out);
op.meta(self, alpha, scale, input_scale);
return out;
}
struct structured_elu_meta_inplace final : public at::meta::structured_elu {
    structured_elu_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_elu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_elu_(at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
structured_elu_meta_inplace op(self);
op.meta(self, alpha, scale, input_scale);
return self;
}
struct structured_elu_backward_meta_functional final : public at::meta::structured_elu_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_elu_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_elu_backward(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result) {
structured_elu_backward_meta_functional op;
op.meta(grad_output, alpha, scale, input_scale, is_result, self_or_result);
return std::move(op.outputs_[0]).take();
}
struct structured_elu_backward_meta_out final : public at::meta::structured_elu_backward {
    structured_elu_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_elu_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_elu_backward_out_grad_input(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result, at::Tensor & grad_input) {
structured_elu_backward_meta_out op(grad_input);
op.meta(grad_output, alpha, scale, input_scale, is_result, self_or_result);
return grad_input;
}
struct structured_glu_meta_functional final : public at::meta::structured_glu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_glu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_glu(const at::Tensor & self, int64_t dim) {
structured_glu_meta_functional op;
op.meta(self, dim);
return std::move(op.outputs_[0]).take();
}
struct structured_glu_meta_out final : public at::meta::structured_glu {
    structured_glu_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_glu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_glu_out_out(const at::Tensor & self, int64_t dim, at::Tensor & out) {
structured_glu_meta_out op(out);
op.meta(self, dim);
return out;
}
struct structured_hardsigmoid_meta_functional final : public at::meta::structured_hardsigmoid {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hardsigmoid::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hardsigmoid(const at::Tensor & self) {
structured_hardsigmoid_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_hardsigmoid_meta_out final : public at::meta::structured_hardsigmoid {
    structured_hardsigmoid_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hardsigmoid::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardsigmoid_out_out(const at::Tensor & self, at::Tensor & out) {
structured_hardsigmoid_meta_out op(out);
op.meta(self);
return out;
}
struct structured_hardsigmoid_meta_inplace final : public at::meta::structured_hardsigmoid {
    structured_hardsigmoid_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hardsigmoid::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardsigmoid_(at::Tensor & self) {
structured_hardsigmoid_meta_inplace op(self);
op.meta(self);
return self;
}
struct structured_hardsigmoid_backward_meta_functional final : public at::meta::structured_hardsigmoid_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hardsigmoid_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_hardsigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self) {
structured_hardsigmoid_backward_meta_functional op;
op.meta(grad_output, self);
return std::move(op.outputs_[0]).take();
}
struct structured_hardsigmoid_backward_meta_out final : public at::meta::structured_hardsigmoid_backward {
    structured_hardsigmoid_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_hardsigmoid_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_hardsigmoid_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
structured_hardsigmoid_backward_meta_out op(grad_input);
op.meta(grad_output, self);
return grad_input;
}

at::Tensor & wrapper__hardtanh_(at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

at::Tensor & wrapper__hardswish_(at::Tensor & self) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_leaky_relu_meta_functional final : public at::meta::structured_leaky_relu {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_leaky_relu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_leaky_relu(const at::Tensor & self, const at::Scalar & negative_slope) {
structured_leaky_relu_meta_functional op;
op.meta(self, negative_slope);
return std::move(op.outputs_[0]).take();
}
struct structured_leaky_relu_meta_out final : public at::meta::structured_leaky_relu {
    structured_leaky_relu_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_leaky_relu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_leaky_relu_out_out(const at::Tensor & self, const at::Scalar & negative_slope, at::Tensor & out) {
structured_leaky_relu_meta_out op(out);
op.meta(self, negative_slope);
return out;
}
struct structured_leaky_relu_meta_inplace final : public at::meta::structured_leaky_relu {
    structured_leaky_relu_meta_inplace(Tensor& self) : outputs_{std::ref(self)} {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_leaky_relu::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_leaky_relu_(at::Tensor & self, const at::Scalar & negative_slope) {
structured_leaky_relu_meta_inplace op(self);
op.meta(self, negative_slope);
return self;
}
struct structured_leaky_relu_backward_meta_functional final : public at::meta::structured_leaky_relu_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_leaky_relu_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result) {
structured_leaky_relu_backward_meta_functional op;
op.meta(grad_output, self, negative_slope, self_is_result);
return std::move(op.outputs_[0]).take();
}
struct structured_leaky_relu_backward_meta_out final : public at::meta::structured_leaky_relu_backward {
    structured_leaky_relu_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_leaky_relu_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_leaky_relu_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result, at::Tensor & grad_input) {
structured_leaky_relu_backward_meta_out op(grad_input);
op.meta(grad_output, self, negative_slope, self_is_result);
return grad_input;
}

at::Tensor & wrapper__rrelu_with_noise_(at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, c10::optional<at::Generator> generator) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}
struct structured_softplus_meta_functional final : public at::meta::structured_softplus {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_softplus::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_softplus(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold) {
structured_softplus_meta_functional op;
op.meta(self, beta, threshold);
return std::move(op.outputs_[0]).take();
}
struct structured_softplus_meta_out final : public at::meta::structured_softplus {
    structured_softplus_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_softplus::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_softplus_out_out(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, at::Tensor & out) {
structured_softplus_meta_out op(out);
op.meta(self, beta, threshold);
return out;
}
struct structured_softplus_backward_meta_functional final : public at::meta::structured_softplus_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_softplus_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output) {
structured_softplus_backward_meta_functional op;
op.meta(grad_output, self, beta, threshold, output);
return std::move(op.outputs_[0]).take();
}
struct structured_softplus_backward_meta_out final : public at::meta::structured_softplus_backward {
    structured_softplus_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_softplus_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_softplus_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output, at::Tensor & grad_input) {
structured_softplus_backward_meta_out op(grad_input);
op.meta(grad_output, self, beta, threshold, output);
return grad_input;
}
struct structured_softshrink_meta_functional final : public at::meta::structured_softshrink {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_softshrink::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_softshrink(const at::Tensor & self, const at::Scalar & lambd) {
structured_softshrink_meta_functional op;
op.meta(self, lambd);
return std::move(op.outputs_[0]).take();
}
struct structured_softshrink_meta_out final : public at::meta::structured_softshrink {
    structured_softshrink_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_softshrink::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_softshrink_out_out(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out) {
structured_softshrink_meta_out op(out);
op.meta(self, lambd);
return out;
}
struct structured_softshrink_backward_meta_functional final : public at::meta::structured_softshrink_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_softshrink_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd) {
structured_softshrink_backward_meta_functional op;
op.meta(grad_output, self, lambd);
return std::move(op.outputs_[0]).take();
}
struct structured_softshrink_backward_meta_out final : public at::meta::structured_softshrink_backward {
    structured_softshrink_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_softshrink_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_softshrink_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input) {
structured_softshrink_backward_meta_out op(grad_input);
op.meta(grad_output, self, lambd);
return grad_input;
}
struct structured_adaptive_max_pool2d_meta_functional final : public at::meta::structured_adaptive_max_pool2d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_adaptive_max_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
structured_adaptive_max_pool2d_meta_functional op;
op.meta(self, output_size);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_adaptive_max_pool2d_meta_out final : public at::meta::structured_adaptive_max_pool2d {
    structured_adaptive_max_pool2d_meta_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_adaptive_max_pool2d_out_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices) {
structured_adaptive_max_pool2d_meta_out op(out, indices);
op.meta(self, output_size);
return std::forward_as_tuple(out, indices);
}
struct structured_adaptive_max_pool2d_backward_meta_functional final : public at::meta::structured_adaptive_max_pool2d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
structured_adaptive_max_pool2d_backward_meta_functional op;
op.meta(grad_output, self, indices);
return std::move(op.outputs_[0]).take();
}
struct structured_adaptive_max_pool2d_backward_meta_out final : public at::meta::structured_adaptive_max_pool2d_backward {
    structured_adaptive_max_pool2d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_adaptive_max_pool2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input) {
structured_adaptive_max_pool2d_backward_meta_out op(grad_input);
op.meta(grad_output, self, indices);
return grad_input;
}
struct structured_adaptive_max_pool3d_meta_functional final : public at::meta::structured_adaptive_max_pool3d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_adaptive_max_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
structured_adaptive_max_pool3d_meta_functional op;
op.meta(self, output_size);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_adaptive_max_pool3d_meta_out final : public at::meta::structured_adaptive_max_pool3d {
    structured_adaptive_max_pool3d_meta_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_adaptive_max_pool3d_out_out(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices) {
structured_adaptive_max_pool3d_meta_out op(out, indices);
op.meta(self, output_size);
return std::forward_as_tuple(out, indices);
}
struct structured_adaptive_max_pool3d_backward_meta_functional final : public at::meta::structured_adaptive_max_pool3d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
structured_adaptive_max_pool3d_backward_meta_functional op;
op.meta(grad_output, self, indices);
return std::move(op.outputs_[0]).take();
}
struct structured_adaptive_max_pool3d_backward_meta_out final : public at::meta::structured_adaptive_max_pool3d_backward {
    structured_adaptive_max_pool3d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_adaptive_max_pool3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input) {
structured_adaptive_max_pool3d_backward_meta_out op(grad_input);
op.meta(grad_output, self, indices);
return grad_input;
}
struct structured_avg_pool2d_meta_functional final : public at::meta::structured_avg_pool2d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
structured_avg_pool2d_meta_functional op;
auto precompute = op.meta(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
(void)precompute;
return std::move(op.outputs_[0]).take();
}
struct structured_avg_pool2d_meta_out final : public at::meta::structured_avg_pool2d {
    structured_avg_pool2d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_avg_pool2d_out_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & out) {
structured_avg_pool2d_meta_out op(out);
auto precompute = op.meta(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
(void)precompute;
return out;
}
struct structured_avg_pool2d_backward_meta_functional final : public at::meta::structured_avg_pool2d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
structured_avg_pool2d_backward_meta_functional op;
op.meta(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
return std::move(op.outputs_[0]).take();
}
struct structured_avg_pool2d_backward_meta_out final : public at::meta::structured_avg_pool2d_backward {
    structured_avg_pool2d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_avg_pool2d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & grad_input) {
structured_avg_pool2d_backward_meta_out op(grad_input);
op.meta(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
return grad_input;
}
struct structured_avg_pool3d_meta_functional final : public at::meta::structured_avg_pool3d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
structured_avg_pool3d_meta_functional op;
op.meta(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
return std::move(op.outputs_[0]).take();
}
struct structured_avg_pool3d_meta_out final : public at::meta::structured_avg_pool3d {
    structured_avg_pool3d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_avg_pool3d_out_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & out) {
structured_avg_pool3d_meta_out op(out);
op.meta(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
return out;
}
struct structured_avg_pool3d_backward_meta_functional final : public at::meta::structured_avg_pool3d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
structured_avg_pool3d_backward_meta_functional op;
op.meta(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
return std::move(op.outputs_[0]).take();
}
struct structured_avg_pool3d_backward_meta_out final : public at::meta::structured_avg_pool3d_backward {
    structured_avg_pool3d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_avg_pool3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & grad_input) {
structured_avg_pool3d_backward_meta_out op(grad_input);
op.meta(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
return grad_input;
}
struct structured_fractional_max_pool2d_meta_functional final : public at::meta::structured_fractional_max_pool2d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_fractional_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
structured_fractional_max_pool2d_meta_functional op;
op.meta(self, kernel_size, output_size, random_samples);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_fractional_max_pool2d_meta_out final : public at::meta::structured_fractional_max_pool2d {
    structured_fractional_max_pool2d_meta_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_fractional_max_pool2d_out_output(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples, at::Tensor & output, at::Tensor & indices) {
structured_fractional_max_pool2d_meta_out op(output, indices);
op.meta(self, kernel_size, output_size, random_samples);
return std::forward_as_tuple(output, indices);
}
struct structured_max_pool2d_with_indices_meta_functional final : public at::meta::structured_max_pool2d_with_indices {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor,at::Tensor> wrapper_max_pool2d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
structured_max_pool2d_with_indices_meta_functional op;
op.meta(self, kernel_size, stride, padding, dilation, ceil_mode);
return std::make_tuple(std::move(op.outputs_[0]).take(), std::move(op.outputs_[1]).take());
}
struct structured_max_pool2d_with_indices_meta_out final : public at::meta::structured_max_pool2d_with_indices {
    structured_max_pool2d_with_indices_meta_out(Tensor& out0, Tensor& out1) : outputs_{ std::ref(out0), std::ref(out1) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 2> outputs_;
};

::std::tuple<at::Tensor &,at::Tensor &> wrapper_max_pool2d_with_indices_out_out(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, at::Tensor & out, at::Tensor & indices) {
structured_max_pool2d_with_indices_meta_out op(out, indices);
op.meta(self, kernel_size, stride, padding, dilation, ceil_mode);
return std::forward_as_tuple(out, indices);
}
struct structured_max_pool2d_with_indices_backward_meta_functional final : public at::meta::structured_max_pool2d_with_indices_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
structured_max_pool2d_with_indices_backward_meta_functional op;
op.meta(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
return std::move(op.outputs_[0]).take();
}
struct structured_max_pool2d_with_indices_backward_meta_out final : public at::meta::structured_max_pool2d_with_indices_backward {
    structured_max_pool2d_with_indices_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_max_pool2d_with_indices_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices, at::Tensor & grad_input) {
structured_max_pool2d_with_indices_backward_meta_out op(grad_input);
op.meta(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
return grad_input;
}
struct structured_reflection_pad1d_meta_functional final : public at::meta::structured_reflection_pad1d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
structured_reflection_pad1d_meta_functional op;
op.meta(self, padding);
return std::move(op.outputs_[0]).take();
}
struct structured_reflection_pad1d_meta_out final : public at::meta::structured_reflection_pad1d {
    structured_reflection_pad1d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reflection_pad1d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_reflection_pad1d_meta_out op(out);
op.meta(self, padding);
return out;
}
struct structured_reflection_pad1d_backward_meta_functional final : public at::meta::structured_reflection_pad1d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reflection_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
structured_reflection_pad1d_backward_meta_functional op;
op.meta(grad_output, self, padding);
return std::move(op.outputs_[0]).take();
}
struct structured_reflection_pad1d_backward_meta_out final : public at::meta::structured_reflection_pad1d_backward {
    structured_reflection_pad1d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reflection_pad1d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
structured_reflection_pad1d_backward_meta_out op(grad_input);
op.meta(grad_output, self, padding);
return grad_input;
}
struct structured_reflection_pad3d_meta_functional final : public at::meta::structured_reflection_pad3d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reflection_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
structured_reflection_pad3d_meta_functional op;
op.meta(self, padding);
return std::move(op.outputs_[0]).take();
}
struct structured_reflection_pad3d_meta_out final : public at::meta::structured_reflection_pad3d {
    structured_reflection_pad3d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reflection_pad3d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_reflection_pad3d_meta_out op(out);
op.meta(self, padding);
return out;
}
struct structured_reflection_pad3d_backward_meta_functional final : public at::meta::structured_reflection_pad3d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_reflection_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
structured_reflection_pad3d_backward_meta_functional op;
op.meta(grad_output, self, padding);
return std::move(op.outputs_[0]).take();
}
struct structured_reflection_pad3d_backward_meta_out final : public at::meta::structured_reflection_pad3d_backward {
    structured_reflection_pad3d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_reflection_pad3d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
structured_reflection_pad3d_backward_meta_out op(grad_input);
op.meta(grad_output, self, padding);
return grad_input;
}
struct structured_replication_pad1d_meta_functional final : public at::meta::structured_replication_pad1d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_replication_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
structured_replication_pad1d_meta_functional op;
op.meta(self, padding);
return std::move(op.outputs_[0]).take();
}
struct structured_replication_pad1d_meta_out final : public at::meta::structured_replication_pad1d {
    structured_replication_pad1d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_replication_pad1d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_replication_pad1d_meta_out op(out);
op.meta(self, padding);
return out;
}
struct structured_replication_pad1d_backward_meta_functional final : public at::meta::structured_replication_pad1d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_replication_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
structured_replication_pad1d_backward_meta_functional op;
op.meta(grad_output, self, padding);
return std::move(op.outputs_[0]).take();
}
struct structured_replication_pad1d_backward_meta_out final : public at::meta::structured_replication_pad1d_backward {
    structured_replication_pad1d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_replication_pad1d_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
structured_replication_pad1d_backward_meta_out op(grad_input);
op.meta(grad_output, self, padding);
return grad_input;
}
struct structured_replication_pad2d_meta_functional final : public at::meta::structured_replication_pad2d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_replication_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
structured_replication_pad2d_meta_functional op;
op.meta(self, padding);
return std::move(op.outputs_[0]).take();
}
struct structured_replication_pad2d_meta_out final : public at::meta::structured_replication_pad2d {
    structured_replication_pad2d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_replication_pad2d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_replication_pad2d_meta_out op(out);
op.meta(self, padding);
return out;
}
struct structured_replication_pad3d_meta_functional final : public at::meta::structured_replication_pad3d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_replication_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
structured_replication_pad3d_meta_functional op;
op.meta(self, padding);
return std::move(op.outputs_[0]).take();
}
struct structured_replication_pad3d_meta_out final : public at::meta::structured_replication_pad3d {
    structured_replication_pad3d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_replication_pad3d_out_out(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
structured_replication_pad3d_meta_out op(out);
op.meta(self, padding);
return out;
}
struct structured_upsample_linear1d_meta_functional final : public at::meta::structured_upsample_linear1d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_linear1d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
structured_upsample_linear1d_meta_functional op;
op.meta(self, output_size, align_corners, scales);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_linear1d_meta_out final : public at::meta::structured_upsample_linear1d {
    structured_upsample_linear1d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_linear1d_out_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales, at::Tensor & out) {
structured_upsample_linear1d_meta_out op(out);
op.meta(self, output_size, align_corners, scales);
return out;
}
struct structured_upsample_linear1d_backward_meta_functional final : public at::meta::structured_upsample_linear1d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_linear1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
structured_upsample_linear1d_backward_meta_functional op;
op.meta(grad_output, output_size, input_size, align_corners, scales);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_linear1d_backward_meta_out final : public at::meta::structured_upsample_linear1d_backward {
    structured_upsample_linear1d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_linear1d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales, at::Tensor & grad_input) {
structured_upsample_linear1d_backward_meta_out op(grad_input);
op.meta(grad_output, output_size, input_size, align_corners, scales);
return grad_input;
}
struct structured_upsample_bilinear2d_meta_functional final : public at::meta::structured_upsample_bilinear2d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_bilinear2d_meta_functional op;
op.meta(self, output_size, align_corners, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_bilinear2d_meta_out final : public at::meta::structured_upsample_bilinear2d {
    structured_upsample_bilinear2d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_bilinear2d_out_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_bilinear2d_meta_out op(out);
op.meta(self, output_size, align_corners, scales_h, scales_w);
return out;
}
struct structured_upsample_bilinear2d_backward_meta_functional final : public at::meta::structured_upsample_bilinear2d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_bilinear2d_backward_meta_functional op;
op.meta(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_bilinear2d_backward_meta_out final : public at::meta::structured_upsample_bilinear2d_backward {
    structured_upsample_bilinear2d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_bilinear2d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_bilinear2d_backward_meta_out op(grad_input);
op.meta(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
return grad_input;
}
struct structured_upsample_bicubic2d_meta_functional final : public at::meta::structured_upsample_bicubic2d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_bicubic2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_bicubic2d_meta_functional op;
op.meta(self, output_size, align_corners, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_bicubic2d_meta_out final : public at::meta::structured_upsample_bicubic2d {
    structured_upsample_bicubic2d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_bicubic2d_out_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_bicubic2d_meta_out op(out);
op.meta(self, output_size, align_corners, scales_h, scales_w);
return out;
}
struct structured_upsample_bicubic2d_backward_meta_functional final : public at::meta::structured_upsample_bicubic2d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_bicubic2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_bicubic2d_backward_meta_functional op;
op.meta(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_bicubic2d_backward_meta_out final : public at::meta::structured_upsample_bicubic2d_backward {
    structured_upsample_bicubic2d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_bicubic2d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_bicubic2d_backward_meta_out op(grad_input);
op.meta(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
return grad_input;
}
struct structured_upsample_trilinear3d_meta_functional final : public at::meta::structured_upsample_trilinear3d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_trilinear3d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_trilinear3d_meta_functional op;
op.meta(self, output_size, align_corners, scales_d, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_trilinear3d_meta_out final : public at::meta::structured_upsample_trilinear3d {
    structured_upsample_trilinear3d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_trilinear3d_out_out(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_trilinear3d_meta_out op(out);
op.meta(self, output_size, align_corners, scales_d, scales_h, scales_w);
return out;
}
struct structured_upsample_trilinear3d_backward_meta_functional final : public at::meta::structured_upsample_trilinear3d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_trilinear3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_trilinear3d_backward_meta_functional op;
op.meta(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_trilinear3d_backward_meta_out final : public at::meta::structured_upsample_trilinear3d_backward {
    structured_upsample_trilinear3d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_trilinear3d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_trilinear3d_backward_meta_out op(grad_input);
op.meta(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
return grad_input;
}
struct structured_upsample_nearest1d_meta_functional final : public at::meta::structured_upsample_nearest1d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest1d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales) {
structured_upsample_nearest1d_meta_functional op;
op.meta(self, output_size, scales);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest1d_meta_out final : public at::meta::structured_upsample_nearest1d {
    structured_upsample_nearest1d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest1d_out_out(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales, at::Tensor & out) {
structured_upsample_nearest1d_meta_out op(out);
op.meta(self, output_size, scales);
return out;
}
struct structured_upsample_nearest1d_backward_meta_functional final : public at::meta::structured_upsample_nearest1d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales) {
structured_upsample_nearest1d_backward_meta_functional op;
op.meta(grad_output, output_size, input_size, scales);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest1d_backward_meta_out final : public at::meta::structured_upsample_nearest1d_backward {
    structured_upsample_nearest1d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest1d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales, at::Tensor & grad_input) {
structured_upsample_nearest1d_backward_meta_out op(grad_input);
op.meta(grad_output, output_size, input_size, scales);
return grad_input;
}
struct structured_upsample_nearest2d_meta_functional final : public at::meta::structured_upsample_nearest2d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_nearest2d_meta_functional op;
op.meta(self, output_size, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest2d_meta_out final : public at::meta::structured_upsample_nearest2d {
    structured_upsample_nearest2d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest2d_out_out(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_nearest2d_meta_out op(out);
op.meta(self, output_size, scales_h, scales_w);
return out;
}
struct structured_upsample_nearest2d_backward_meta_functional final : public at::meta::structured_upsample_nearest2d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_nearest2d_backward_meta_functional op;
op.meta(grad_output, output_size, input_size, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest2d_backward_meta_out final : public at::meta::structured_upsample_nearest2d_backward {
    structured_upsample_nearest2d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest2d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_nearest2d_backward_meta_out op(grad_input);
op.meta(grad_output, output_size, input_size, scales_h, scales_w);
return grad_input;
}
struct structured_upsample_nearest3d_meta_functional final : public at::meta::structured_upsample_nearest3d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest3d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_nearest3d_meta_functional op;
op.meta(self, output_size, scales_d, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest3d_meta_out final : public at::meta::structured_upsample_nearest3d {
    structured_upsample_nearest3d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest3d_out_out(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
structured_upsample_nearest3d_meta_out op(out);
op.meta(self, output_size, scales_d, scales_h, scales_w);
return out;
}
struct structured_upsample_nearest3d_backward_meta_functional final : public at::meta::structured_upsample_nearest3d_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_upsample_nearest3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
structured_upsample_nearest3d_backward_meta_functional op;
op.meta(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
return std::move(op.outputs_[0]).take();
}
struct structured_upsample_nearest3d_backward_meta_out final : public at::meta::structured_upsample_nearest3d_backward {
    structured_upsample_nearest3d_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_upsample_nearest3d_backward_out_grad_input(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
structured_upsample_nearest3d_backward_meta_out op(grad_input);
op.meta(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
return grad_input;
}
struct structured_sigmoid_backward_meta_functional final : public at::meta::structured_sigmoid_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sigmoid_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output) {
structured_sigmoid_backward_meta_functional op;
op.meta(grad_output, output);
return std::move(op.outputs_[0]).take();
}
struct structured_sigmoid_backward_meta_out final : public at::meta::structured_sigmoid_backward {
    structured_sigmoid_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_sigmoid_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_sigmoid_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input) {
structured_sigmoid_backward_meta_out op(grad_input);
op.meta(grad_output, output);
return grad_input;
}
struct structured_logit_backward_meta_functional final : public at::meta::structured_logit_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_logit_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_logit_backward(const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps) {
structured_logit_backward_meta_functional op;
op.meta(grad_output, self, eps);
return std::move(op.outputs_[0]).take();
}
struct structured_logit_backward_meta_out final : public at::meta::structured_logit_backward {
    structured_logit_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_logit_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_logit_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps, at::Tensor & grad_input) {
structured_logit_backward_meta_out op(grad_input);
op.meta(grad_output, self, eps);
return grad_input;
}
struct structured_tanh_backward_meta_functional final : public at::meta::structured_tanh_backward {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_tanh_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_tanh_backward(const at::Tensor & grad_output, const at::Tensor & output) {
structured_tanh_backward_meta_functional op;
op.meta(grad_output, output);
return std::move(op.outputs_[0]).take();
}
struct structured_tanh_backward_meta_out final : public at::meta::structured_tanh_backward {
    structured_tanh_backward_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_tanh_backward::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_tanh_backward_out_grad_input(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input) {
structured_tanh_backward_meta_out op(grad_input);
op.meta(grad_output, output);
return grad_input;
}
struct structured_slow_conv_transpose2d_meta_functional final : public at::meta::structured_slow_conv_transpose2d {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_slow_conv_transpose2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
structured_slow_conv_transpose2d_meta_functional op;
op.meta(self, weight, kernel_size, ((bias.has_value() && (*bias).defined()) ? at::OptionalTensorRef(*bias) : at::OptionalTensorRef()), stride, padding, output_padding, dilation);
return std::move(op.outputs_[0]).take();
}
struct structured_slow_conv_transpose2d_meta_out final : public at::meta::structured_slow_conv_transpose2d {
    structured_slow_conv_transpose2d_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output

    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_slow_conv_transpose2d_out_out(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, at::Tensor & out) {
structured_slow_conv_transpose2d_meta_out op(out);
op.meta(self, weight, kernel_size, ((bias.has_value() && (*bias).defined()) ? at::OptionalTensorRef(*bias) : at::OptionalTensorRef()), stride, padding, output_padding, dilation);
return out;
}
struct structured_isposinf_meta_functional final : public at::meta::structured_isposinf {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_isposinf::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isposinf(const at::Tensor & self) {
structured_isposinf_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_isposinf_meta_out final : public at::meta::structured_isposinf {
    structured_isposinf_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_isposinf::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isposinf_out_out(const at::Tensor & self, at::Tensor & out) {
structured_isposinf_meta_out op(out);
op.meta(self);
return out;
}
struct structured_isneginf_meta_functional final : public at::meta::structured_isneginf {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_isneginf::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_isneginf(const at::Tensor & self) {
structured_isneginf_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_isneginf_meta_out final : public at::meta::structured_isneginf {
    structured_isneginf_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_isneginf::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_isneginf_out_out(const at::Tensor & self, at::Tensor & out) {
structured_isneginf_meta_out op(out);
op.meta(self);
return out;
}
struct structured_special_entr_meta_functional final : public at::meta::structured_special_entr {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_entr::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_entr(const at::Tensor & self) {
structured_special_entr_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_special_entr_meta_out final : public at::meta::structured_special_entr {
    structured_special_entr_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_entr::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_entr_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_entr_meta_out op(out);
op.meta(self);
return out;
}
struct structured_special_ndtri_meta_functional final : public at::meta::structured_special_ndtri {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_ndtri::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_ndtri(const at::Tensor & self) {
structured_special_ndtri_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_special_ndtri_meta_out final : public at::meta::structured_special_ndtri {
    structured_special_ndtri_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_ndtri::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_ndtri_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_ndtri_meta_out op(out);
op.meta(self);
return out;
}
struct structured_special_erfcx_meta_functional final : public at::meta::structured_special_erfcx {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_erfcx::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_erfcx(const at::Tensor & self) {
structured_special_erfcx_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_special_erfcx_meta_out final : public at::meta::structured_special_erfcx {
    structured_special_erfcx_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_erfcx::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_erfcx_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_erfcx_meta_out op(out);
op.meta(self);
return out;
}
struct structured_special_xlog1py_meta_functional final : public at::meta::structured_special_xlog1py {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_xlog1py::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_xlog1py(const at::Tensor & self, const at::Tensor & other) {
structured_special_xlog1py_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_special_xlog1py_meta_out final : public at::meta::structured_special_xlog1py {
    structured_special_xlog1py_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_xlog1py::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_xlog1py_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_special_xlog1py_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_special_zeta_meta_functional final : public at::meta::structured_special_zeta {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_zeta::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_zeta(const at::Tensor & self, const at::Tensor & other) {
structured_special_zeta_meta_functional op;
op.meta(self, other);
return std::move(op.outputs_[0]).take();
}
struct structured_special_zeta_meta_out final : public at::meta::structured_special_zeta {
    structured_special_zeta_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_zeta::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_zeta_out_out(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
structured_special_zeta_meta_out op(out);
op.meta(self, other);
return out;
}
struct structured_special_i0e_meta_functional final : public at::meta::structured_special_i0e {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_i0e::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_i0e(const at::Tensor & self) {
structured_special_i0e_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_special_i0e_meta_out final : public at::meta::structured_special_i0e {
    structured_special_i0e_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_i0e::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_i0e_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_i0e_meta_out op(out);
op.meta(self);
return out;
}
struct structured_special_i1_meta_functional final : public at::meta::structured_special_i1 {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_i1::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_i1(const at::Tensor & self) {
structured_special_i1_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_special_i1_meta_out final : public at::meta::structured_special_i1 {
    structured_special_i1_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_i1::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_i1_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_i1_meta_out op(out);
op.meta(self);
return out;
}
struct structured_special_i1e_meta_functional final : public at::meta::structured_special_i1e {

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        outputs_[output_idx] = create_out(sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(*outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_i1e::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return *outputs_[output_idx];
    }
    std::array<c10::ExclusivelyOwned<Tensor>, 1> outputs_;
};

at::Tensor wrapper_special_i1e(const at::Tensor & self) {
structured_special_i1e_meta_functional op;
op.meta(self);
return std::move(op.outputs_[0]).take();
}
struct structured_special_i1e_meta_out final : public at::meta::structured_special_i1e {
    structured_special_i1e_meta_out(Tensor& out0) : outputs_{ std::ref(out0) } {}

    void set_output(int64_t output_idx, IntArrayRef sizes, IntArrayRef strides,
                    TensorOptions options, DimnameList names) override {

        const auto& out = outputs_[output_idx].get();
        resize_out(out, sizes, strides, options);
        if (!names.empty()) {
          namedinference::propagate_names(outputs_[output_idx], names);
        }
        // super must happen after, so that downstream can use maybe_get_output
        // to retrieve the output
        at::meta::structured_special_i1e::set_output(output_idx, sizes, strides, options, names);
    }

    const Tensor& maybe_get_output(int64_t output_idx) override {
        return outputs_[output_idx];
    }
    std::array<std::reference_wrapper<Tensor>, 1> outputs_;
};

at::Tensor & wrapper_special_i1e_out_out(const at::Tensor & self, at::Tensor & out) {
structured_special_i1e_meta_out op(out);
op.meta(self);
return out;
}

at::Tensor & wrapper___linalg_inv_out_helper_(at::Tensor & self, at::Tensor & infos_lu, at::Tensor & infos_getri) {
  TORCH_CHECK_NOT_IMPLEMENTED(self.is_meta(),
    "Cannot inplace into non-meta tensor with meta tensor argument");
  return self;
}

TORCH_LIBRARY_IMPL(aten, Meta, m) {
  m.impl("sgn", TORCH_FN(wrapper_sgn));
  m.impl("sgn.out", TORCH_FN(wrapper_sgn_out_out));
  m.impl("sgn_", TORCH_FN(wrapper_sgn_));
  m.impl("acos", TORCH_FN(wrapper_acos));
  m.impl("acos.out", TORCH_FN(wrapper_acos_out_out));
  m.impl("acos_", TORCH_FN(wrapper_acos_));
  m.impl("add.Tensor", TORCH_FN(wrapper_add_Tensor));
  m.impl("add.out", TORCH_FN(wrapper_add_out_out));
  m.impl("add_.Tensor", TORCH_FN(wrapper_add__Tensor));
  m.impl("_add_relu_.Tensor",
  TORCH_FN(wrapper_Tensor__add_relu__Tensor));
  m.impl("_add_relu_.Scalar",
  TORCH_FN(wrapper_Scalar__add_relu__Scalar));
  m.impl("addmv", TORCH_FN(wrapper_addmv));
  m.impl("addmv.out", TORCH_FN(wrapper_addmv_out_out));
  m.impl("addmv_", TORCH_FN(wrapper_addmv_));
  m.impl("all.dim", TORCH_FN(wrapper_all_dim));
  m.impl("all.out", TORCH_FN(wrapper_all_out_out));
  m.impl("any.dim", TORCH_FN(wrapper_any_dim));
  m.impl("any.out", TORCH_FN(wrapper_any_out_out));
  m.impl("argmax", TORCH_FN(wrapper_argmax));
  m.impl("argmax.out", TORCH_FN(wrapper_argmax_out_out));
  m.impl("argmin", TORCH_FN(wrapper_argmin));
  m.impl("argmin.out", TORCH_FN(wrapper_argmin_out_out));
  m.impl("acosh", TORCH_FN(wrapper_acosh));
  m.impl("acosh.out", TORCH_FN(wrapper_acosh_out_out));
  m.impl("acosh_", TORCH_FN(wrapper_acosh_));
  m.impl("asinh", TORCH_FN(wrapper_asinh));
  m.impl("asinh.out", TORCH_FN(wrapper_asinh_out_out));
  m.impl("asinh_", TORCH_FN(wrapper_asinh_));
  m.impl("atanh", TORCH_FN(wrapper_atanh));
  m.impl("atanh.out", TORCH_FN(wrapper_atanh_out_out));
  m.impl("atanh_", TORCH_FN(wrapper_atanh_));
  m.impl("as_strided",
  TORCH_FN(wrapper__as_strided));
  m.impl("asin", TORCH_FN(wrapper_asin));
  m.impl("asin.out", TORCH_FN(wrapper_asin_out_out));
  m.impl("asin_", TORCH_FN(wrapper_asin_));
  m.impl("atan", TORCH_FN(wrapper_atan));
  m.impl("atan.out", TORCH_FN(wrapper_atan_out_out));
  m.impl("atan_", TORCH_FN(wrapper_atan_));
  m.impl("baddbmm_",
  TORCH_FN(wrapper__baddbmm_));
  m.impl("bernoulli_.Tensor",
  TORCH_FN(wrapper_Tensor_bernoulli__Tensor));
  m.impl("bernoulli_.float",
  TORCH_FN(wrapper_float_bernoulli__float));
  m.impl("bitwise_not", TORCH_FN(wrapper_bitwise_not));
  m.impl("bitwise_not.out", TORCH_FN(wrapper_bitwise_not_out_out));
  m.impl("bitwise_not_", TORCH_FN(wrapper_bitwise_not_));
  m.impl("copysign.Tensor", TORCH_FN(wrapper_copysign_Tensor));
  m.impl("copysign.out", TORCH_FN(wrapper_copysign_out_out));
  m.impl("copysign_.Tensor", TORCH_FN(wrapper_copysign__Tensor));
  m.impl("ceil", TORCH_FN(wrapper_ceil));
  m.impl("ceil.out", TORCH_FN(wrapper_ceil_out_out));
  m.impl("ceil_", TORCH_FN(wrapper_ceil_));
  m.impl("clamp", TORCH_FN(wrapper_clamp));
  m.impl("clamp.out", TORCH_FN(wrapper_clamp_out_out));
  m.impl("clamp_", TORCH_FN(wrapper_clamp_));
  m.impl("cos", TORCH_FN(wrapper_cos));
  m.impl("cos.out", TORCH_FN(wrapper_cos_out_out));
  m.impl("cos_", TORCH_FN(wrapper_cos_));
  m.impl("cosh", TORCH_FN(wrapper_cosh));
  m.impl("cosh.out", TORCH_FN(wrapper_cosh_out_out));
  m.impl("cosh_", TORCH_FN(wrapper_cosh_));
  m.impl("cumprod", TORCH_FN(wrapper_cumprod));
  m.impl("cumprod.out", TORCH_FN(wrapper_cumprod_out_out));
  m.impl("cumprod_", TORCH_FN(wrapper_cumprod_));
  m.impl("cumsum", TORCH_FN(wrapper_cumsum));
  m.impl("cumsum.out", TORCH_FN(wrapper_cumsum_out_out));
  m.impl("cumsum_", TORCH_FN(wrapper_cumsum_));
  m.impl("div.Tensor", TORCH_FN(wrapper_div_Tensor));
  m.impl("div.out", TORCH_FN(wrapper_div_out_out));
  m.impl("div_.Tensor", TORCH_FN(wrapper_div__Tensor));
  m.impl("div.Tensor_mode", TORCH_FN(wrapper_div_Tensor_mode));
  m.impl("div.out_mode", TORCH_FN(wrapper_div_out_out_mode));
  m.impl("div_.Tensor_mode", TORCH_FN(wrapper_div__Tensor_mode));
  m.impl("embedding_renorm_",
  TORCH_FN(wrapper__embedding_renorm_));
  m.impl("empty.memory_format",
  TORCH_FN(wrapper_memory_format_empty_memory_format));
  m.impl("resize_",
  TORCH_FN(wrapper__resize_));
  m.impl("empty_strided",
  TORCH_FN(wrapper__empty_strided));
  m.impl("erf", TORCH_FN(wrapper_erf));
  m.impl("erf.out", TORCH_FN(wrapper_erf_out_out));
  m.impl("erf_", TORCH_FN(wrapper_erf_));
  m.impl("erfc", TORCH_FN(wrapper_erfc));
  m.impl("erfc.out", TORCH_FN(wrapper_erfc_out_out));
  m.impl("erfc_", TORCH_FN(wrapper_erfc_));
  m.impl("exp", TORCH_FN(wrapper_exp));
  m.impl("exp.out", TORCH_FN(wrapper_exp_out_out));
  m.impl("exp_", TORCH_FN(wrapper_exp_));
  m.impl("exp2", TORCH_FN(wrapper_exp2));
  m.impl("exp2.out", TORCH_FN(wrapper_exp2_out_out));
  m.impl("exp2_", TORCH_FN(wrapper_exp2_));
  m.impl("expm1", TORCH_FN(wrapper_expm1));
  m.impl("expm1.out", TORCH_FN(wrapper_expm1_out_out));
  m.impl("expm1_", TORCH_FN(wrapper_expm1_));
  m.impl("fill_.Scalar",
  TORCH_FN(wrapper_Scalar_fill__Scalar));
  m.impl("fill_.Tensor",
  TORCH_FN(wrapper_Tensor_fill__Tensor));
  m.impl("floor", TORCH_FN(wrapper_floor));
  m.impl("floor.out", TORCH_FN(wrapper_floor_out_out));
  m.impl("floor_", TORCH_FN(wrapper_floor_));
  m.impl("floor_divide_.Tensor",
  TORCH_FN(wrapper_Tensor_floor_divide__Tensor));
  m.impl("frac", TORCH_FN(wrapper_frac));
  m.impl("frac.out", TORCH_FN(wrapper_frac_out_out));
  m.impl("frac_", TORCH_FN(wrapper_frac_));
  m.impl("gcd", TORCH_FN(wrapper_gcd));
  m.impl("gcd.out", TORCH_FN(wrapper_gcd_out_out));
  m.impl("gcd_", TORCH_FN(wrapper_gcd_));
  m.impl("lcm", TORCH_FN(wrapper_lcm));
  m.impl("lcm.out", TORCH_FN(wrapper_lcm_out_out));
  m.impl("lcm_", TORCH_FN(wrapper_lcm_));
  m.impl("_index_put_impl_",
  TORCH_FN(wrapper___index_put_impl_));
  m.impl("isin.Tensor_Tensor", TORCH_FN(wrapper_isin_Tensor_Tensor));
  m.impl("isin.Tensor_Tensor_out", TORCH_FN(wrapper_isin_out_Tensor_Tensor_out));
  m.impl("isin.Tensor_Scalar", TORCH_FN(wrapper_isin_Tensor_Scalar));
  m.impl("isin.Tensor_Scalar_out", TORCH_FN(wrapper_isin_out_Tensor_Scalar_out));
  m.impl("isin.Scalar_Tensor", TORCH_FN(wrapper_isin_Scalar_Tensor));
  m.impl("isin.Scalar_Tensor_out", TORCH_FN(wrapper_isin_out_Scalar_Tensor_out));
  m.impl("log", TORCH_FN(wrapper_log));
  m.impl("log.out", TORCH_FN(wrapper_log_out_out));
  m.impl("log_", TORCH_FN(wrapper_log_));
  m.impl("log10", TORCH_FN(wrapper_log10));
  m.impl("log10.out", TORCH_FN(wrapper_log10_out_out));
  m.impl("log10_", TORCH_FN(wrapper_log10_));
  m.impl("log1p", TORCH_FN(wrapper_log1p));
  m.impl("log1p.out", TORCH_FN(wrapper_log1p_out_out));
  m.impl("log1p_", TORCH_FN(wrapper_log1p_));
  m.impl("log2", TORCH_FN(wrapper_log2));
  m.impl("log2.out", TORCH_FN(wrapper_log2_out_out));
  m.impl("log2_", TORCH_FN(wrapper_log2_));
  m.impl("logaddexp", TORCH_FN(wrapper_logaddexp));
  m.impl("logaddexp.out", TORCH_FN(wrapper_logaddexp_out_out));
  m.impl("logaddexp2", TORCH_FN(wrapper_logaddexp2));
  m.impl("logaddexp2.out", TORCH_FN(wrapper_logaddexp2_out_out));
  m.impl("xlogy.Tensor", TORCH_FN(wrapper_xlogy_Tensor));
  m.impl("xlogy.OutTensor", TORCH_FN(wrapper_xlogy_out_OutTensor));
  m.impl("xlogy_.Tensor", TORCH_FN(wrapper_xlogy__Tensor));
  m.impl("_log_softmax", TORCH_FN(wrapper__log_softmax));
  m.impl("_log_softmax.out", TORCH_FN(wrapper__log_softmax_out_out));
  m.impl("_log_softmax_backward_data", TORCH_FN(wrapper__log_softmax_backward_data));
  m.impl("_log_softmax_backward_data.out", TORCH_FN(wrapper__log_softmax_backward_data_out_out));
  m.impl("aminmax", TORCH_FN(wrapper_aminmax));
  m.impl("aminmax.out", TORCH_FN(wrapper_aminmax_out_out));
  m.impl("mean.dim", TORCH_FN(wrapper_mean_dim));
  m.impl("mean.out", TORCH_FN(wrapper_mean_out_out));
  m.impl("mm", TORCH_FN(wrapper_mm));
  m.impl("mm.out", TORCH_FN(wrapper_mm_out_out));
  m.impl("mul.Tensor", TORCH_FN(wrapper_mul_Tensor));
  m.impl("mul.out", TORCH_FN(wrapper_mul_out_out));
  m.impl("mul_.Tensor", TORCH_FN(wrapper_mul__Tensor));
  m.impl("reciprocal", TORCH_FN(wrapper_reciprocal));
  m.impl("reciprocal.out", TORCH_FN(wrapper_reciprocal_out_out));
  m.impl("reciprocal_", TORCH_FN(wrapper_reciprocal_));
  m.impl("neg", TORCH_FN(wrapper_neg));
  m.impl("neg.out", TORCH_FN(wrapper_neg_out_out));
  m.impl("neg_", TORCH_FN(wrapper_neg_));
  m.impl("_reshape_alias",
  TORCH_FN(wrapper___reshape_alias));
  m.impl("round", TORCH_FN(wrapper_round));
  m.impl("round.out", TORCH_FN(wrapper_round_out_out));
  m.impl("round_", TORCH_FN(wrapper_round_));
  m.impl("relu_",
  TORCH_FN(wrapper__relu_));
  m.impl("gelu", TORCH_FN(wrapper_gelu));
  m.impl("gelu.out", TORCH_FN(wrapper_gelu_out_out));
  m.impl("gelu_backward", TORCH_FN(wrapper_gelu_backward));
  m.impl("gelu_backward.grad_input", TORCH_FN(wrapper_gelu_backward_out_grad_input));
  m.impl("hardshrink", TORCH_FN(wrapper_hardshrink));
  m.impl("hardshrink.out", TORCH_FN(wrapper_hardshrink_out_out));
  m.impl("hardshrink_backward", TORCH_FN(wrapper_hardshrink_backward));
  m.impl("hardshrink_backward.grad_input", TORCH_FN(wrapper_hardshrink_backward_out_grad_input));
  m.impl("rsqrt", TORCH_FN(wrapper_rsqrt));
  m.impl("rsqrt.out", TORCH_FN(wrapper_rsqrt_out_out));
  m.impl("rsqrt_", TORCH_FN(wrapper_rsqrt_));
  m.impl("silu", TORCH_FN(wrapper_silu));
  m.impl("silu.out", TORCH_FN(wrapper_silu_out_out));
  m.impl("silu_", TORCH_FN(wrapper_silu_));
  m.impl("silu_backward", TORCH_FN(wrapper_silu_backward));
  m.impl("silu_backward.grad_input", TORCH_FN(wrapper_silu_backward_out_grad_input));
  m.impl("mish", TORCH_FN(wrapper_mish));
  m.impl("mish.out", TORCH_FN(wrapper_mish_out_out));
  m.impl("mish_", TORCH_FN(wrapper_mish_));
  m.impl("sigmoid", TORCH_FN(wrapper_sigmoid));
  m.impl("sigmoid.out", TORCH_FN(wrapper_sigmoid_out_out));
  m.impl("sigmoid_", TORCH_FN(wrapper_sigmoid_));
  m.impl("logit_",
  TORCH_FN(wrapper__logit_));
  m.impl("sin", TORCH_FN(wrapper_sin));
  m.impl("sin.out", TORCH_FN(wrapper_sin_out_out));
  m.impl("sin_", TORCH_FN(wrapper_sin_));
  m.impl("sinc", TORCH_FN(wrapper_sinc));
  m.impl("sinc.out", TORCH_FN(wrapper_sinc_out_out));
  m.impl("sinc_", TORCH_FN(wrapper_sinc_));
  m.impl("sinh", TORCH_FN(wrapper_sinh));
  m.impl("sinh.out", TORCH_FN(wrapper_sinh_out_out));
  m.impl("sinh_", TORCH_FN(wrapper_sinh_));
  m.impl("_softmax", TORCH_FN(wrapper__softmax));
  m.impl("_softmax.out", TORCH_FN(wrapper__softmax_out_out));
  m.impl("_softmax_backward_data", TORCH_FN(wrapper__softmax_backward_data));
  m.impl("_softmax_backward_data.out", TORCH_FN(wrapper__softmax_backward_data_out_out));
  m.impl("sum.dim_IntList", TORCH_FN(wrapper_sum_dim_IntList));
  m.impl("sum.IntList_out", TORCH_FN(wrapper_sum_out_IntList_out));
  m.impl("sqrt", TORCH_FN(wrapper_sqrt));
  m.impl("sqrt.out", TORCH_FN(wrapper_sqrt_out_out));
  m.impl("sqrt_", TORCH_FN(wrapper_sqrt_));
  m.impl("prod.dim_int", TORCH_FN(wrapper_prod_dim_int));
  m.impl("prod.int_out", TORCH_FN(wrapper_prod_out_int_out));
  m.impl("tan", TORCH_FN(wrapper_tan));
  m.impl("tan.out", TORCH_FN(wrapper_tan_out_out));
  m.impl("tan_", TORCH_FN(wrapper_tan_));
  m.impl("tanh", TORCH_FN(wrapper_tanh));
  m.impl("tanh.out", TORCH_FN(wrapper_tanh_out_out));
  m.impl("tanh_", TORCH_FN(wrapper_tanh_));
  m.impl("threshold", TORCH_FN(wrapper_threshold));
  m.impl("threshold.out", TORCH_FN(wrapper_threshold_out_out));
  m.impl("threshold_", TORCH_FN(wrapper_threshold_));
  m.impl("threshold_backward", TORCH_FN(wrapper_threshold_backward));
  m.impl("threshold_backward.grad_input", TORCH_FN(wrapper_threshold_backward_out_grad_input));
  m.impl("_mkldnn_transpose_",
  TORCH_FN(wrapper___mkldnn_transpose_));
  m.impl("trunc", TORCH_FN(wrapper_trunc));
  m.impl("trunc.out", TORCH_FN(wrapper_trunc_out_out));
  m.impl("trunc_", TORCH_FN(wrapper_trunc_));
  m.impl("norm.ScalarOpt_dim_dtype", TORCH_FN(wrapper_norm_ScalarOpt_dim_dtype));
  m.impl("norm.dtype_out", TORCH_FN(wrapper_norm_out_dtype_out));
  m.impl("norm.ScalarOpt_dim", TORCH_FN(wrapper_norm_ScalarOpt_dim));
  m.impl("norm.out", TORCH_FN(wrapper_norm_out_out));
  m.impl("resize_as_sparse_",
  TORCH_FN(wrapper__resize_as_sparse_));
  m.impl("zero_",
  TORCH_FN(wrapper__zero_));
  m.impl("sub.Tensor", TORCH_FN(wrapper_sub_Tensor));
  m.impl("sub.out", TORCH_FN(wrapper_sub_out_out));
  m.impl("sub_.Tensor", TORCH_FN(wrapper_sub__Tensor));
  m.impl("heaviside", TORCH_FN(wrapper_heaviside));
  m.impl("heaviside.out", TORCH_FN(wrapper_heaviside_out_out));
  m.impl("heaviside_", TORCH_FN(wrapper_heaviside_));
  m.impl("addmm", TORCH_FN(wrapper_addmm));
  m.impl("addmm.out", TORCH_FN(wrapper_addmm_out_out));
  m.impl("addmm_", TORCH_FN(wrapper_addmm_));
  m.impl("sparse_resize_",
  TORCH_FN(wrapper__sparse_resize_));
  m.impl("sparse_resize_and_clear_",
  TORCH_FN(wrapper__sparse_resize_and_clear_));
  m.impl("_coalesced_",
  TORCH_FN(wrapper___coalesced_));
  m.impl("copy_sparse_to_sparse_",
  TORCH_FN(wrapper__copy_sparse_to_sparse_));
  m.impl("set_.source_Storage",
  TORCH_FN(wrapper_source_Storage_set__source_Storage));
  m.impl("set_.source_Storage_storage_offset",
  TORCH_FN(wrapper_source_Storage_storage_offset_set__source_Storage_storage_offset));
  m.impl("set_.source_Tensor",
  TORCH_FN(wrapper_source_Tensor_set__source_Tensor));
  m.impl("set_",
  TORCH_FN(wrapper__set_));
  m.impl("masked_fill_.Scalar",
  TORCH_FN(wrapper_Scalar_masked_fill__Scalar));
  m.impl("masked_fill_.Tensor",
  TORCH_FN(wrapper_Tensor_masked_fill__Tensor));
  m.impl("masked_scatter_",
  TORCH_FN(wrapper__masked_scatter_));
  m.impl("view",
  TORCH_FN(wrapper__view));
  m.impl("put_",
  TORCH_FN(wrapper__put_));
  m.impl("index_add_.alpha",
  TORCH_FN(wrapper_alpha_index_add__alpha));
  m.impl("index_fill_.int_Scalar",
  TORCH_FN(wrapper_int_Scalar_index_fill__int_Scalar));
  m.impl("index_fill_.int_Tensor",
  TORCH_FN(wrapper_int_Tensor_index_fill__int_Tensor));
  m.impl("scatter.src", TORCH_FN(wrapper_scatter_src));
  m.impl("scatter.src_out", TORCH_FN(wrapper_scatter_out_src_out));
  m.impl("scatter_.src", TORCH_FN(wrapper_scatter__src));
  m.impl("scatter.value", TORCH_FN(wrapper_scatter_value));
  m.impl("scatter.value_out", TORCH_FN(wrapper_scatter_out_value_out));
  m.impl("scatter_.value", TORCH_FN(wrapper_scatter__value));
  m.impl("scatter.reduce", TORCH_FN(wrapper_scatter_reduce));
  m.impl("scatter.reduce_out", TORCH_FN(wrapper_scatter_out_reduce_out));
  m.impl("scatter_.reduce", TORCH_FN(wrapper_scatter__reduce));
  m.impl("scatter.value_reduce", TORCH_FN(wrapper_scatter_value_reduce));
  m.impl("scatter.value_reduce_out", TORCH_FN(wrapper_scatter_out_value_reduce_out));
  m.impl("scatter_.value_reduce", TORCH_FN(wrapper_scatter__value_reduce));
  m.impl("scatter_add", TORCH_FN(wrapper_scatter_add));
  m.impl("scatter_add.out", TORCH_FN(wrapper_scatter_add_out_out));
  m.impl("scatter_add_", TORCH_FN(wrapper_scatter_add_));
  m.impl("eq.Scalar", TORCH_FN(wrapper_eq_Scalar));
  m.impl("eq.Scalar_out", TORCH_FN(wrapper_eq_out_Scalar_out));
  m.impl("eq_.Scalar", TORCH_FN(wrapper_eq__Scalar));
  m.impl("eq.Tensor", TORCH_FN(wrapper_eq_Tensor));
  m.impl("eq.Tensor_out", TORCH_FN(wrapper_eq_out_Tensor_out));
  m.impl("eq_.Tensor", TORCH_FN(wrapper_eq__Tensor));
  m.impl("bitwise_and.Tensor", TORCH_FN(wrapper_bitwise_and_Tensor));
  m.impl("bitwise_and.Tensor_out", TORCH_FN(wrapper_bitwise_and_out_Tensor_out));
  m.impl("bitwise_and_.Tensor", TORCH_FN(wrapper_bitwise_and__Tensor));
  m.impl("bitwise_or.Tensor", TORCH_FN(wrapper_bitwise_or_Tensor));
  m.impl("bitwise_or.Tensor_out", TORCH_FN(wrapper_bitwise_or_out_Tensor_out));
  m.impl("bitwise_or_.Tensor", TORCH_FN(wrapper_bitwise_or__Tensor));
  m.impl("bitwise_xor.Tensor", TORCH_FN(wrapper_bitwise_xor_Tensor));
  m.impl("bitwise_xor.Tensor_out", TORCH_FN(wrapper_bitwise_xor_out_Tensor_out));
  m.impl("bitwise_xor_.Tensor", TORCH_FN(wrapper_bitwise_xor__Tensor));
  m.impl("__ilshift__.Scalar",
  TORCH_FN(wrapper_Scalar___ilshift___Scalar));
  m.impl("__ilshift__.Tensor",
  TORCH_FN(wrapper_Tensor___ilshift___Tensor));
  m.impl("bitwise_left_shift.Tensor", TORCH_FN(wrapper_bitwise_left_shift_Tensor));
  m.impl("bitwise_left_shift.Tensor_out", TORCH_FN(wrapper_bitwise_left_shift_out_Tensor_out));
  m.impl("bitwise_left_shift_.Tensor", TORCH_FN(wrapper_bitwise_left_shift__Tensor));
  m.impl("bitwise_left_shift_.Tensor_Scalar",
  TORCH_FN(wrapper_Tensor_Scalar_bitwise_left_shift__Tensor_Scalar));
  m.impl("__irshift__.Scalar",
  TORCH_FN(wrapper_Scalar___irshift___Scalar));
  m.impl("__irshift__.Tensor",
  TORCH_FN(wrapper_Tensor___irshift___Tensor));
  m.impl("bitwise_right_shift.Tensor", TORCH_FN(wrapper_bitwise_right_shift_Tensor));
  m.impl("bitwise_right_shift.Tensor_out", TORCH_FN(wrapper_bitwise_right_shift_out_Tensor_out));
  m.impl("bitwise_right_shift_.Tensor", TORCH_FN(wrapper_bitwise_right_shift__Tensor));
  m.impl("bitwise_right_shift_.Tensor_Scalar",
  TORCH_FN(wrapper_Tensor_Scalar_bitwise_right_shift__Tensor_Scalar));
  m.impl("tril_",
  TORCH_FN(wrapper__tril_));
  m.impl("triu_",
  TORCH_FN(wrapper__triu_));
  m.impl("digamma", TORCH_FN(wrapper_digamma));
  m.impl("digamma.out", TORCH_FN(wrapper_digamma_out_out));
  m.impl("digamma_", TORCH_FN(wrapper_digamma_));
  m.impl("lerp_.Scalar",
  TORCH_FN(wrapper_Scalar_lerp__Scalar));
  m.impl("lerp_.Tensor",
  TORCH_FN(wrapper_Tensor_lerp__Tensor));
  m.impl("addbmm_",
  TORCH_FN(wrapper__addbmm_));
  m.impl("random_.from",
  TORCH_FN(wrapper_from_random__from));
  m.impl("random_.to",
  TORCH_FN(wrapper_to_random__to));
  m.impl("random_",
  TORCH_FN(wrapper__random_));
  m.impl("uniform_",
  TORCH_FN(wrapper__uniform_));
  m.impl("cauchy_",
  TORCH_FN(wrapper__cauchy_));
  m.impl("log_normal_",
  TORCH_FN(wrapper__log_normal_));
  m.impl("exponential_",
  TORCH_FN(wrapper__exponential_));
  m.impl("geometric_",
  TORCH_FN(wrapper__geometric_));
  m.impl("ne.Scalar", TORCH_FN(wrapper_ne_Scalar));
  m.impl("ne.Scalar_out", TORCH_FN(wrapper_ne_out_Scalar_out));
  m.impl("ne_.Scalar", TORCH_FN(wrapper_ne__Scalar));
  m.impl("ne.Tensor", TORCH_FN(wrapper_ne_Tensor));
  m.impl("ne.Tensor_out", TORCH_FN(wrapper_ne_out_Tensor_out));
  m.impl("ne_.Tensor", TORCH_FN(wrapper_ne__Tensor));
  m.impl("ge.Scalar", TORCH_FN(wrapper_ge_Scalar));
  m.impl("ge.Scalar_out", TORCH_FN(wrapper_ge_out_Scalar_out));
  m.impl("ge_.Scalar", TORCH_FN(wrapper_ge__Scalar));
  m.impl("ge.Tensor", TORCH_FN(wrapper_ge_Tensor));
  m.impl("ge.Tensor_out", TORCH_FN(wrapper_ge_out_Tensor_out));
  m.impl("ge_.Tensor", TORCH_FN(wrapper_ge__Tensor));
  m.impl("le.Scalar", TORCH_FN(wrapper_le_Scalar));
  m.impl("le.Scalar_out", TORCH_FN(wrapper_le_out_Scalar_out));
  m.impl("le_.Scalar", TORCH_FN(wrapper_le__Scalar));
  m.impl("le.Tensor", TORCH_FN(wrapper_le_Tensor));
  m.impl("le.Tensor_out", TORCH_FN(wrapper_le_out_Tensor_out));
  m.impl("le_.Tensor", TORCH_FN(wrapper_le__Tensor));
  m.impl("gt.Scalar", TORCH_FN(wrapper_gt_Scalar));
  m.impl("gt.Scalar_out", TORCH_FN(wrapper_gt_out_Scalar_out));
  m.impl("gt_.Scalar", TORCH_FN(wrapper_gt__Scalar));
  m.impl("gt.Tensor", TORCH_FN(wrapper_gt_Tensor));
  m.impl("gt.Tensor_out", TORCH_FN(wrapper_gt_out_Tensor_out));
  m.impl("gt_.Tensor", TORCH_FN(wrapper_gt__Tensor));
  m.impl("lt.Scalar", TORCH_FN(wrapper_lt_Scalar));
  m.impl("lt.Scalar_out", TORCH_FN(wrapper_lt_out_Scalar_out));
  m.impl("lt_.Scalar", TORCH_FN(wrapper_lt__Scalar));
  m.impl("lt.Tensor", TORCH_FN(wrapper_lt_Tensor));
  m.impl("lt.Tensor_out", TORCH_FN(wrapper_lt_out_Tensor_out));
  m.impl("lt_.Tensor", TORCH_FN(wrapper_lt__Tensor));
  m.impl("gather", TORCH_FN(wrapper_gather));
  m.impl("gather.out", TORCH_FN(wrapper_gather_out_out));
  m.impl("addcmul", TORCH_FN(wrapper_addcmul));
  m.impl("addcmul.out", TORCH_FN(wrapper_addcmul_out_out));
  m.impl("addcmul_", TORCH_FN(wrapper_addcmul_));
  m.impl("addcdiv", TORCH_FN(wrapper_addcdiv));
  m.impl("addcdiv.out", TORCH_FN(wrapper_addcdiv_out_out));
  m.impl("addcdiv_", TORCH_FN(wrapper_addcdiv_));
  m.impl("lgamma", TORCH_FN(wrapper_lgamma));
  m.impl("lgamma.out", TORCH_FN(wrapper_lgamma_out_out));
  m.impl("lgamma_", TORCH_FN(wrapper_lgamma_));
  m.impl("polygamma", TORCH_FN(wrapper_polygamma));
  m.impl("polygamma.out", TORCH_FN(wrapper_polygamma_out_out));
  m.impl("erfinv", TORCH_FN(wrapper_erfinv));
  m.impl("erfinv.out", TORCH_FN(wrapper_erfinv_out_out));
  m.impl("erfinv_", TORCH_FN(wrapper_erfinv_));
  m.impl("i0", TORCH_FN(wrapper_i0));
  m.impl("i0.out", TORCH_FN(wrapper_i0_out_out));
  m.impl("i0_", TORCH_FN(wrapper_i0_));
  m.impl("sign", TORCH_FN(wrapper_sign));
  m.impl("sign.out", TORCH_FN(wrapper_sign_out_out));
  m.impl("sign_", TORCH_FN(wrapper_sign_));
  m.impl("signbit", TORCH_FN(wrapper_signbit));
  m.impl("signbit.out", TORCH_FN(wrapper_signbit_out_out));
  m.impl("atan2", TORCH_FN(wrapper_atan2));
  m.impl("atan2.out", TORCH_FN(wrapper_atan2_out_out));
  m.impl("atan2_", TORCH_FN(wrapper_atan2_));
  m.impl("fmod.Tensor", TORCH_FN(wrapper_fmod_Tensor));
  m.impl("fmod.Tensor_out", TORCH_FN(wrapper_fmod_out_Tensor_out));
  m.impl("fmod_.Tensor", TORCH_FN(wrapper_fmod__Tensor));
  m.impl("hypot", TORCH_FN(wrapper_hypot));
  m.impl("hypot.out", TORCH_FN(wrapper_hypot_out_out));
  m.impl("hypot_", TORCH_FN(wrapper_hypot_));
  m.impl("igamma", TORCH_FN(wrapper_igamma));
  m.impl("igamma.out", TORCH_FN(wrapper_igamma_out_out));
  m.impl("igamma_", TORCH_FN(wrapper_igamma_));
  m.impl("igammac", TORCH_FN(wrapper_igammac));
  m.impl("igammac.out", TORCH_FN(wrapper_igammac_out_out));
  m.impl("igammac_", TORCH_FN(wrapper_igammac_));
  m.impl("nextafter", TORCH_FN(wrapper_nextafter));
  m.impl("nextafter.out", TORCH_FN(wrapper_nextafter_out_out));
  m.impl("nextafter_", TORCH_FN(wrapper_nextafter_));
  m.impl("remainder.Tensor", TORCH_FN(wrapper_remainder_Tensor));
  m.impl("remainder.Tensor_out", TORCH_FN(wrapper_remainder_out_Tensor_out));
  m.impl("remainder_.Tensor", TORCH_FN(wrapper_remainder__Tensor));
  m.impl("fmin", TORCH_FN(wrapper_fmin));
  m.impl("fmin.out", TORCH_FN(wrapper_fmin_out_out));
  m.impl("fmax", TORCH_FN(wrapper_fmax));
  m.impl("fmax.out", TORCH_FN(wrapper_fmax_out_out));
  m.impl("maximum", TORCH_FN(wrapper_maximum));
  m.impl("maximum.out", TORCH_FN(wrapper_maximum_out_out));
  m.impl("minimum", TORCH_FN(wrapper_minimum));
  m.impl("minimum.out", TORCH_FN(wrapper_minimum_out_out));
  m.impl("topk", TORCH_FN(wrapper_topk));
  m.impl("topk.values", TORCH_FN(wrapper_topk_out_values));
  m.impl("all", TORCH_FN(wrapper_all));
  m.impl("all.all_out", TORCH_FN(wrapper_all_out_all_out));
  m.impl("any", TORCH_FN(wrapper_any));
  m.impl("any.all_out", TORCH_FN(wrapper_any_out_all_out));
  m.impl("renorm", TORCH_FN(wrapper_renorm));
  m.impl("renorm.out", TORCH_FN(wrapper_renorm_out_out));
  m.impl("renorm_", TORCH_FN(wrapper_renorm_));
  m.impl("pow.Tensor_Tensor", TORCH_FN(wrapper_pow_Tensor_Tensor));
  m.impl("pow.Tensor_Tensor_out", TORCH_FN(wrapper_pow_out_Tensor_Tensor_out));
  m.impl("pow_.Tensor", TORCH_FN(wrapper_pow__Tensor));
  m.impl("pow.Scalar", TORCH_FN(wrapper_pow_Scalar));
  m.impl("pow.Scalar_out", TORCH_FN(wrapper_pow_out_Scalar_out));
  m.impl("pow.Tensor_Scalar", TORCH_FN(wrapper_pow_Tensor_Scalar));
  m.impl("pow.Tensor_Scalar_out", TORCH_FN(wrapper_pow_out_Tensor_Scalar_out));
  m.impl("pow_.Scalar", TORCH_FN(wrapper_pow__Scalar));
  m.impl("normal_",
  TORCH_FN(wrapper__normal_));
  m.impl("_index_copy_",
  TORCH_FN(wrapper___index_copy_));
  m.impl("_amp_update_scale_",
  TORCH_FN(wrapper___amp_update_scale_));
  m.impl("_convert_indices_from_coo_to_csr", TORCH_FN(wrapper__convert_indices_from_coo_to_csr));
  m.impl("_convert_indices_from_coo_to_csr.out", TORCH_FN(wrapper__convert_indices_from_coo_to_csr_out_out));
  m.impl("nll_loss_forward", TORCH_FN(wrapper_nll_loss_forward));
  m.impl("nll_loss_forward.output", TORCH_FN(wrapper_nll_loss_forward_out_output));
  m.impl("nll_loss_backward", TORCH_FN(wrapper_nll_loss_backward));
  m.impl("nll_loss_backward.grad_input", TORCH_FN(wrapper_nll_loss_backward_out_grad_input));
  m.impl("elu", TORCH_FN(wrapper_elu));
  m.impl("elu.out", TORCH_FN(wrapper_elu_out_out));
  m.impl("elu_", TORCH_FN(wrapper_elu_));
  m.impl("elu_backward", TORCH_FN(wrapper_elu_backward));
  m.impl("elu_backward.grad_input", TORCH_FN(wrapper_elu_backward_out_grad_input));
  m.impl("glu", TORCH_FN(wrapper_glu));
  m.impl("glu.out", TORCH_FN(wrapper_glu_out_out));
  m.impl("hardsigmoid", TORCH_FN(wrapper_hardsigmoid));
  m.impl("hardsigmoid.out", TORCH_FN(wrapper_hardsigmoid_out_out));
  m.impl("hardsigmoid_", TORCH_FN(wrapper_hardsigmoid_));
  m.impl("hardsigmoid_backward", TORCH_FN(wrapper_hardsigmoid_backward));
  m.impl("hardsigmoid_backward.grad_input", TORCH_FN(wrapper_hardsigmoid_backward_out_grad_input));
  m.impl("hardtanh_",
  TORCH_FN(wrapper__hardtanh_));
  m.impl("hardswish_",
  TORCH_FN(wrapper__hardswish_));
  m.impl("leaky_relu", TORCH_FN(wrapper_leaky_relu));
  m.impl("leaky_relu.out", TORCH_FN(wrapper_leaky_relu_out_out));
  m.impl("leaky_relu_", TORCH_FN(wrapper_leaky_relu_));
  m.impl("leaky_relu_backward", TORCH_FN(wrapper_leaky_relu_backward));
  m.impl("leaky_relu_backward.grad_input", TORCH_FN(wrapper_leaky_relu_backward_out_grad_input));
  m.impl("rrelu_with_noise_",
  TORCH_FN(wrapper__rrelu_with_noise_));
  m.impl("softplus", TORCH_FN(wrapper_softplus));
  m.impl("softplus.out", TORCH_FN(wrapper_softplus_out_out));
  m.impl("softplus_backward", TORCH_FN(wrapper_softplus_backward));
  m.impl("softplus_backward.grad_input", TORCH_FN(wrapper_softplus_backward_out_grad_input));
  m.impl("softshrink", TORCH_FN(wrapper_softshrink));
  m.impl("softshrink.out", TORCH_FN(wrapper_softshrink_out_out));
  m.impl("softshrink_backward", TORCH_FN(wrapper_softshrink_backward));
  m.impl("softshrink_backward.grad_input", TORCH_FN(wrapper_softshrink_backward_out_grad_input));
  m.impl("adaptive_max_pool2d", TORCH_FN(wrapper_adaptive_max_pool2d));
  m.impl("adaptive_max_pool2d.out", TORCH_FN(wrapper_adaptive_max_pool2d_out_out));
  m.impl("adaptive_max_pool2d_backward", TORCH_FN(wrapper_adaptive_max_pool2d_backward));
  m.impl("adaptive_max_pool2d_backward.grad_input", TORCH_FN(wrapper_adaptive_max_pool2d_backward_out_grad_input));
  m.impl("adaptive_max_pool3d", TORCH_FN(wrapper_adaptive_max_pool3d));
  m.impl("adaptive_max_pool3d.out", TORCH_FN(wrapper_adaptive_max_pool3d_out_out));
  m.impl("adaptive_max_pool3d_backward", TORCH_FN(wrapper_adaptive_max_pool3d_backward));
  m.impl("adaptive_max_pool3d_backward.grad_input", TORCH_FN(wrapper_adaptive_max_pool3d_backward_out_grad_input));
  m.impl("avg_pool2d", TORCH_FN(wrapper_avg_pool2d));
  m.impl("avg_pool2d.out", TORCH_FN(wrapper_avg_pool2d_out_out));
  m.impl("avg_pool2d_backward", TORCH_FN(wrapper_avg_pool2d_backward));
  m.impl("avg_pool2d_backward.grad_input", TORCH_FN(wrapper_avg_pool2d_backward_out_grad_input));
  m.impl("avg_pool3d", TORCH_FN(wrapper_avg_pool3d));
  m.impl("avg_pool3d.out", TORCH_FN(wrapper_avg_pool3d_out_out));
  m.impl("avg_pool3d_backward", TORCH_FN(wrapper_avg_pool3d_backward));
  m.impl("avg_pool3d_backward.grad_input", TORCH_FN(wrapper_avg_pool3d_backward_out_grad_input));
  m.impl("fractional_max_pool2d", TORCH_FN(wrapper_fractional_max_pool2d));
  m.impl("fractional_max_pool2d.output", TORCH_FN(wrapper_fractional_max_pool2d_out_output));
  m.impl("max_pool2d_with_indices", TORCH_FN(wrapper_max_pool2d_with_indices));
  m.impl("max_pool2d_with_indices.out", TORCH_FN(wrapper_max_pool2d_with_indices_out_out));
  m.impl("max_pool2d_with_indices_backward", TORCH_FN(wrapper_max_pool2d_with_indices_backward));
  m.impl("max_pool2d_with_indices_backward.grad_input", TORCH_FN(wrapper_max_pool2d_with_indices_backward_out_grad_input));
  m.impl("reflection_pad1d", TORCH_FN(wrapper_reflection_pad1d));
  m.impl("reflection_pad1d.out", TORCH_FN(wrapper_reflection_pad1d_out_out));
  m.impl("reflection_pad1d_backward", TORCH_FN(wrapper_reflection_pad1d_backward));
  m.impl("reflection_pad1d_backward.grad_input", TORCH_FN(wrapper_reflection_pad1d_backward_out_grad_input));
  m.impl("reflection_pad3d", TORCH_FN(wrapper_reflection_pad3d));
  m.impl("reflection_pad3d.out", TORCH_FN(wrapper_reflection_pad3d_out_out));
  m.impl("reflection_pad3d_backward", TORCH_FN(wrapper_reflection_pad3d_backward));
  m.impl("reflection_pad3d_backward.grad_input", TORCH_FN(wrapper_reflection_pad3d_backward_out_grad_input));
  m.impl("replication_pad1d", TORCH_FN(wrapper_replication_pad1d));
  m.impl("replication_pad1d.out", TORCH_FN(wrapper_replication_pad1d_out_out));
  m.impl("replication_pad1d_backward", TORCH_FN(wrapper_replication_pad1d_backward));
  m.impl("replication_pad1d_backward.grad_input", TORCH_FN(wrapper_replication_pad1d_backward_out_grad_input));
  m.impl("replication_pad2d", TORCH_FN(wrapper_replication_pad2d));
  m.impl("replication_pad2d.out", TORCH_FN(wrapper_replication_pad2d_out_out));
  m.impl("replication_pad3d", TORCH_FN(wrapper_replication_pad3d));
  m.impl("replication_pad3d.out", TORCH_FN(wrapper_replication_pad3d_out_out));
  m.impl("upsample_linear1d", TORCH_FN(wrapper_upsample_linear1d));
  m.impl("upsample_linear1d.out", TORCH_FN(wrapper_upsample_linear1d_out_out));
  m.impl("upsample_linear1d_backward", TORCH_FN(wrapper_upsample_linear1d_backward));
  m.impl("upsample_linear1d_backward.grad_input", TORCH_FN(wrapper_upsample_linear1d_backward_out_grad_input));
  m.impl("upsample_bilinear2d", TORCH_FN(wrapper_upsample_bilinear2d));
  m.impl("upsample_bilinear2d.out", TORCH_FN(wrapper_upsample_bilinear2d_out_out));
  m.impl("upsample_bilinear2d_backward", TORCH_FN(wrapper_upsample_bilinear2d_backward));
  m.impl("upsample_bilinear2d_backward.grad_input", TORCH_FN(wrapper_upsample_bilinear2d_backward_out_grad_input));
  m.impl("upsample_bicubic2d", TORCH_FN(wrapper_upsample_bicubic2d));
  m.impl("upsample_bicubic2d.out", TORCH_FN(wrapper_upsample_bicubic2d_out_out));
  m.impl("upsample_bicubic2d_backward", TORCH_FN(wrapper_upsample_bicubic2d_backward));
  m.impl("upsample_bicubic2d_backward.grad_input", TORCH_FN(wrapper_upsample_bicubic2d_backward_out_grad_input));
  m.impl("upsample_trilinear3d", TORCH_FN(wrapper_upsample_trilinear3d));
  m.impl("upsample_trilinear3d.out", TORCH_FN(wrapper_upsample_trilinear3d_out_out));
  m.impl("upsample_trilinear3d_backward", TORCH_FN(wrapper_upsample_trilinear3d_backward));
  m.impl("upsample_trilinear3d_backward.grad_input", TORCH_FN(wrapper_upsample_trilinear3d_backward_out_grad_input));
  m.impl("upsample_nearest1d", TORCH_FN(wrapper_upsample_nearest1d));
  m.impl("upsample_nearest1d.out", TORCH_FN(wrapper_upsample_nearest1d_out_out));
  m.impl("upsample_nearest1d_backward", TORCH_FN(wrapper_upsample_nearest1d_backward));
  m.impl("upsample_nearest1d_backward.grad_input", TORCH_FN(wrapper_upsample_nearest1d_backward_out_grad_input));
  m.impl("upsample_nearest2d", TORCH_FN(wrapper_upsample_nearest2d));
  m.impl("upsample_nearest2d.out", TORCH_FN(wrapper_upsample_nearest2d_out_out));
  m.impl("upsample_nearest2d_backward", TORCH_FN(wrapper_upsample_nearest2d_backward));
  m.impl("upsample_nearest2d_backward.grad_input", TORCH_FN(wrapper_upsample_nearest2d_backward_out_grad_input));
  m.impl("upsample_nearest3d", TORCH_FN(wrapper_upsample_nearest3d));
  m.impl("upsample_nearest3d.out", TORCH_FN(wrapper_upsample_nearest3d_out_out));
  m.impl("upsample_nearest3d_backward", TORCH_FN(wrapper_upsample_nearest3d_backward));
  m.impl("upsample_nearest3d_backward.grad_input", TORCH_FN(wrapper_upsample_nearest3d_backward_out_grad_input));
  m.impl("sigmoid_backward", TORCH_FN(wrapper_sigmoid_backward));
  m.impl("sigmoid_backward.grad_input", TORCH_FN(wrapper_sigmoid_backward_out_grad_input));
  m.impl("logit_backward", TORCH_FN(wrapper_logit_backward));
  m.impl("logit_backward.grad_input", TORCH_FN(wrapper_logit_backward_out_grad_input));
  m.impl("tanh_backward", TORCH_FN(wrapper_tanh_backward));
  m.impl("tanh_backward.grad_input", TORCH_FN(wrapper_tanh_backward_out_grad_input));
  m.impl("slow_conv_transpose2d", TORCH_FN(wrapper_slow_conv_transpose2d));
  m.impl("slow_conv_transpose2d.out", TORCH_FN(wrapper_slow_conv_transpose2d_out_out));
  m.impl("isposinf", TORCH_FN(wrapper_isposinf));
  m.impl("isposinf.out", TORCH_FN(wrapper_isposinf_out_out));
  m.impl("isneginf", TORCH_FN(wrapper_isneginf));
  m.impl("isneginf.out", TORCH_FN(wrapper_isneginf_out_out));
  m.impl("special_entr", TORCH_FN(wrapper_special_entr));
  m.impl("special_entr.out", TORCH_FN(wrapper_special_entr_out_out));
  m.impl("special_ndtri", TORCH_FN(wrapper_special_ndtri));
  m.impl("special_ndtri.out", TORCH_FN(wrapper_special_ndtri_out_out));
  m.impl("special_erfcx", TORCH_FN(wrapper_special_erfcx));
  m.impl("special_erfcx.out", TORCH_FN(wrapper_special_erfcx_out_out));
  m.impl("special_xlog1py", TORCH_FN(wrapper_special_xlog1py));
  m.impl("special_xlog1py.out", TORCH_FN(wrapper_special_xlog1py_out_out));
  m.impl("special_zeta", TORCH_FN(wrapper_special_zeta));
  m.impl("special_zeta.out", TORCH_FN(wrapper_special_zeta_out_out));
  m.impl("special_i0e", TORCH_FN(wrapper_special_i0e));
  m.impl("special_i0e.out", TORCH_FN(wrapper_special_i0e_out_out));
  m.impl("special_i1", TORCH_FN(wrapper_special_i1));
  m.impl("special_i1.out", TORCH_FN(wrapper_special_i1_out_out));
  m.impl("special_i1e", TORCH_FN(wrapper_special_i1e));
  m.impl("special_i1e.out", TORCH_FN(wrapper_special_i1e_out_out));
  m.impl("_linalg_inv_out_helper_",
  TORCH_FN(wrapper___linalg_inv_out_helper_));
}

} // anonymous namespace

namespace meta {


at::Tensor sgn(const at::Tensor & self) {
return wrapper_sgn(self);
}

at::Tensor & sgn_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sgn_out_out(self, out);
}

at::Tensor & sgn_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sgn_out_out(self, out);
}

at::Tensor & sgn_(at::Tensor & self) {
return wrapper_sgn_(self);
}

at::Tensor acos(const at::Tensor & self) {
return wrapper_acos(self);
}

at::Tensor & acos_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_acos_out_out(self, out);
}

at::Tensor & acos_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_acos_out_out(self, out);
}

at::Tensor & acos_(at::Tensor & self) {
return wrapper_acos_(self);
}

at::Tensor add(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_add_Tensor(self, other, alpha);
}

at::Tensor & add_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_add_out_out(self, other, alpha, out);
}

at::Tensor & add_outf(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_add_out_out(self, other, alpha, out);
}

at::Tensor & add_(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_add__Tensor(self, other, alpha);
}

at::Tensor & _add_relu_(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_Tensor__add_relu__Tensor(self, other, alpha);
}

at::Tensor & _add_relu_(at::Tensor & self, const at::Scalar & other, const at::Scalar & alpha) {
return wrapper_Scalar__add_relu__Scalar(self, other, alpha);
}

at::Tensor addmv(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmv(self, mat, vec, beta, alpha);
}

at::Tensor & addmv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmv_out_out(self, mat, vec, beta, alpha, out);
}

at::Tensor & addmv_outf(const at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_addmv_out_out(self, mat, vec, beta, alpha, out);
}

at::Tensor & addmv_(at::Tensor & self, const at::Tensor & mat, const at::Tensor & vec, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmv_(self, mat, vec, beta, alpha);
}

at::Tensor all(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_all_dim(self, dim, keepdim);
}

at::Tensor & all_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_all_out_out(self, dim, keepdim, out);
}

at::Tensor & all_outf(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out) {
return wrapper_all_out_out(self, dim, keepdim, out);
}

at::Tensor any(const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_any_dim(self, dim, keepdim);
}

at::Tensor & any_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim) {
return wrapper_any_out_out(self, dim, keepdim, out);
}

at::Tensor & any_outf(const at::Tensor & self, int64_t dim, bool keepdim, at::Tensor & out) {
return wrapper_any_out_out(self, dim, keepdim, out);
}

at::Tensor argmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_argmax(self, dim, keepdim);
}

at::Tensor & argmax_out(at::Tensor & out, const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_argmax_out_out(self, dim, keepdim, out);
}

at::Tensor & argmax_outf(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & out) {
return wrapper_argmax_out_out(self, dim, keepdim, out);
}

at::Tensor argmin(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_argmin(self, dim, keepdim);
}

at::Tensor & argmin_out(at::Tensor & out, const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_argmin_out_out(self, dim, keepdim, out);
}

at::Tensor & argmin_outf(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & out) {
return wrapper_argmin_out_out(self, dim, keepdim, out);
}

at::Tensor acosh(const at::Tensor & self) {
return wrapper_acosh(self);
}

at::Tensor & acosh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_acosh_out_out(self, out);
}

at::Tensor & acosh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_acosh_out_out(self, out);
}

at::Tensor & acosh_(at::Tensor & self) {
return wrapper_acosh_(self);
}

at::Tensor asinh(const at::Tensor & self) {
return wrapper_asinh(self);
}

at::Tensor & asinh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_asinh_out_out(self, out);
}

at::Tensor & asinh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_asinh_out_out(self, out);
}

at::Tensor & asinh_(at::Tensor & self) {
return wrapper_asinh_(self);
}

at::Tensor atanh(const at::Tensor & self) {
return wrapper_atanh(self);
}

at::Tensor & atanh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_atanh_out_out(self, out);
}

at::Tensor & atanh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_atanh_out_out(self, out);
}

at::Tensor & atanh_(at::Tensor & self) {
return wrapper_atanh_(self);
}

at::Tensor as_strided(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride, c10::optional<int64_t> storage_offset) {
return wrapper__as_strided(self, size, stride, storage_offset);
}

at::Tensor asin(const at::Tensor & self) {
return wrapper_asin(self);
}

at::Tensor & asin_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_asin_out_out(self, out);
}

at::Tensor & asin_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_asin_out_out(self, out);
}

at::Tensor & asin_(at::Tensor & self) {
return wrapper_asin_(self);
}

at::Tensor atan(const at::Tensor & self) {
return wrapper_atan(self);
}

at::Tensor & atan_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_atan_out_out(self, out);
}

at::Tensor & atan_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_atan_out_out(self, out);
}

at::Tensor & atan_(at::Tensor & self) {
return wrapper_atan_(self);
}

at::Tensor & baddbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper__baddbmm_(self, batch1, batch2, beta, alpha);
}

at::Tensor & bernoulli_(at::Tensor & self, const at::Tensor & p, c10::optional<at::Generator> generator) {
return wrapper_Tensor_bernoulli__Tensor(self, p, generator);
}

at::Tensor & bernoulli_(at::Tensor & self, double p, c10::optional<at::Generator> generator) {
return wrapper_float_bernoulli__float(self, p, generator);
}

at::Tensor bitwise_not(const at::Tensor & self) {
return wrapper_bitwise_not(self);
}

at::Tensor & bitwise_not_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_bitwise_not_out_out(self, out);
}

at::Tensor & bitwise_not_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_bitwise_not_out_out(self, out);
}

at::Tensor & bitwise_not_(at::Tensor & self) {
return wrapper_bitwise_not_(self);
}

at::Tensor copysign(const at::Tensor & self, const at::Tensor & other) {
return wrapper_copysign_Tensor(self, other);
}

at::Tensor & copysign_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_copysign_out_out(self, other, out);
}

at::Tensor & copysign_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_copysign_out_out(self, other, out);
}

at::Tensor & copysign_(at::Tensor & self, const at::Tensor & other) {
return wrapper_copysign__Tensor(self, other);
}

at::Tensor ceil(const at::Tensor & self) {
return wrapper_ceil(self);
}

at::Tensor & ceil_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_ceil_out_out(self, out);
}

at::Tensor & ceil_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_ceil_out_out(self, out);
}

at::Tensor & ceil_(at::Tensor & self) {
return wrapper_ceil_(self);
}

at::Tensor clamp(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
return wrapper_clamp(self, min, max);
}

at::Tensor & clamp_out(at::Tensor & out, const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
return wrapper_clamp_out_out(self, min, max, out);
}

at::Tensor & clamp_outf(const at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max, at::Tensor & out) {
return wrapper_clamp_out_out(self, min, max, out);
}

at::Tensor & clamp_(at::Tensor & self, const c10::optional<at::Scalar> & min, const c10::optional<at::Scalar> & max) {
return wrapper_clamp_(self, min, max);
}

at::Tensor cos(const at::Tensor & self) {
return wrapper_cos(self);
}

at::Tensor & cos_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_cos_out_out(self, out);
}

at::Tensor & cos_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_cos_out_out(self, out);
}

at::Tensor & cos_(at::Tensor & self) {
return wrapper_cos_(self);
}

at::Tensor cosh(const at::Tensor & self) {
return wrapper_cosh(self);
}

at::Tensor & cosh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_cosh_out_out(self, out);
}

at::Tensor & cosh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_cosh_out_out(self, out);
}

at::Tensor & cosh_(at::Tensor & self) {
return wrapper_cosh_(self);
}

at::Tensor cumprod(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumprod(self, dim, dtype);
}

at::Tensor & cumprod_out(at::Tensor & out, const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumprod_out_out(self, dim, dtype, out);
}

at::Tensor & cumprod_outf(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_cumprod_out_out(self, dim, dtype, out);
}

at::Tensor & cumprod_(at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumprod_(self, dim, dtype);
}

at::Tensor cumsum(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumsum(self, dim, dtype);
}

at::Tensor & cumsum_out(at::Tensor & out, const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumsum_out_out(self, dim, dtype, out);
}

at::Tensor & cumsum_outf(const at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_cumsum_out_out(self, dim, dtype, out);
}

at::Tensor & cumsum_(at::Tensor & self, int64_t dim, c10::optional<at::ScalarType> dtype) {
return wrapper_cumsum_(self, dim, dtype);
}

at::Tensor div(const at::Tensor & self, const at::Tensor & other) {
return wrapper_div_Tensor(self, other);
}

at::Tensor & div_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_div_out_out(self, other, out);
}

at::Tensor & div_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_div_out_out(self, other, out);
}

at::Tensor & div_(at::Tensor & self, const at::Tensor & other) {
return wrapper_div__Tensor(self, other);
}

at::Tensor div(const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
return wrapper_div_Tensor_mode(self, other, rounding_mode);
}

at::Tensor & div_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
return wrapper_div_out_out_mode(self, other, rounding_mode, out);
}

at::Tensor & div_outf(const at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode, at::Tensor & out) {
return wrapper_div_out_out_mode(self, other, rounding_mode, out);
}

at::Tensor & div_(at::Tensor & self, const at::Tensor & other, c10::optional<c10::string_view> rounding_mode) {
return wrapper_div__Tensor_mode(self, other, rounding_mode);
}

at::Tensor & embedding_renorm_(at::Tensor & self, const at::Tensor & indices, double max_norm, double norm_type) {
return wrapper__embedding_renorm_(self, indices, max_norm, norm_type);
}

at::Tensor empty(at::IntArrayRef size, at::TensorOptions options, c10::optional<at::MemoryFormat> memory_format) {
return wrapper_memory_format_empty_memory_format(size, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt(), c10::impl::check_tensor_options_and_extract_memory_format(options, memory_format));
}

at::Tensor empty(at::IntArrayRef size, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory, c10::optional<at::MemoryFormat> memory_format) {
return wrapper_memory_format_empty_memory_format(size, dtype, layout, device, pin_memory, memory_format);
}

const at::Tensor & resize_(const at::Tensor & self, at::IntArrayRef size, c10::optional<at::MemoryFormat> memory_format) {
return wrapper__resize_(self, size, memory_format);
}

at::Tensor empty_strided(at::IntArrayRef size, at::IntArrayRef stride, at::TensorOptions options) {
return wrapper__empty_strided(size, stride, optTypeMetaToScalarType(options.dtype_opt()), options.layout_opt(), options.device_opt(), options.pinned_memory_opt());
}

at::Tensor empty_strided(at::IntArrayRef size, at::IntArrayRef stride, c10::optional<at::ScalarType> dtype, c10::optional<at::Layout> layout, c10::optional<at::Device> device, c10::optional<bool> pin_memory) {
return wrapper__empty_strided(size, stride, dtype, layout, device, pin_memory);
}

at::Tensor erf(const at::Tensor & self) {
return wrapper_erf(self);
}

at::Tensor & erf_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_erf_out_out(self, out);
}

at::Tensor & erf_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_erf_out_out(self, out);
}

at::Tensor & erf_(at::Tensor & self) {
return wrapper_erf_(self);
}

at::Tensor erfc(const at::Tensor & self) {
return wrapper_erfc(self);
}

at::Tensor & erfc_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_erfc_out_out(self, out);
}

at::Tensor & erfc_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_erfc_out_out(self, out);
}

at::Tensor & erfc_(at::Tensor & self) {
return wrapper_erfc_(self);
}

at::Tensor exp(const at::Tensor & self) {
return wrapper_exp(self);
}

at::Tensor & exp_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_exp_out_out(self, out);
}

at::Tensor & exp_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_exp_out_out(self, out);
}

at::Tensor & exp_(at::Tensor & self) {
return wrapper_exp_(self);
}

at::Tensor exp2(const at::Tensor & self) {
return wrapper_exp2(self);
}

at::Tensor & exp2_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_exp2_out_out(self, out);
}

at::Tensor & exp2_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_exp2_out_out(self, out);
}

at::Tensor & exp2_(at::Tensor & self) {
return wrapper_exp2_(self);
}

at::Tensor expm1(const at::Tensor & self) {
return wrapper_expm1(self);
}

at::Tensor & expm1_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_expm1_out_out(self, out);
}

at::Tensor & expm1_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_expm1_out_out(self, out);
}

at::Tensor & expm1_(at::Tensor & self) {
return wrapper_expm1_(self);
}

at::Tensor & fill_(at::Tensor & self, const at::Scalar & value) {
return wrapper_Scalar_fill__Scalar(self, value);
}

at::Tensor & fill_(at::Tensor & self, const at::Tensor & value) {
return wrapper_Tensor_fill__Tensor(self, value);
}

at::Tensor floor(const at::Tensor & self) {
return wrapper_floor(self);
}

at::Tensor & floor_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_floor_out_out(self, out);
}

at::Tensor & floor_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_floor_out_out(self, out);
}

at::Tensor & floor_(at::Tensor & self) {
return wrapper_floor_(self);
}

at::Tensor & floor_divide_(at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor_floor_divide__Tensor(self, other);
}

at::Tensor frac(const at::Tensor & self) {
return wrapper_frac(self);
}

at::Tensor & frac_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_frac_out_out(self, out);
}

at::Tensor & frac_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_frac_out_out(self, out);
}

at::Tensor & frac_(at::Tensor & self) {
return wrapper_frac_(self);
}

at::Tensor gcd(const at::Tensor & self, const at::Tensor & other) {
return wrapper_gcd(self, other);
}

at::Tensor & gcd_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_gcd_out_out(self, other, out);
}

at::Tensor & gcd_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_gcd_out_out(self, other, out);
}

at::Tensor & gcd_(at::Tensor & self, const at::Tensor & other) {
return wrapper_gcd_(self, other);
}

at::Tensor lcm(const at::Tensor & self, const at::Tensor & other) {
return wrapper_lcm(self, other);
}

at::Tensor & lcm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_lcm_out_out(self, other, out);
}

at::Tensor & lcm_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_lcm_out_out(self, other, out);
}

at::Tensor & lcm_(at::Tensor & self, const at::Tensor & other) {
return wrapper_lcm_(self, other);
}

at::Tensor & _index_put_impl_(at::Tensor & self, const c10::List<c10::optional<at::Tensor>> & indices, const at::Tensor & values, bool accumulate, bool unsafe) {
return wrapper___index_put_impl_(self, indices, values, accumulate, unsafe);
}

at::Tensor isin(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert) {
return wrapper_isin_Tensor_Tensor(elements, test_elements, assume_unique, invert);
}

at::Tensor & isin_out(at::Tensor & out, const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert) {
return wrapper_isin_out_Tensor_Tensor_out(elements, test_elements, assume_unique, invert, out);
}

at::Tensor & isin_outf(const at::Tensor & elements, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out) {
return wrapper_isin_out_Tensor_Tensor_out(elements, test_elements, assume_unique, invert, out);
}

at::Tensor isin(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert) {
return wrapper_isin_Tensor_Scalar(elements, test_element, assume_unique, invert);
}

at::Tensor & isin_out(at::Tensor & out, const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert) {
return wrapper_isin_out_Tensor_Scalar_out(elements, test_element, assume_unique, invert, out);
}

at::Tensor & isin_outf(const at::Tensor & elements, const at::Scalar & test_element, bool assume_unique, bool invert, at::Tensor & out) {
return wrapper_isin_out_Tensor_Scalar_out(elements, test_element, assume_unique, invert, out);
}

at::Tensor isin(const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert) {
return wrapper_isin_Scalar_Tensor(element, test_elements, assume_unique, invert);
}

at::Tensor & isin_out(at::Tensor & out, const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert) {
return wrapper_isin_out_Scalar_Tensor_out(element, test_elements, assume_unique, invert, out);
}

at::Tensor & isin_outf(const at::Scalar & element, const at::Tensor & test_elements, bool assume_unique, bool invert, at::Tensor & out) {
return wrapper_isin_out_Scalar_Tensor_out(element, test_elements, assume_unique, invert, out);
}

at::Tensor log(const at::Tensor & self) {
return wrapper_log(self);
}

at::Tensor & log_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_log_out_out(self, out);
}

at::Tensor & log_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_log_out_out(self, out);
}

at::Tensor & log_(at::Tensor & self) {
return wrapper_log_(self);
}

at::Tensor log10(const at::Tensor & self) {
return wrapper_log10(self);
}

at::Tensor & log10_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_log10_out_out(self, out);
}

at::Tensor & log10_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_log10_out_out(self, out);
}

at::Tensor & log10_(at::Tensor & self) {
return wrapper_log10_(self);
}

at::Tensor log1p(const at::Tensor & self) {
return wrapper_log1p(self);
}

at::Tensor & log1p_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_log1p_out_out(self, out);
}

at::Tensor & log1p_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_log1p_out_out(self, out);
}

at::Tensor & log1p_(at::Tensor & self) {
return wrapper_log1p_(self);
}

at::Tensor log2(const at::Tensor & self) {
return wrapper_log2(self);
}

at::Tensor & log2_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_log2_out_out(self, out);
}

at::Tensor & log2_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_log2_out_out(self, out);
}

at::Tensor & log2_(at::Tensor & self) {
return wrapper_log2_(self);
}

at::Tensor logaddexp(const at::Tensor & self, const at::Tensor & other) {
return wrapper_logaddexp(self, other);
}

at::Tensor & logaddexp_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_logaddexp_out_out(self, other, out);
}

at::Tensor & logaddexp_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_logaddexp_out_out(self, other, out);
}

at::Tensor logaddexp2(const at::Tensor & self, const at::Tensor & other) {
return wrapper_logaddexp2(self, other);
}

at::Tensor & logaddexp2_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_logaddexp2_out_out(self, other, out);
}

at::Tensor & logaddexp2_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_logaddexp2_out_out(self, other, out);
}

at::Tensor xlogy(const at::Tensor & self, const at::Tensor & other) {
return wrapper_xlogy_Tensor(self, other);
}

at::Tensor & xlogy_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_xlogy_out_OutTensor(self, other, out);
}

at::Tensor & xlogy_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_xlogy_out_OutTensor(self, other, out);
}

at::Tensor & xlogy_(at::Tensor & self, const at::Tensor & other) {
return wrapper_xlogy__Tensor(self, other);
}

at::Tensor _log_softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
return wrapper__log_softmax(self, dim, half_to_float);
}

at::Tensor & _log_softmax_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool half_to_float) {
return wrapper__log_softmax_out_out(self, dim, half_to_float, out);
}

at::Tensor & _log_softmax_outf(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out) {
return wrapper__log_softmax_out_out(self, dim, half_to_float, out);
}

at::Tensor _log_softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
return wrapper__log_softmax_backward_data(grad_output, output, dim, self);
}

at::Tensor & _log_softmax_backward_data_out(at::Tensor & out, const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
return wrapper__log_softmax_backward_data_out_out(grad_output, output, dim, self, out);
}

at::Tensor & _log_softmax_backward_data_outf(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self, at::Tensor & out) {
return wrapper__log_softmax_backward_data_out_out(grad_output, output, dim, self, out);
}

::std::tuple<at::Tensor,at::Tensor> aminmax(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_aminmax(self, dim, keepdim);
}

::std::tuple<at::Tensor &,at::Tensor &> aminmax_out(at::Tensor & min, at::Tensor & max, const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
return wrapper_aminmax_out_out(self, dim, keepdim, min, max);
}

::std::tuple<at::Tensor &,at::Tensor &> aminmax_outf(const at::Tensor & self, c10::optional<int64_t> dim, bool keepdim, at::Tensor & min, at::Tensor & max) {
return wrapper_aminmax_out_out(self, dim, keepdim, min, max);
}

at::Tensor mean(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_mean_dim(self, dim, keepdim, dtype);
}

at::Tensor & mean_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_mean_out_out(self, dim, keepdim, dtype, out);
}

at::Tensor & mean_outf(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_mean_out_out(self, dim, keepdim, dtype, out);
}

at::Tensor mm(const at::Tensor & self, const at::Tensor & mat2) {
return wrapper_mm(self, mat2);
}

at::Tensor & mm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat2) {
return wrapper_mm_out_out(self, mat2, out);
}

at::Tensor & mm_outf(const at::Tensor & self, const at::Tensor & mat2, at::Tensor & out) {
return wrapper_mm_out_out(self, mat2, out);
}

at::Tensor mul(const at::Tensor & self, const at::Tensor & other) {
return wrapper_mul_Tensor(self, other);
}

at::Tensor & mul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_mul_out_out(self, other, out);
}

at::Tensor & mul_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_mul_out_out(self, other, out);
}

at::Tensor & mul_(at::Tensor & self, const at::Tensor & other) {
return wrapper_mul__Tensor(self, other);
}

at::Tensor reciprocal(const at::Tensor & self) {
return wrapper_reciprocal(self);
}

at::Tensor & reciprocal_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_reciprocal_out_out(self, out);
}

at::Tensor & reciprocal_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_reciprocal_out_out(self, out);
}

at::Tensor & reciprocal_(at::Tensor & self) {
return wrapper_reciprocal_(self);
}

at::Tensor neg(const at::Tensor & self) {
return wrapper_neg(self);
}

at::Tensor & neg_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_neg_out_out(self, out);
}

at::Tensor & neg_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_neg_out_out(self, out);
}

at::Tensor & neg_(at::Tensor & self) {
return wrapper_neg_(self);
}

at::Tensor _reshape_alias(const at::Tensor & self, at::IntArrayRef size, at::IntArrayRef stride) {
return wrapper___reshape_alias(self, size, stride);
}

at::Tensor round(const at::Tensor & self) {
return wrapper_round(self);
}

at::Tensor & round_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_round_out_out(self, out);
}

at::Tensor & round_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_round_out_out(self, out);
}

at::Tensor & round_(at::Tensor & self) {
return wrapper_round_(self);
}

at::Tensor & relu_(at::Tensor & self) {
return wrapper__relu_(self);
}

at::Tensor gelu(const at::Tensor & self) {
return wrapper_gelu(self);
}

at::Tensor & gelu_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_gelu_out_out(self, out);
}

at::Tensor & gelu_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_gelu_out_out(self, out);
}

at::Tensor gelu_backward(const at::Tensor & grad, const at::Tensor & self) {
return wrapper_gelu_backward(grad, self);
}

at::Tensor & gelu_backward_out(at::Tensor & grad_input, const at::Tensor & grad, const at::Tensor & self) {
return wrapper_gelu_backward_out_grad_input(grad, self, grad_input);
}

at::Tensor & gelu_backward_outf(const at::Tensor & grad, const at::Tensor & self, at::Tensor & grad_input) {
return wrapper_gelu_backward_out_grad_input(grad, self, grad_input);
}

at::Tensor hardshrink(const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_hardshrink(self, lambd);
}

at::Tensor & hardshrink_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_hardshrink_out_out(self, lambd, out);
}

at::Tensor & hardshrink_outf(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out) {
return wrapper_hardshrink_out_out(self, lambd, out);
}

at::Tensor hardshrink_backward(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_hardshrink_backward(grad_out, self, lambd);
}

at::Tensor & hardshrink_backward_out(at::Tensor & grad_input, const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_hardshrink_backward_out_grad_input(grad_out, self, lambd, grad_input);
}

at::Tensor & hardshrink_backward_outf(const at::Tensor & grad_out, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input) {
return wrapper_hardshrink_backward_out_grad_input(grad_out, self, lambd, grad_input);
}

at::Tensor rsqrt(const at::Tensor & self) {
return wrapper_rsqrt(self);
}

at::Tensor & rsqrt_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_rsqrt_out_out(self, out);
}

at::Tensor & rsqrt_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_rsqrt_out_out(self, out);
}

at::Tensor & rsqrt_(at::Tensor & self) {
return wrapper_rsqrt_(self);
}

at::Tensor silu(const at::Tensor & self) {
return wrapper_silu(self);
}

at::Tensor & silu_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_silu_out_out(self, out);
}

at::Tensor & silu_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_silu_out_out(self, out);
}

at::Tensor & silu_(at::Tensor & self) {
return wrapper_silu_(self);
}

at::Tensor silu_backward(const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper_silu_backward(grad_output, self);
}

at::Tensor & silu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper_silu_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor & silu_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
return wrapper_silu_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor mish(const at::Tensor & self) {
return wrapper_mish(self);
}

at::Tensor & mish_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_mish_out_out(self, out);
}

at::Tensor & mish_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_mish_out_out(self, out);
}

at::Tensor & mish_(at::Tensor & self) {
return wrapper_mish_(self);
}

at::Tensor sigmoid(const at::Tensor & self) {
return wrapper_sigmoid(self);
}

at::Tensor & sigmoid_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sigmoid_out_out(self, out);
}

at::Tensor & sigmoid_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sigmoid_out_out(self, out);
}

at::Tensor & sigmoid_(at::Tensor & self) {
return wrapper_sigmoid_(self);
}

at::Tensor & logit_(at::Tensor & self, c10::optional<double> eps) {
return wrapper__logit_(self, eps);
}

at::Tensor sin(const at::Tensor & self) {
return wrapper_sin(self);
}

at::Tensor & sin_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sin_out_out(self, out);
}

at::Tensor & sin_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sin_out_out(self, out);
}

at::Tensor & sin_(at::Tensor & self) {
return wrapper_sin_(self);
}

at::Tensor sinc(const at::Tensor & self) {
return wrapper_sinc(self);
}

at::Tensor & sinc_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sinc_out_out(self, out);
}

at::Tensor & sinc_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sinc_out_out(self, out);
}

at::Tensor & sinc_(at::Tensor & self) {
return wrapper_sinc_(self);
}

at::Tensor sinh(const at::Tensor & self) {
return wrapper_sinh(self);
}

at::Tensor & sinh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sinh_out_out(self, out);
}

at::Tensor & sinh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sinh_out_out(self, out);
}

at::Tensor & sinh_(at::Tensor & self) {
return wrapper_sinh_(self);
}

at::Tensor _softmax(const at::Tensor & self, int64_t dim, bool half_to_float) {
return wrapper__softmax(self, dim, half_to_float);
}

at::Tensor & _softmax_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool half_to_float) {
return wrapper__softmax_out_out(self, dim, half_to_float, out);
}

at::Tensor & _softmax_outf(const at::Tensor & self, int64_t dim, bool half_to_float, at::Tensor & out) {
return wrapper__softmax_out_out(self, dim, half_to_float, out);
}

at::Tensor _softmax_backward_data(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
return wrapper__softmax_backward_data(grad_output, output, dim, self);
}

at::Tensor & _softmax_backward_data_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self) {
return wrapper__softmax_backward_data_out_out(grad_output, output, dim, self, grad_input);
}

at::Tensor & _softmax_backward_data_outf(const at::Tensor & grad_output, const at::Tensor & output, int64_t dim, const at::Tensor & self, at::Tensor & grad_input) {
return wrapper__softmax_backward_data_out_out(grad_output, output, dim, self, grad_input);
}

at::Tensor sum(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_sum_dim_IntList(self, dim, keepdim, dtype);
}

at::Tensor & sum_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_sum_out_IntList_out(self, dim, keepdim, dtype, out);
}

at::Tensor & sum_outf(const at::Tensor & self, at::IntArrayRef dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_sum_out_IntList_out(self, dim, keepdim, dtype, out);
}

at::Tensor sqrt(const at::Tensor & self) {
return wrapper_sqrt(self);
}

at::Tensor & sqrt_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sqrt_out_out(self, out);
}

at::Tensor & sqrt_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sqrt_out_out(self, out);
}

at::Tensor & sqrt_(at::Tensor & self) {
return wrapper_sqrt_(self);
}

at::Tensor prod(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_prod_dim_int(self, dim, keepdim, dtype);
}

at::Tensor & prod_out(at::Tensor & out, const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype) {
return wrapper_prod_out_int_out(self, dim, keepdim, dtype, out);
}

at::Tensor & prod_outf(const at::Tensor & self, int64_t dim, bool keepdim, c10::optional<at::ScalarType> dtype, at::Tensor & out) {
return wrapper_prod_out_int_out(self, dim, keepdim, dtype, out);
}

at::Tensor tan(const at::Tensor & self) {
return wrapper_tan(self);
}

at::Tensor & tan_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_tan_out_out(self, out);
}

at::Tensor & tan_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_tan_out_out(self, out);
}

at::Tensor & tan_(at::Tensor & self) {
return wrapper_tan_(self);
}

at::Tensor tanh(const at::Tensor & self) {
return wrapper_tanh(self);
}

at::Tensor & tanh_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_tanh_out_out(self, out);
}

at::Tensor & tanh_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_tanh_out_out(self, out);
}

at::Tensor & tanh_(at::Tensor & self) {
return wrapper_tanh_(self);
}

at::Tensor threshold(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
return wrapper_threshold(self, threshold, value);
}

at::Tensor & threshold_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
return wrapper_threshold_out_out(self, threshold, value, out);
}

at::Tensor & threshold_outf(const at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value, at::Tensor & out) {
return wrapper_threshold_out_out(self, threshold, value, out);
}

at::Tensor & threshold_(at::Tensor & self, const at::Scalar & threshold, const at::Scalar & value) {
return wrapper_threshold_(self, threshold, value);
}

at::Tensor threshold_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold) {
return wrapper_threshold_backward(grad_output, self, threshold);
}

at::Tensor & threshold_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold) {
return wrapper_threshold_backward_out_grad_input(grad_output, self, threshold, grad_input);
}

at::Tensor & threshold_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & threshold, at::Tensor & grad_input) {
return wrapper_threshold_backward_out_grad_input(grad_output, self, threshold, grad_input);
}

at::Tensor & _mkldnn_transpose_(at::Tensor & self, int64_t dim0, int64_t dim1) {
return wrapper___mkldnn_transpose_(self, dim0, dim1);
}

at::Tensor trunc(const at::Tensor & self) {
return wrapper_trunc(self);
}

at::Tensor & trunc_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_trunc_out_out(self, out);
}

at::Tensor & trunc_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_trunc_out_out(self, out);
}

at::Tensor & trunc_(at::Tensor & self) {
return wrapper_trunc_(self);
}

at::Tensor norm(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
return wrapper_norm_ScalarOpt_dim_dtype(self, p, dim, keepdim, dtype);
}

at::Tensor & norm_out(at::Tensor & out, const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype) {
return wrapper_norm_out_dtype_out(self, p, dim, keepdim, dtype, out);
}

at::Tensor & norm_outf(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::ScalarType dtype, at::Tensor & out) {
return wrapper_norm_out_dtype_out(self, p, dim, keepdim, dtype, out);
}

at::Tensor norm(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim) {
return wrapper_norm_ScalarOpt_dim(self, p, dim, keepdim);
}

at::Tensor & norm_out(at::Tensor & out, const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim) {
return wrapper_norm_out_out(self, p, dim, keepdim, out);
}

at::Tensor & norm_outf(const at::Tensor & self, const c10::optional<at::Scalar> & p, at::IntArrayRef dim, bool keepdim, at::Tensor & out) {
return wrapper_norm_out_out(self, p, dim, keepdim, out);
}

const at::Tensor & resize_as_sparse_(const at::Tensor & self, const at::Tensor & the_template) {
return wrapper__resize_as_sparse_(self, the_template);
}

at::Tensor & zero_(at::Tensor & self) {
return wrapper__zero_(self);
}

at::Tensor sub(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_sub_Tensor(self, other, alpha);
}

at::Tensor & sub_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_sub_out_out(self, other, alpha, out);
}

at::Tensor & sub_outf(const at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_sub_out_out(self, other, alpha, out);
}

at::Tensor & sub_(at::Tensor & self, const at::Tensor & other, const at::Scalar & alpha) {
return wrapper_sub__Tensor(self, other, alpha);
}

at::Tensor heaviside(const at::Tensor & self, const at::Tensor & values) {
return wrapper_heaviside(self, values);
}

at::Tensor & heaviside_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & values) {
return wrapper_heaviside_out_out(self, values, out);
}

at::Tensor & heaviside_outf(const at::Tensor & self, const at::Tensor & values, at::Tensor & out) {
return wrapper_heaviside_out_out(self, values, out);
}

at::Tensor & heaviside_(at::Tensor & self, const at::Tensor & values) {
return wrapper_heaviside_(self, values);
}

at::Tensor addmm(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmm(self, mat1, mat2, beta, alpha);
}

at::Tensor & addmm_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmm_out_out(self, mat1, mat2, beta, alpha, out);
}

at::Tensor & addmm_outf(const at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha, at::Tensor & out) {
return wrapper_addmm_out_out(self, mat1, mat2, beta, alpha, out);
}

at::Tensor & addmm_(at::Tensor & self, const at::Tensor & mat1, const at::Tensor & mat2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper_addmm_(self, mat1, mat2, beta, alpha);
}

const at::Tensor & sparse_resize_(const at::Tensor & self, at::IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
return wrapper__sparse_resize_(self, size, sparse_dim, dense_dim);
}

const at::Tensor & sparse_resize_and_clear_(const at::Tensor & self, at::IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
return wrapper__sparse_resize_and_clear_(self, size, sparse_dim, dense_dim);
}

at::Tensor & _coalesced_(at::Tensor & self, bool coalesced) {
return wrapper___coalesced_(self, coalesced);
}

at::Tensor & copy_sparse_to_sparse_(at::Tensor & self, const at::Tensor & src, bool non_blocking) {
return wrapper__copy_sparse_to_sparse_(self, src, non_blocking);
}

at::Tensor & set_(at::Tensor & self, at::Storage source) {
return wrapper_source_Storage_set__source_Storage(self, source);
}

at::Tensor & set_(at::Tensor & self, at::Storage source, int64_t storage_offset, at::IntArrayRef size, at::IntArrayRef stride) {
return wrapper_source_Storage_storage_offset_set__source_Storage_storage_offset(self, source, storage_offset, size, stride);
}

at::Tensor & set_(at::Tensor & self, const at::Tensor & source) {
return wrapper_source_Tensor_set__source_Tensor(self, source);
}

at::Tensor & set_(at::Tensor & self) {
return wrapper__set_(self);
}

at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Scalar & value) {
return wrapper_Scalar_masked_fill__Scalar(self, mask, value);
}

at::Tensor & masked_fill_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & value) {
return wrapper_Tensor_masked_fill__Tensor(self, mask, value);
}

at::Tensor & masked_scatter_(at::Tensor & self, const at::Tensor & mask, const at::Tensor & source) {
return wrapper__masked_scatter_(self, mask, source);
}

at::Tensor view(const at::Tensor & self, at::IntArrayRef size) {
return wrapper__view(self, size);
}

at::Tensor & put_(at::Tensor & self, const at::Tensor & index, const at::Tensor & source, bool accumulate) {
return wrapper__put_(self, index, source, accumulate);
}

at::Tensor & index_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source, const at::Scalar & alpha) {
return wrapper_alpha_index_add__alpha(self, dim, index, source, alpha);
}

at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
return wrapper_int_Scalar_index_fill__int_Scalar(self, dim, index, value);
}

at::Tensor & index_fill_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & value) {
return wrapper_int_Tensor_index_fill__int_Tensor(self, dim, index, value);
}

at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_src(self, dim, index, src);
}

at::Tensor & scatter_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_out_src_out(self, dim, index, src, out);
}

at::Tensor & scatter_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, at::Tensor & out) {
return wrapper_scatter_out_src_out(self, dim, index, src, out);
}

at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter__src(self, dim, index, src);
}

at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
return wrapper_scatter_value(self, dim, index, value);
}

at::Tensor & scatter_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
return wrapper_scatter_out_value_out(self, dim, index, value, out);
}

at::Tensor & scatter_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, at::Tensor & out) {
return wrapper_scatter_out_value_out(self, dim, index, value, out);
}

at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value) {
return wrapper_scatter__value(self, dim, index, value);
}

at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
return wrapper_scatter_reduce(self, dim, index, src, reduce);
}

at::Tensor & scatter_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
return wrapper_scatter_out_reduce_out(self, dim, index, src, reduce, out);
}

at::Tensor & scatter_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce, at::Tensor & out) {
return wrapper_scatter_out_reduce_out(self, dim, index, src, reduce, out);
}

at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, c10::string_view reduce) {
return wrapper_scatter__reduce(self, dim, index, src, reduce);
}

at::Tensor scatter(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
return wrapper_scatter_value_reduce(self, dim, index, value, reduce);
}

at::Tensor & scatter_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
return wrapper_scatter_out_value_reduce_out(self, dim, index, value, reduce, out);
}

at::Tensor & scatter_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce, at::Tensor & out) {
return wrapper_scatter_out_value_reduce_out(self, dim, index, value, reduce, out);
}

at::Tensor & scatter_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Scalar & value, c10::string_view reduce) {
return wrapper_scatter__value_reduce(self, dim, index, value, reduce);
}

at::Tensor scatter_add(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_add(self, dim, index, src);
}

at::Tensor & scatter_add_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_add_out_out(self, dim, index, src, out);
}

at::Tensor & scatter_add_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src, at::Tensor & out) {
return wrapper_scatter_add_out_out(self, dim, index, src, out);
}

at::Tensor & scatter_add_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & src) {
return wrapper_scatter_add_(self, dim, index, src);
}

at::Tensor eq(const at::Tensor & self, const at::Scalar & other) {
return wrapper_eq_Scalar(self, other);
}

at::Tensor & eq_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_eq_out_Scalar_out(self, other, out);
}

at::Tensor & eq_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_eq_out_Scalar_out(self, other, out);
}

at::Tensor & eq_(at::Tensor & self, const at::Scalar & other) {
return wrapper_eq__Scalar(self, other);
}

at::Tensor eq(const at::Tensor & self, const at::Tensor & other) {
return wrapper_eq_Tensor(self, other);
}

at::Tensor & eq_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_eq_out_Tensor_out(self, other, out);
}

at::Tensor & eq_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_eq_out_Tensor_out(self, other, out);
}

at::Tensor & eq_(at::Tensor & self, const at::Tensor & other) {
return wrapper_eq__Tensor(self, other);
}

at::Tensor bitwise_and(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_and_Tensor(self, other);
}

at::Tensor & bitwise_and_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_and_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_and_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_and_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_and_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_and__Tensor(self, other);
}

at::Tensor bitwise_or(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_or_Tensor(self, other);
}

at::Tensor & bitwise_or_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_or_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_or_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_or_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_or_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_or__Tensor(self, other);
}

at::Tensor bitwise_xor(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_xor_Tensor(self, other);
}

at::Tensor & bitwise_xor_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_xor_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_xor_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_xor_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_xor_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_xor__Tensor(self, other);
}

at::Tensor & __ilshift__(at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar___ilshift___Scalar(self, other);
}

at::Tensor & __ilshift__(at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor___ilshift___Tensor(self, other);
}

at::Tensor bitwise_left_shift(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_left_shift_Tensor(self, other);
}

at::Tensor & bitwise_left_shift_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_left_shift_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_left_shift_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_left_shift_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_left_shift_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_left_shift__Tensor(self, other);
}

at::Tensor & bitwise_left_shift_(at::Tensor & self, const at::Scalar & other) {
return wrapper_Tensor_Scalar_bitwise_left_shift__Tensor_Scalar(self, other);
}

at::Tensor & __irshift__(at::Tensor & self, const at::Scalar & other) {
return wrapper_Scalar___irshift___Scalar(self, other);
}

at::Tensor & __irshift__(at::Tensor & self, const at::Tensor & other) {
return wrapper_Tensor___irshift___Tensor(self, other);
}

at::Tensor bitwise_right_shift(const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_right_shift_Tensor(self, other);
}

at::Tensor & bitwise_right_shift_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_right_shift_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_right_shift_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_bitwise_right_shift_out_Tensor_out(self, other, out);
}

at::Tensor & bitwise_right_shift_(at::Tensor & self, const at::Tensor & other) {
return wrapper_bitwise_right_shift__Tensor(self, other);
}

at::Tensor & bitwise_right_shift_(at::Tensor & self, const at::Scalar & other) {
return wrapper_Tensor_Scalar_bitwise_right_shift__Tensor_Scalar(self, other);
}

at::Tensor & tril_(at::Tensor & self, int64_t diagonal) {
return wrapper__tril_(self, diagonal);
}

at::Tensor & triu_(at::Tensor & self, int64_t diagonal) {
return wrapper__triu_(self, diagonal);
}

at::Tensor digamma(const at::Tensor & self) {
return wrapper_digamma(self);
}

at::Tensor & digamma_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_digamma_out_out(self, out);
}

at::Tensor & digamma_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_digamma_out_out(self, out);
}

at::Tensor & digamma_(at::Tensor & self) {
return wrapper_digamma_(self);
}

at::Tensor & lerp_(at::Tensor & self, const at::Tensor & end, const at::Scalar & weight) {
return wrapper_Scalar_lerp__Scalar(self, end, weight);
}

at::Tensor & lerp_(at::Tensor & self, const at::Tensor & end, const at::Tensor & weight) {
return wrapper_Tensor_lerp__Tensor(self, end, weight);
}

at::Tensor & addbmm_(at::Tensor & self, const at::Tensor & batch1, const at::Tensor & batch2, const at::Scalar & beta, const at::Scalar & alpha) {
return wrapper__addbmm_(self, batch1, batch2, beta, alpha);
}

at::Tensor & random_(at::Tensor & self, int64_t from, c10::optional<int64_t> to, c10::optional<at::Generator> generator) {
return wrapper_from_random__from(self, from, to, generator);
}

at::Tensor & random_(at::Tensor & self, int64_t to, c10::optional<at::Generator> generator) {
return wrapper_to_random__to(self, to, generator);
}

at::Tensor & random_(at::Tensor & self, c10::optional<at::Generator> generator) {
return wrapper__random_(self, generator);
}

at::Tensor & uniform_(at::Tensor & self, double from, double to, c10::optional<at::Generator> generator) {
return wrapper__uniform_(self, from, to, generator);
}

at::Tensor & cauchy_(at::Tensor & self, double median, double sigma, c10::optional<at::Generator> generator) {
return wrapper__cauchy_(self, median, sigma, generator);
}

at::Tensor & log_normal_(at::Tensor & self, double mean, double std, c10::optional<at::Generator> generator) {
return wrapper__log_normal_(self, mean, std, generator);
}

at::Tensor & exponential_(at::Tensor & self, double lambd, c10::optional<at::Generator> generator) {
return wrapper__exponential_(self, lambd, generator);
}

at::Tensor & geometric_(at::Tensor & self, double p, c10::optional<at::Generator> generator) {
return wrapper__geometric_(self, p, generator);
}

at::Tensor ne(const at::Tensor & self, const at::Scalar & other) {
return wrapper_ne_Scalar(self, other);
}

at::Tensor & ne_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_ne_out_Scalar_out(self, other, out);
}

at::Tensor & ne_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_ne_out_Scalar_out(self, other, out);
}

at::Tensor & ne_(at::Tensor & self, const at::Scalar & other) {
return wrapper_ne__Scalar(self, other);
}

at::Tensor ne(const at::Tensor & self, const at::Tensor & other) {
return wrapper_ne_Tensor(self, other);
}

at::Tensor & ne_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_ne_out_Tensor_out(self, other, out);
}

at::Tensor & ne_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_ne_out_Tensor_out(self, other, out);
}

at::Tensor & ne_(at::Tensor & self, const at::Tensor & other) {
return wrapper_ne__Tensor(self, other);
}

at::Tensor ge(const at::Tensor & self, const at::Scalar & other) {
return wrapper_ge_Scalar(self, other);
}

at::Tensor & ge_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_ge_out_Scalar_out(self, other, out);
}

at::Tensor & ge_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_ge_out_Scalar_out(self, other, out);
}

at::Tensor & ge_(at::Tensor & self, const at::Scalar & other) {
return wrapper_ge__Scalar(self, other);
}

at::Tensor ge(const at::Tensor & self, const at::Tensor & other) {
return wrapper_ge_Tensor(self, other);
}

at::Tensor & ge_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_ge_out_Tensor_out(self, other, out);
}

at::Tensor & ge_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_ge_out_Tensor_out(self, other, out);
}

at::Tensor & ge_(at::Tensor & self, const at::Tensor & other) {
return wrapper_ge__Tensor(self, other);
}

at::Tensor le(const at::Tensor & self, const at::Scalar & other) {
return wrapper_le_Scalar(self, other);
}

at::Tensor & le_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_le_out_Scalar_out(self, other, out);
}

at::Tensor & le_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_le_out_Scalar_out(self, other, out);
}

at::Tensor & le_(at::Tensor & self, const at::Scalar & other) {
return wrapper_le__Scalar(self, other);
}

at::Tensor le(const at::Tensor & self, const at::Tensor & other) {
return wrapper_le_Tensor(self, other);
}

at::Tensor & le_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_le_out_Tensor_out(self, other, out);
}

at::Tensor & le_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_le_out_Tensor_out(self, other, out);
}

at::Tensor & le_(at::Tensor & self, const at::Tensor & other) {
return wrapper_le__Tensor(self, other);
}

at::Tensor gt(const at::Tensor & self, const at::Scalar & other) {
return wrapper_gt_Scalar(self, other);
}

at::Tensor & gt_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_gt_out_Scalar_out(self, other, out);
}

at::Tensor & gt_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_gt_out_Scalar_out(self, other, out);
}

at::Tensor & gt_(at::Tensor & self, const at::Scalar & other) {
return wrapper_gt__Scalar(self, other);
}

at::Tensor gt(const at::Tensor & self, const at::Tensor & other) {
return wrapper_gt_Tensor(self, other);
}

at::Tensor & gt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_gt_out_Tensor_out(self, other, out);
}

at::Tensor & gt_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_gt_out_Tensor_out(self, other, out);
}

at::Tensor & gt_(at::Tensor & self, const at::Tensor & other) {
return wrapper_gt__Tensor(self, other);
}

at::Tensor lt(const at::Tensor & self, const at::Scalar & other) {
return wrapper_lt_Scalar(self, other);
}

at::Tensor & lt_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & other) {
return wrapper_lt_out_Scalar_out(self, other, out);
}

at::Tensor & lt_outf(const at::Tensor & self, const at::Scalar & other, at::Tensor & out) {
return wrapper_lt_out_Scalar_out(self, other, out);
}

at::Tensor & lt_(at::Tensor & self, const at::Scalar & other) {
return wrapper_lt__Scalar(self, other);
}

at::Tensor lt(const at::Tensor & self, const at::Tensor & other) {
return wrapper_lt_Tensor(self, other);
}

at::Tensor & lt_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_lt_out_Tensor_out(self, other, out);
}

at::Tensor & lt_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_lt_out_Tensor_out(self, other, out);
}

at::Tensor & lt_(at::Tensor & self, const at::Tensor & other) {
return wrapper_lt__Tensor(self, other);
}

at::Tensor gather(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
return wrapper_gather(self, dim, index, sparse_grad);
}

at::Tensor & gather_out(at::Tensor & out, const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad) {
return wrapper_gather_out_out(self, dim, index, sparse_grad, out);
}

at::Tensor & gather_outf(const at::Tensor & self, int64_t dim, const at::Tensor & index, bool sparse_grad, at::Tensor & out) {
return wrapper_gather_out_out(self, dim, index, sparse_grad, out);
}

at::Tensor addcmul(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcmul(self, tensor1, tensor2, value);
}

at::Tensor & addcmul_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcmul_out_out(self, tensor1, tensor2, value, out);
}

at::Tensor & addcmul_outf(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out) {
return wrapper_addcmul_out_out(self, tensor1, tensor2, value, out);
}

at::Tensor & addcmul_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcmul_(self, tensor1, tensor2, value);
}

at::Tensor addcdiv(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcdiv(self, tensor1, tensor2, value);
}

at::Tensor & addcdiv_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcdiv_out_out(self, tensor1, tensor2, value, out);
}

at::Tensor & addcdiv_outf(const at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value, at::Tensor & out) {
return wrapper_addcdiv_out_out(self, tensor1, tensor2, value, out);
}

at::Tensor & addcdiv_(at::Tensor & self, const at::Tensor & tensor1, const at::Tensor & tensor2, const at::Scalar & value) {
return wrapper_addcdiv_(self, tensor1, tensor2, value);
}

at::Tensor lgamma(const at::Tensor & self) {
return wrapper_lgamma(self);
}

at::Tensor & lgamma_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_lgamma_out_out(self, out);
}

at::Tensor & lgamma_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_lgamma_out_out(self, out);
}

at::Tensor & lgamma_(at::Tensor & self) {
return wrapper_lgamma_(self);
}

at::Tensor polygamma(int64_t n, const at::Tensor & self) {
return wrapper_polygamma(n, self);
}

at::Tensor & polygamma_out(at::Tensor & out, int64_t n, const at::Tensor & self) {
return wrapper_polygamma_out_out(n, self, out);
}

at::Tensor & polygamma_outf(int64_t n, const at::Tensor & self, at::Tensor & out) {
return wrapper_polygamma_out_out(n, self, out);
}

at::Tensor erfinv(const at::Tensor & self) {
return wrapper_erfinv(self);
}

at::Tensor & erfinv_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_erfinv_out_out(self, out);
}

at::Tensor & erfinv_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_erfinv_out_out(self, out);
}

at::Tensor & erfinv_(at::Tensor & self) {
return wrapper_erfinv_(self);
}

at::Tensor i0(const at::Tensor & self) {
return wrapper_i0(self);
}

at::Tensor & i0_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_i0_out_out(self, out);
}

at::Tensor & i0_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_i0_out_out(self, out);
}

at::Tensor & i0_(at::Tensor & self) {
return wrapper_i0_(self);
}

at::Tensor sign(const at::Tensor & self) {
return wrapper_sign(self);
}

at::Tensor & sign_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_sign_out_out(self, out);
}

at::Tensor & sign_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_sign_out_out(self, out);
}

at::Tensor & sign_(at::Tensor & self) {
return wrapper_sign_(self);
}

at::Tensor signbit(const at::Tensor & self) {
return wrapper_signbit(self);
}

at::Tensor & signbit_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_signbit_out_out(self, out);
}

at::Tensor & signbit_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_signbit_out_out(self, out);
}

at::Tensor atan2(const at::Tensor & self, const at::Tensor & other) {
return wrapper_atan2(self, other);
}

at::Tensor & atan2_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_atan2_out_out(self, other, out);
}

at::Tensor & atan2_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_atan2_out_out(self, other, out);
}

at::Tensor & atan2_(at::Tensor & self, const at::Tensor & other) {
return wrapper_atan2_(self, other);
}

at::Tensor fmod(const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmod_Tensor(self, other);
}

at::Tensor & fmod_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmod_out_Tensor_out(self, other, out);
}

at::Tensor & fmod_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_fmod_out_Tensor_out(self, other, out);
}

at::Tensor & fmod_(at::Tensor & self, const at::Tensor & other) {
return wrapper_fmod__Tensor(self, other);
}

at::Tensor hypot(const at::Tensor & self, const at::Tensor & other) {
return wrapper_hypot(self, other);
}

at::Tensor & hypot_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_hypot_out_out(self, other, out);
}

at::Tensor & hypot_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_hypot_out_out(self, other, out);
}

at::Tensor & hypot_(at::Tensor & self, const at::Tensor & other) {
return wrapper_hypot_(self, other);
}

at::Tensor igamma(const at::Tensor & self, const at::Tensor & other) {
return wrapper_igamma(self, other);
}

at::Tensor & igamma_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_igamma_out_out(self, other, out);
}

at::Tensor & igamma_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_igamma_out_out(self, other, out);
}

at::Tensor & igamma_(at::Tensor & self, const at::Tensor & other) {
return wrapper_igamma_(self, other);
}

at::Tensor igammac(const at::Tensor & self, const at::Tensor & other) {
return wrapper_igammac(self, other);
}

at::Tensor & igammac_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_igammac_out_out(self, other, out);
}

at::Tensor & igammac_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_igammac_out_out(self, other, out);
}

at::Tensor & igammac_(at::Tensor & self, const at::Tensor & other) {
return wrapper_igammac_(self, other);
}

at::Tensor nextafter(const at::Tensor & self, const at::Tensor & other) {
return wrapper_nextafter(self, other);
}

at::Tensor & nextafter_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_nextafter_out_out(self, other, out);
}

at::Tensor & nextafter_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_nextafter_out_out(self, other, out);
}

at::Tensor & nextafter_(at::Tensor & self, const at::Tensor & other) {
return wrapper_nextafter_(self, other);
}

at::Tensor remainder(const at::Tensor & self, const at::Tensor & other) {
return wrapper_remainder_Tensor(self, other);
}

at::Tensor & remainder_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_remainder_out_Tensor_out(self, other, out);
}

at::Tensor & remainder_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_remainder_out_Tensor_out(self, other, out);
}

at::Tensor & remainder_(at::Tensor & self, const at::Tensor & other) {
return wrapper_remainder__Tensor(self, other);
}

at::Tensor fmin(const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmin(self, other);
}

at::Tensor & fmin_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmin_out_out(self, other, out);
}

at::Tensor & fmin_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_fmin_out_out(self, other, out);
}

at::Tensor fmax(const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmax(self, other);
}

at::Tensor & fmax_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_fmax_out_out(self, other, out);
}

at::Tensor & fmax_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_fmax_out_out(self, other, out);
}

at::Tensor maximum(const at::Tensor & self, const at::Tensor & other) {
return wrapper_maximum(self, other);
}

at::Tensor & maximum_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_maximum_out_out(self, other, out);
}

at::Tensor & maximum_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_maximum_out_out(self, other, out);
}

at::Tensor minimum(const at::Tensor & self, const at::Tensor & other) {
return wrapper_minimum(self, other);
}

at::Tensor & minimum_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_minimum_out_out(self, other, out);
}

at::Tensor & minimum_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_minimum_out_out(self, other, out);
}

::std::tuple<at::Tensor,at::Tensor> topk(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
return wrapper_topk(self, k, dim, largest, sorted);
}

::std::tuple<at::Tensor &,at::Tensor &> topk_out(at::Tensor & values, at::Tensor & indices, const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
return wrapper_topk_out_values(self, k, dim, largest, sorted, values, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> topk_outf(const at::Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted, at::Tensor & values, at::Tensor & indices) {
return wrapper_topk_out_values(self, k, dim, largest, sorted, values, indices);
}

at::Tensor all(const at::Tensor & self) {
return wrapper_all(self);
}

at::Tensor & all_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_all_out_all_out(self, out);
}

at::Tensor & all_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_all_out_all_out(self, out);
}

at::Tensor any(const at::Tensor & self) {
return wrapper_any(self);
}

at::Tensor & any_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_any_out_all_out(self, out);
}

at::Tensor & any_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_any_out_all_out(self, out);
}

at::Tensor renorm(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
return wrapper_renorm(self, p, dim, maxnorm);
}

at::Tensor & renorm_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
return wrapper_renorm_out_out(self, p, dim, maxnorm, out);
}

at::Tensor & renorm_outf(const at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm, at::Tensor & out) {
return wrapper_renorm_out_out(self, p, dim, maxnorm, out);
}

at::Tensor & renorm_(at::Tensor & self, const at::Scalar & p, int64_t dim, const at::Scalar & maxnorm) {
return wrapper_renorm_(self, p, dim, maxnorm);
}

at::Tensor pow(const at::Tensor & self, const at::Tensor & exponent) {
return wrapper_pow_Tensor_Tensor(self, exponent);
}

at::Tensor & pow_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & exponent) {
return wrapper_pow_out_Tensor_Tensor_out(self, exponent, out);
}

at::Tensor & pow_outf(const at::Tensor & self, const at::Tensor & exponent, at::Tensor & out) {
return wrapper_pow_out_Tensor_Tensor_out(self, exponent, out);
}

at::Tensor & pow_(at::Tensor & self, const at::Tensor & exponent) {
return wrapper_pow__Tensor(self, exponent);
}

at::Tensor pow(const at::Scalar & self, const at::Tensor & exponent) {
return wrapper_pow_Scalar(self, exponent);
}

at::Tensor & pow_out(at::Tensor & out, const at::Scalar & self, const at::Tensor & exponent) {
return wrapper_pow_out_Scalar_out(self, exponent, out);
}

at::Tensor & pow_outf(const at::Scalar & self, const at::Tensor & exponent, at::Tensor & out) {
return wrapper_pow_out_Scalar_out(self, exponent, out);
}

at::Tensor pow(const at::Tensor & self, const at::Scalar & exponent) {
return wrapper_pow_Tensor_Scalar(self, exponent);
}

at::Tensor & pow_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & exponent) {
return wrapper_pow_out_Tensor_Scalar_out(self, exponent, out);
}

at::Tensor & pow_outf(const at::Tensor & self, const at::Scalar & exponent, at::Tensor & out) {
return wrapper_pow_out_Tensor_Scalar_out(self, exponent, out);
}

at::Tensor & pow_(at::Tensor & self, const at::Scalar & exponent) {
return wrapper_pow__Scalar(self, exponent);
}

at::Tensor & normal_(at::Tensor & self, double mean, double std, c10::optional<at::Generator> generator) {
return wrapper__normal_(self, mean, std, generator);
}

at::Tensor & _index_copy_(at::Tensor & self, int64_t dim, const at::Tensor & index, const at::Tensor & source) {
return wrapper___index_copy_(self, dim, index, source);
}

at::Tensor & _amp_update_scale_(at::Tensor & self, at::Tensor & growth_tracker, const at::Tensor & found_inf, double scale_growth_factor, double scale_backoff_factor, int64_t growth_interval) {
return wrapper___amp_update_scale_(self, growth_tracker, found_inf, scale_growth_factor, scale_backoff_factor, growth_interval);
}

at::Tensor _convert_indices_from_coo_to_csr(const at::Tensor & self, int64_t size, bool out_int32) {
return wrapper__convert_indices_from_coo_to_csr(self, size, out_int32);
}

at::Tensor & _convert_indices_from_coo_to_csr_out(at::Tensor & out, const at::Tensor & self, int64_t size, bool out_int32) {
return wrapper__convert_indices_from_coo_to_csr_out_out(self, size, out_int32, out);
}

at::Tensor & _convert_indices_from_coo_to_csr_outf(const at::Tensor & self, int64_t size, bool out_int32, at::Tensor & out) {
return wrapper__convert_indices_from_coo_to_csr_out_out(self, size, out_int32, out);
}

::std::tuple<at::Tensor,at::Tensor> nll_loss_forward(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index) {
return wrapper_nll_loss_forward(self, target, weight, reduction, ignore_index);
}

::std::tuple<at::Tensor &,at::Tensor &> nll_loss_forward_out(at::Tensor & output, at::Tensor & total_weight, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index) {
return wrapper_nll_loss_forward_out_output(self, target, weight, reduction, ignore_index, output, total_weight);
}

::std::tuple<at::Tensor &,at::Tensor &> nll_loss_forward_outf(const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, at::Tensor & output, at::Tensor & total_weight) {
return wrapper_nll_loss_forward_out_output(self, target, weight, reduction, ignore_index, output, total_weight);
}

at::Tensor nll_loss_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
return wrapper_nll_loss_backward(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}

at::Tensor & nll_loss_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight) {
return wrapper_nll_loss_backward_out_grad_input(grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
}

at::Tensor & nll_loss_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & target, const c10::optional<at::Tensor> & weight, int64_t reduction, int64_t ignore_index, const at::Tensor & total_weight, at::Tensor & grad_input) {
return wrapper_nll_loss_backward_out_grad_input(grad_output, self, target, weight, reduction, ignore_index, total_weight, grad_input);
}

at::Tensor elu(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
return wrapper_elu(self, alpha, scale, input_scale);
}

at::Tensor & elu_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
return wrapper_elu_out_out(self, alpha, scale, input_scale, out);
}

at::Tensor & elu_outf(const at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, at::Tensor & out) {
return wrapper_elu_out_out(self, alpha, scale, input_scale, out);
}

at::Tensor & elu_(at::Tensor & self, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale) {
return wrapper_elu_(self, alpha, scale, input_scale);
}

at::Tensor elu_backward(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result) {
return wrapper_elu_backward(grad_output, alpha, scale, input_scale, is_result, self_or_result);
}

at::Tensor & elu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result) {
return wrapper_elu_backward_out_grad_input(grad_output, alpha, scale, input_scale, is_result, self_or_result, grad_input);
}

at::Tensor & elu_backward_outf(const at::Tensor & grad_output, const at::Scalar & alpha, const at::Scalar & scale, const at::Scalar & input_scale, bool is_result, const at::Tensor & self_or_result, at::Tensor & grad_input) {
return wrapper_elu_backward_out_grad_input(grad_output, alpha, scale, input_scale, is_result, self_or_result, grad_input);
}

at::Tensor glu(const at::Tensor & self, int64_t dim) {
return wrapper_glu(self, dim);
}

at::Tensor & glu_out(at::Tensor & out, const at::Tensor & self, int64_t dim) {
return wrapper_glu_out_out(self, dim, out);
}

at::Tensor & glu_outf(const at::Tensor & self, int64_t dim, at::Tensor & out) {
return wrapper_glu_out_out(self, dim, out);
}

at::Tensor hardsigmoid(const at::Tensor & self) {
return wrapper_hardsigmoid(self);
}

at::Tensor & hardsigmoid_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_hardsigmoid_out_out(self, out);
}

at::Tensor & hardsigmoid_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_hardsigmoid_out_out(self, out);
}

at::Tensor & hardsigmoid_(at::Tensor & self) {
return wrapper_hardsigmoid_(self);
}

at::Tensor hardsigmoid_backward(const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper_hardsigmoid_backward(grad_output, self);
}

at::Tensor & hardsigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self) {
return wrapper_hardsigmoid_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor & hardsigmoid_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::Tensor & grad_input) {
return wrapper_hardsigmoid_backward_out_grad_input(grad_output, self, grad_input);
}

at::Tensor & hardtanh_(at::Tensor & self, const at::Scalar & min_val, const at::Scalar & max_val) {
return wrapper__hardtanh_(self, min_val, max_val);
}

at::Tensor & hardswish_(at::Tensor & self) {
return wrapper__hardswish_(self);
}

at::Tensor leaky_relu(const at::Tensor & self, const at::Scalar & negative_slope) {
return wrapper_leaky_relu(self, negative_slope);
}

at::Tensor & leaky_relu_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & negative_slope) {
return wrapper_leaky_relu_out_out(self, negative_slope, out);
}

at::Tensor & leaky_relu_outf(const at::Tensor & self, const at::Scalar & negative_slope, at::Tensor & out) {
return wrapper_leaky_relu_out_out(self, negative_slope, out);
}

at::Tensor & leaky_relu_(at::Tensor & self, const at::Scalar & negative_slope) {
return wrapper_leaky_relu_(self, negative_slope);
}

at::Tensor leaky_relu_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result) {
return wrapper_leaky_relu_backward(grad_output, self, negative_slope, self_is_result);
}

at::Tensor & leaky_relu_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result) {
return wrapper_leaky_relu_backward_out_grad_input(grad_output, self, negative_slope, self_is_result, grad_input);
}

at::Tensor & leaky_relu_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & negative_slope, bool self_is_result, at::Tensor & grad_input) {
return wrapper_leaky_relu_backward_out_grad_input(grad_output, self, negative_slope, self_is_result, grad_input);
}

at::Tensor & rrelu_with_noise_(at::Tensor & self, const at::Tensor & noise, const at::Scalar & lower, const at::Scalar & upper, bool training, c10::optional<at::Generator> generator) {
return wrapper__rrelu_with_noise_(self, noise, lower, upper, training, generator);
}

at::Tensor softplus(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold) {
return wrapper_softplus(self, beta, threshold);
}

at::Tensor & softplus_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold) {
return wrapper_softplus_out_out(self, beta, threshold, out);
}

at::Tensor & softplus_outf(const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, at::Tensor & out) {
return wrapper_softplus_out_out(self, beta, threshold, out);
}

at::Tensor softplus_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output) {
return wrapper_softplus_backward(grad_output, self, beta, threshold, output);
}

at::Tensor & softplus_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output) {
return wrapper_softplus_backward_out_grad_input(grad_output, self, beta, threshold, output, grad_input);
}

at::Tensor & softplus_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & beta, const at::Scalar & threshold, const at::Tensor & output, at::Tensor & grad_input) {
return wrapper_softplus_backward_out_grad_input(grad_output, self, beta, threshold, output, grad_input);
}

at::Tensor softshrink(const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_softshrink(self, lambd);
}

at::Tensor & softshrink_out(at::Tensor & out, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_softshrink_out_out(self, lambd, out);
}

at::Tensor & softshrink_outf(const at::Tensor & self, const at::Scalar & lambd, at::Tensor & out) {
return wrapper_softshrink_out_out(self, lambd, out);
}

at::Tensor softshrink_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_softshrink_backward(grad_output, self, lambd);
}

at::Tensor & softshrink_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd) {
return wrapper_softshrink_backward_out_grad_input(grad_output, self, lambd, grad_input);
}

at::Tensor & softshrink_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Scalar & lambd, at::Tensor & grad_input) {
return wrapper_softshrink_backward_out_grad_input(grad_output, self, lambd, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> adaptive_max_pool2d(const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_adaptive_max_pool2d(self, output_size);
}

::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool2d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_adaptive_max_pool2d_out_out(self, output_size, out, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool2d_outf(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices) {
return wrapper_adaptive_max_pool2d_out_out(self, output_size, out, indices);
}

at::Tensor adaptive_max_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
return wrapper_adaptive_max_pool2d_backward(grad_output, self, indices);
}

at::Tensor & adaptive_max_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
return wrapper_adaptive_max_pool2d_backward_out_grad_input(grad_output, self, indices, grad_input);
}

at::Tensor & adaptive_max_pool2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input) {
return wrapper_adaptive_max_pool2d_backward_out_grad_input(grad_output, self, indices, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> adaptive_max_pool3d(const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_adaptive_max_pool3d(self, output_size);
}

::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool3d_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef output_size) {
return wrapper_adaptive_max_pool3d_out_out(self, output_size, out, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> adaptive_max_pool3d_outf(const at::Tensor & self, at::IntArrayRef output_size, at::Tensor & out, at::Tensor & indices) {
return wrapper_adaptive_max_pool3d_out_out(self, output_size, out, indices);
}

at::Tensor adaptive_max_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
return wrapper_adaptive_max_pool3d_backward(grad_output, self, indices);
}

at::Tensor & adaptive_max_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices) {
return wrapper_adaptive_max_pool3d_backward_out_grad_input(grad_output, self, indices, grad_input);
}

at::Tensor & adaptive_max_pool3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, const at::Tensor & indices, at::Tensor & grad_input) {
return wrapper_adaptive_max_pool3d_backward_out_grad_input(grad_output, self, indices, grad_input);
}

at::Tensor avg_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool2d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & avg_pool2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool2d_out_out(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
}

at::Tensor & avg_pool2d_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & out) {
return wrapper_avg_pool2d_out_out(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
}

at::Tensor avg_pool2d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool2d_backward(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & avg_pool2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool2d_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
}

at::Tensor & avg_pool2d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & grad_input) {
return wrapper_avg_pool2d_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
}

at::Tensor avg_pool3d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool3d(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & avg_pool3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool3d_out_out(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
}

at::Tensor & avg_pool3d_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & out) {
return wrapper_avg_pool3d_out_out(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, out);
}

at::Tensor avg_pool3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool3d_backward(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}

at::Tensor & avg_pool3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
return wrapper_avg_pool3d_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
}

at::Tensor & avg_pool3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override, at::Tensor & grad_input) {
return wrapper_avg_pool3d_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override, grad_input);
}

::std::tuple<at::Tensor,at::Tensor> fractional_max_pool2d(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
return wrapper_fractional_max_pool2d(self, kernel_size, output_size, random_samples);
}

::std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool2d_out(at::Tensor & output, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples) {
return wrapper_fractional_max_pool2d_out_output(self, kernel_size, output_size, random_samples, output, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> fractional_max_pool2d_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef output_size, const at::Tensor & random_samples, at::Tensor & output, at::Tensor & indices) {
return wrapper_fractional_max_pool2d_out_output(self, kernel_size, output_size, random_samples, output, indices);
}

::std::tuple<at::Tensor,at::Tensor> max_pool2d_with_indices(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
return wrapper_max_pool2d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
}

::std::tuple<at::Tensor &,at::Tensor &> max_pool2d_with_indices_out(at::Tensor & out, at::Tensor & indices, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode) {
return wrapper_max_pool2d_with_indices_out_out(self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
}

::std::tuple<at::Tensor &,at::Tensor &> max_pool2d_with_indices_outf(const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, at::Tensor & out, at::Tensor & indices) {
return wrapper_max_pool2d_with_indices_out_out(self, kernel_size, stride, padding, dilation, ceil_mode, out, indices);
}

at::Tensor max_pool2d_with_indices_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
return wrapper_max_pool2d_with_indices_backward(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}

at::Tensor & max_pool2d_with_indices_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices) {
return wrapper_max_pool2d_with_indices_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
}

at::Tensor & max_pool2d_with_indices_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef kernel_size, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode, const at::Tensor & indices, at::Tensor & grad_input) {
return wrapper_max_pool2d_with_indices_backward_out_grad_input(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices, grad_input);
}

at::Tensor reflection_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad1d(self, padding);
}

at::Tensor & reflection_pad1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad1d_out_out(self, padding, out);
}

at::Tensor & reflection_pad1d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_reflection_pad1d_out_out(self, padding, out);
}

at::Tensor reflection_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad1d_backward(grad_output, self, padding);
}

at::Tensor & reflection_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad1d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor & reflection_pad1d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_reflection_pad1d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor reflection_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad3d(self, padding);
}

at::Tensor & reflection_pad3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad3d_out_out(self, padding, out);
}

at::Tensor & reflection_pad3d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_reflection_pad3d_out_out(self, padding, out);
}

at::Tensor reflection_pad3d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad3d_backward(grad_output, self, padding);
}

at::Tensor & reflection_pad3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_reflection_pad3d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor & reflection_pad3d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_reflection_pad3d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor replication_pad1d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad1d(self, padding);
}

at::Tensor & replication_pad1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad1d_out_out(self, padding, out);
}

at::Tensor & replication_pad1d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_replication_pad1d_out_out(self, padding, out);
}

at::Tensor replication_pad1d_backward(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad1d_backward(grad_output, self, padding);
}

at::Tensor & replication_pad1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad1d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor & replication_pad1d_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, at::IntArrayRef padding, at::Tensor & grad_input) {
return wrapper_replication_pad1d_backward_out_grad_input(grad_output, self, padding, grad_input);
}

at::Tensor replication_pad2d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad2d(self, padding);
}

at::Tensor & replication_pad2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad2d_out_out(self, padding, out);
}

at::Tensor & replication_pad2d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_replication_pad2d_out_out(self, padding, out);
}

at::Tensor replication_pad3d(const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad3d(self, padding);
}

at::Tensor & replication_pad3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef padding) {
return wrapper_replication_pad3d_out_out(self, padding, out);
}

at::Tensor & replication_pad3d_outf(const at::Tensor & self, at::IntArrayRef padding, at::Tensor & out) {
return wrapper_replication_pad3d_out_out(self, padding, out);
}

at::Tensor upsample_linear1d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
return wrapper_upsample_linear1d(self, output_size, align_corners, scales);
}

at::Tensor & upsample_linear1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
return wrapper_upsample_linear1d_out_out(self, output_size, align_corners, scales, out);
}

at::Tensor & upsample_linear1d_outf(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales, at::Tensor & out) {
return wrapper_upsample_linear1d_out_out(self, output_size, align_corners, scales, out);
}

at::Tensor upsample_linear1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
return wrapper_upsample_linear1d_backward(grad_output, output_size, input_size, align_corners, scales);
}

at::Tensor & upsample_linear1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
return wrapper_upsample_linear1d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales, grad_input);
}

at::Tensor & upsample_linear1d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales, at::Tensor & grad_input) {
return wrapper_upsample_linear1d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales, grad_input);
}

at::Tensor upsample_bilinear2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bilinear2d(self, output_size, align_corners, scales_h, scales_w);
}

at::Tensor & upsample_bilinear2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bilinear2d_out_out(self, output_size, align_corners, scales_h, scales_w, out);
}

at::Tensor & upsample_bilinear2d_outf(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_bilinear2d_out_out(self, output_size, align_corners, scales_h, scales_w, out);
}

at::Tensor upsample_bilinear2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bilinear2d_backward(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}

at::Tensor & upsample_bilinear2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bilinear2d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_bilinear2d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_bilinear2d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
}

at::Tensor upsample_bicubic2d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bicubic2d(self, output_size, align_corners, scales_h, scales_w);
}

at::Tensor & upsample_bicubic2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bicubic2d_out_out(self, output_size, align_corners, scales_h, scales_w, out);
}

at::Tensor & upsample_bicubic2d_outf(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_bicubic2d_out_out(self, output_size, align_corners, scales_h, scales_w, out);
}

at::Tensor upsample_bicubic2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bicubic2d_backward(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}

at::Tensor & upsample_bicubic2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_bicubic2d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_bicubic2d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_bicubic2d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_h, scales_w, grad_input);
}

at::Tensor upsample_trilinear3d(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_trilinear3d(self, output_size, align_corners, scales_d, scales_h, scales_w);
}

at::Tensor & upsample_trilinear3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_trilinear3d_out_out(self, output_size, align_corners, scales_d, scales_h, scales_w, out);
}

at::Tensor & upsample_trilinear3d_outf(const at::Tensor & self, at::IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_trilinear3d_out_out(self, output_size, align_corners, scales_d, scales_h, scales_w, out);
}

at::Tensor upsample_trilinear3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_trilinear3d_backward(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
}

at::Tensor & upsample_trilinear3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_trilinear3d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_trilinear3d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_trilinear3d_backward_out_grad_input(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w, grad_input);
}

at::Tensor upsample_nearest1d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales) {
return wrapper_upsample_nearest1d(self, output_size, scales);
}

at::Tensor & upsample_nearest1d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales) {
return wrapper_upsample_nearest1d_out_out(self, output_size, scales, out);
}

at::Tensor & upsample_nearest1d_outf(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales, at::Tensor & out) {
return wrapper_upsample_nearest1d_out_out(self, output_size, scales, out);
}

at::Tensor upsample_nearest1d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales) {
return wrapper_upsample_nearest1d_backward(grad_output, output_size, input_size, scales);
}

at::Tensor & upsample_nearest1d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales) {
return wrapper_upsample_nearest1d_backward_out_grad_input(grad_output, output_size, input_size, scales, grad_input);
}

at::Tensor & upsample_nearest1d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales, at::Tensor & grad_input) {
return wrapper_upsample_nearest1d_backward_out_grad_input(grad_output, output_size, input_size, scales, grad_input);
}

at::Tensor upsample_nearest2d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest2d(self, output_size, scales_h, scales_w);
}

at::Tensor & upsample_nearest2d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest2d_out_out(self, output_size, scales_h, scales_w, out);
}

at::Tensor & upsample_nearest2d_outf(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_nearest2d_out_out(self, output_size, scales_h, scales_w, out);
}

at::Tensor upsample_nearest2d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest2d_backward(grad_output, output_size, input_size, scales_h, scales_w);
}

at::Tensor & upsample_nearest2d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest2d_backward_out_grad_input(grad_output, output_size, input_size, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_nearest2d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_nearest2d_backward_out_grad_input(grad_output, output_size, input_size, scales_h, scales_w, grad_input);
}

at::Tensor upsample_nearest3d(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest3d(self, output_size, scales_d, scales_h, scales_w);
}

at::Tensor & upsample_nearest3d_out(at::Tensor & out, const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest3d_out_out(self, output_size, scales_d, scales_h, scales_w, out);
}

at::Tensor & upsample_nearest3d_outf(const at::Tensor & self, at::IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & out) {
return wrapper_upsample_nearest3d_out_out(self, output_size, scales_d, scales_h, scales_w, out);
}

at::Tensor upsample_nearest3d_backward(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest3d_backward(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
}

at::Tensor & upsample_nearest3d_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
return wrapper_upsample_nearest3d_backward_out_grad_input(grad_output, output_size, input_size, scales_d, scales_h, scales_w, grad_input);
}

at::Tensor & upsample_nearest3d_backward_outf(const at::Tensor & grad_output, at::IntArrayRef output_size, at::IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w, at::Tensor & grad_input) {
return wrapper_upsample_nearest3d_backward_out_grad_input(grad_output, output_size, input_size, scales_d, scales_h, scales_w, grad_input);
}

at::Tensor sigmoid_backward(const at::Tensor & grad_output, const at::Tensor & output) {
return wrapper_sigmoid_backward(grad_output, output);
}

at::Tensor & sigmoid_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) {
return wrapper_sigmoid_backward_out_grad_input(grad_output, output, grad_input);
}

at::Tensor & sigmoid_backward_outf(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input) {
return wrapper_sigmoid_backward_out_grad_input(grad_output, output, grad_input);
}

at::Tensor logit_backward(const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps) {
return wrapper_logit_backward(grad_output, self, eps);
}

at::Tensor & logit_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps) {
return wrapper_logit_backward_out_grad_input(grad_output, self, eps, grad_input);
}

at::Tensor & logit_backward_outf(const at::Tensor & grad_output, const at::Tensor & self, c10::optional<double> eps, at::Tensor & grad_input) {
return wrapper_logit_backward_out_grad_input(grad_output, self, eps, grad_input);
}

at::Tensor tanh_backward(const at::Tensor & grad_output, const at::Tensor & output) {
return wrapper_tanh_backward(grad_output, output);
}

at::Tensor & tanh_backward_out(at::Tensor & grad_input, const at::Tensor & grad_output, const at::Tensor & output) {
return wrapper_tanh_backward_out_grad_input(grad_output, output, grad_input);
}

at::Tensor & tanh_backward_outf(const at::Tensor & grad_output, const at::Tensor & output, at::Tensor & grad_input) {
return wrapper_tanh_backward_out_grad_input(grad_output, output, grad_input);
}

at::Tensor slow_conv_transpose2d(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
return wrapper_slow_conv_transpose2d(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}

at::Tensor & slow_conv_transpose2d_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation) {
return wrapper_slow_conv_transpose2d_out_out(self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
}

at::Tensor & slow_conv_transpose2d_outf(const at::Tensor & self, const at::Tensor & weight, at::IntArrayRef kernel_size, const c10::optional<at::Tensor> & bias, at::IntArrayRef stride, at::IntArrayRef padding, at::IntArrayRef output_padding, at::IntArrayRef dilation, at::Tensor & out) {
return wrapper_slow_conv_transpose2d_out_out(self, weight, kernel_size, bias, stride, padding, output_padding, dilation, out);
}

at::Tensor isposinf(const at::Tensor & self) {
return wrapper_isposinf(self);
}

at::Tensor & isposinf_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_isposinf_out_out(self, out);
}

at::Tensor & isposinf_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_isposinf_out_out(self, out);
}

at::Tensor isneginf(const at::Tensor & self) {
return wrapper_isneginf(self);
}

at::Tensor & isneginf_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_isneginf_out_out(self, out);
}

at::Tensor & isneginf_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_isneginf_out_out(self, out);
}

at::Tensor special_entr(const at::Tensor & self) {
return wrapper_special_entr(self);
}

at::Tensor & special_entr_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_entr_out_out(self, out);
}

at::Tensor & special_entr_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_entr_out_out(self, out);
}

at::Tensor special_ndtri(const at::Tensor & self) {
return wrapper_special_ndtri(self);
}

at::Tensor & special_ndtri_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_ndtri_out_out(self, out);
}

at::Tensor & special_ndtri_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_ndtri_out_out(self, out);
}

at::Tensor special_erfcx(const at::Tensor & self) {
return wrapper_special_erfcx(self);
}

at::Tensor & special_erfcx_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_erfcx_out_out(self, out);
}

at::Tensor & special_erfcx_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_erfcx_out_out(self, out);
}

at::Tensor special_xlog1py(const at::Tensor & self, const at::Tensor & other) {
return wrapper_special_xlog1py(self, other);
}

at::Tensor & special_xlog1py_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_special_xlog1py_out_out(self, other, out);
}

at::Tensor & special_xlog1py_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_special_xlog1py_out_out(self, other, out);
}

at::Tensor special_zeta(const at::Tensor & self, const at::Tensor & other) {
return wrapper_special_zeta(self, other);
}

at::Tensor & special_zeta_out(at::Tensor & out, const at::Tensor & self, const at::Tensor & other) {
return wrapper_special_zeta_out_out(self, other, out);
}

at::Tensor & special_zeta_outf(const at::Tensor & self, const at::Tensor & other, at::Tensor & out) {
return wrapper_special_zeta_out_out(self, other, out);
}

at::Tensor special_i0e(const at::Tensor & self) {
return wrapper_special_i0e(self);
}

at::Tensor & special_i0e_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_i0e_out_out(self, out);
}

at::Tensor & special_i0e_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_i0e_out_out(self, out);
}

at::Tensor special_i1(const at::Tensor & self) {
return wrapper_special_i1(self);
}

at::Tensor & special_i1_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_i1_out_out(self, out);
}

at::Tensor & special_i1_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_i1_out_out(self, out);
}

at::Tensor special_i1e(const at::Tensor & self) {
return wrapper_special_i1e(self);
}

at::Tensor & special_i1e_out(at::Tensor & out, const at::Tensor & self) {
return wrapper_special_i1e_out_out(self, out);
}

at::Tensor & special_i1e_outf(const at::Tensor & self, at::Tensor & out) {
return wrapper_special_i1e_out_out(self, out);
}

at::Tensor & _linalg_inv_out_helper_(at::Tensor & self, at::Tensor & infos_lu, at::Tensor & infos_getri) {
return wrapper___linalg_inv_out_helper_(self, infos_lu, infos_getri);
}

} // namespace meta

} // namespace at
